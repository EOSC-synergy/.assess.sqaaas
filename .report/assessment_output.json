{
    "meta": {
        "version": "3.2.0",
        "report_json_url": "https://raw.githubusercontent.com/eosc-synergy/.assess.sqaaas/master/.report/assessment_output.json"
    },
    "repository": [
        {
            "url": "https://github.com/bcobo/SIRENA/",
            "name": "bcobo/SIRENA",
            "tag": "master",
            "commit_id": "0d5bcf504ac15675128cf679e98081df43ae6fa0",
            "is_main_repo": true,
            "avatar_url": "https://avatars.githubusercontent.com/u/24562948?v=4",
            "description": null,
            "languages": null,
            "topics": null,
            "stargazers_count": null,
            "watchers_count": null,
            "contributors_count": null,
            "forks_count": null,
            "badge_status": "bronze"
        }
    ],
    "report": {
        "QC.Acc": {
            "valid": true,
            "subcriteria": {
                "QC.Acc01": {
                    "description": "Is the source code managed with a Version Control System?",
                    "requirement_level": "MUST",
                    "hint": "The source code shall be managed with Git and remain publicly available for this criterion to be successful. Please check <a href=\"https://git-scm.com/book/es/v2\" target=\"_blank\">Pro Git</a> docs about how to get started using Git tool. Guidelines provided by the most popular social coding platforms (<a href=\"https://docs.github.com/get-started\" target=\"_blank\">GitHub</a>, <a href=\"https://about.gitlab.com/get-started/\" target=\"_blank\">GitLab</a>) are also a good starting point",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Source code uses Git for version control",
                            "plugin": {
                                "name": "report2sqaaas-plugin-boolean",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "git",
                                "lang": "scm",
                                "version": "2.34.1",
                                "docker": {
                                    "image": "bitnami/git:2.34.1",
                                    "reviewed": "2021-12-30"
                                },
                                "ci": {
                                    "name": "QC.Acc github.com/bcobo/SIRENA git",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "git rev-parse --is-inside-work-tree"
                                    ],
                                    "stdout_text": "true",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/34/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 100,
                "total_subcriteria": 1,
                "success_subcriteria": 1
            }
        },
        "QC.Doc": {
            "valid": true,
            "subcriteria": {
                "QC.Doc06.1": {
                    "description": "Is the software scope outlined in the code repository?",
                    "requirement_level": "MUST",
                    "hint": "A README file presents your software to the audience interested in your software project. Several online sites simplify the task of creating the README file, such as <a href=\"https://www.makeareadme.com/\" target=\"_blank\">Make a README</a> or <a href=\"https://readme.so/\" target=\"_blank\">readme.so</a> sites. Be sure to add it to the code repository's root path",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "A README file is present in the code repository",
                            "plugin": {
                                "name": "report2sqaaas-plugin-find_doc_files",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "find_doc_files.py",
                                "lang": "Contribution-enabling Files",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Doc/Dockerfile",
                                    "reviewed": "2022-01-26"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/bcobo/SIRENA find_doc_files.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "find_doc_files.py --file_type all"
                                    ],
                                    "stdout_text": "{\"README\": [{\"file_name\": \"README.md\", \"size\": 1097}], \"CODE_OF_CONDUCT\": [{\"file_name\": \"CODE_OF_CONDUCT.md\", \"size\": 3130}], \"CONTRIBUTING\": [{\"file_name\": \"CONTRIBUTING.md\", \"size\": 9781}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/43/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "README": [
                                    {
                                        "file_name": "README.md",
                                        "size": 1097
                                    }
                                ],
                                "CODE_OF_CONDUCT": [
                                    {
                                        "file_name": "CODE_OF_CONDUCT.md",
                                        "size": 3130
                                    }
                                ],
                                "CONTRIBUTING": [
                                    {
                                        "file_name": "CONTRIBUTING.md",
                                        "size": 9781
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Doc06.3": {
                    "description": "Does the project establish a code of conduct for its participants?",
                    "requirement_level": "MUST",
                    "hint": "A CODE_OF_CONDUCT file sets the path for a constructive, respectful and positive atmosphere among all the contributors in your software project. Of course you can define your own, but in case you want to rely on external and widely-adopted code of conducts check out some of the most popular ones: <a href=\"https://contributor-covenant.org/\" target=\"_blank\">Contributor Covenant</a> or <a href=\"https://web.archive.org/web/20200330154000/http://citizencodeofconduct.org/\" target=\"_blank\">Citizen Code of Conduct</a>",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "A CODE_OF_CONDUCT file is present in the code repository",
                            "plugin": {
                                "name": "report2sqaaas-plugin-find_doc_files",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "find_doc_files.py",
                                "lang": "Contribution-enabling Files",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Doc/Dockerfile",
                                    "reviewed": "2022-01-26"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/bcobo/SIRENA find_doc_files.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "find_doc_files.py --file_type all"
                                    ],
                                    "stdout_text": "{\"README\": [{\"file_name\": \"README.md\", \"size\": 1097}], \"CODE_OF_CONDUCT\": [{\"file_name\": \"CODE_OF_CONDUCT.md\", \"size\": 3130}], \"CONTRIBUTING\": [{\"file_name\": \"CONTRIBUTING.md\", \"size\": 9781}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/43/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "README": [
                                    {
                                        "file_name": "README.md",
                                        "size": 1097
                                    }
                                ],
                                "CODE_OF_CONDUCT": [
                                    {
                                        "file_name": "CODE_OF_CONDUCT.md",
                                        "size": 3130
                                    }
                                ],
                                "CONTRIBUTING": [
                                    {
                                        "file_name": "CONTRIBUTING.md",
                                        "size": 9781
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Doc06.2": {
                    "description": "Is there a clear path or guidelines on how to contribute to the code?",
                    "requirement_level": "MUST",
                    "hint": "A CONTRIBUTING file shall be present in the root path of the code repository describing the expected workflow to follow when adding contributions. Please check <a href=\"https://mozillascience.github.io/working-open-workshop/contributing/\" target=\"_blank\">Mozilla's guidelines</a> and <a href=\"https://github.com/github/docs/blob/main/CONTRIBUTING.md\" target=\"_blank\">GitHub's CONTRIBUTING.md example</a> to get inspired on how to write a good CONTRIBUTING file",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "A CONTRIBUTING file is present in the code repository",
                            "plugin": {
                                "name": "report2sqaaas-plugin-find_doc_files",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "find_doc_files.py",
                                "lang": "Contribution-enabling Files",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Doc/Dockerfile",
                                    "reviewed": "2022-01-26"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/bcobo/SIRENA find_doc_files.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "find_doc_files.py --file_type all"
                                    ],
                                    "stdout_text": "{\"README\": [{\"file_name\": \"README.md\", \"size\": 1097}], \"CODE_OF_CONDUCT\": [{\"file_name\": \"CODE_OF_CONDUCT.md\", \"size\": 3130}], \"CONTRIBUTING\": [{\"file_name\": \"CONTRIBUTING.md\", \"size\": 9781}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/43/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "README": [
                                    {
                                        "file_name": "README.md",
                                        "size": 1097
                                    }
                                ],
                                "CODE_OF_CONDUCT": [
                                    {
                                        "file_name": "CODE_OF_CONDUCT.md",
                                        "size": 3130
                                    }
                                ],
                                "CONTRIBUTING": [
                                    {
                                        "file_name": "CONTRIBUTING.md",
                                        "size": 9781
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Doc01.1": {
                    "description": "Are docs managed in the same repository as code?",
                    "requirement_level": "MAY",
                    "hint": "This subcriterion will succeed if the documentation files exist on the same repository as the source code, e.g. under a <code>docs/</code> folder",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Documentation resides in the same repository as code",
                            "plugin": {
                                "name": "report2sqaaas-plugin-boolean",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "git",
                                "lang": null,
                                "version": null,
                                "docker": null,
                                "ci": {
                                    "name": "QC.Doc github.com/bcobo/SIRENA git",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "git rev-parse --is-inside-work-tree"
                                    ],
                                    "stdout_text": "true",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/52/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": true
                },
                "QC.Doc02.X": {
                    "description": "Are docs following a style for the Markdown markup language?",
                    "requirement_level": "MAY",
                    "hint": "When using a docs-as-code approach, the style of the markup language is being checked. SQAaaS relies on <a href=\"https://github.com/markdownlint/markdownlint/\" target=\"_blank\">markdownlint</a> for Markdown files and <a href=\"https://github.com/twolfson/restructuredtext-lint/\" target=\"_blank\">restructuredtext-lint</a> for reStructuredText",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Docs are not fully compliant with markdownlint standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-markdownlint",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "markdownlint",
                                "lang": "Markdown",
                                "version": "0.11.0",
                                "docker": {
                                    "dockerfile": "QC.Doc/markdownlint/Dockerfile",
                                    "reviewed": "1970-01-01"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/bcobo/SIRENA markdownlint",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "mdl --json ."
                                    ],
                                    "stdout_text": "[{\"filename\":\"./CODE_OF_CONDUCT.md\",\"line\":66,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CODE_OF_CONDUCT.md\",\"line\":67,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":29,\"rule\":\"MD002\",\"aliases\":[\"first-header-h1\"],\"description\":\"First header should be a top level header\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":28,\"rule\":\"MD012\",\"aliases\":[\"no-multiple-blanks\"],\"description\":\"Multiple consecutive blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":36,\"rule\":\"MD012\",\"aliases\":[\"no-multiple-blanks\"],\"description\":\"Multiple consecutive blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":110,\"rule\":\"MD012\",\"aliases\":[\"no-multiple-blanks\"],\"description\":\"Multiple consecutive blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":6,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":8,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":33,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":41,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":43,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":47,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":52,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":54,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":69,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":76,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":79,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":80,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":81,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":85,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":87,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":92,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":95,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":97,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":99,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":105,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":106,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":108,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":113,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":119,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":120,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":121,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":129,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":130,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":131,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":132,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":134,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":136,\"rule\":\"MD022\",\"aliases\":[\"blanks-around-headers\"],\"description\":\"Headers should be surrounded by blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":142,\"rule\":\"MD022\",\"aliases\":[\"blanks-around-headers\"],\"description\":\"Headers should be surrounded by blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":148,\"rule\":\"MD022\",\"aliases\":[\"blanks-around-headers\"],\"description\":\"Headers should be surrounded by blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":154,\"rule\":\"MD022\",\"aliases\":[\"blanks-around-headers\"],\"description\":\"Headers should be surrounded by blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":55,\"rule\":\"MD032\",\"aliases\":[\"blanks-around-lists\"],\"description\":\"Lists should be surrounded by blank lines\"},{\"filename\":\"./CONTRIBUTING.md\",\"line\":63,\"rule\":\"MD032\",\"aliases\":[\"blanks-around-lists\"],\"description\":\"Lists should be surrounded by blank lines\"},{\"filename\":\"./README.md\",\"line\":3,\"rule\":\"MD009\",\"aliases\":[\"no-trailing-spaces\"],\"description\":\"Trailing spaces\"},{\"filename\":\"./README.md\",\"line\":9,\"rule\":\"MD009\",\"aliases\":[\"no-trailing-spaces\"],\"description\":\"Trailing spaces\"},{\"filename\":\"./README.md\",\"line\":22,\"rule\":\"MD009\",\"aliases\":[\"no-trailing-spaces\"],\"description\":\"Trailing spaces\"},{\"filename\":\"./README.md\",\"line\":2,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./README.md\",\"line\":3,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./README.md\",\"line\":8,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./README.md\",\"line\":10,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./README.md\",\"line\":11,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./README.md\",\"line\":12,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./README.md\",\"line\":1,\"rule\":\"MD022\",\"aliases\":[\"blanks-around-headers\"],\"description\":\"Headers should be surrounded by blank lines\"},{\"filename\":\"./README.md\",\"line\":12,\"rule\":\"MD029\",\"aliases\":[\"ol-prefix\"],\"description\":\"Ordered list item prefix\"},{\"filename\":\"./README.md\",\"line\":16,\"rule\":\"MD029\",\"aliases\":[\"ol-prefix\"],\"description\":\"Ordered list item prefix\"},{\"filename\":\"./README.md\",\"line\":13,\"rule\":\"MD031\",\"aliases\":[\"blanks-around-fences\"],\"description\":\"Fenced code blocks should be surrounded by blank lines\"},{\"filename\":\"./README.md\",\"line\":15,\"rule\":\"MD031\",\"aliases\":[\"blanks-around-fences\"],\"description\":\"Fenced code blocks should be surrounded by blank lines\"},{\"filename\":\"./README.md\",\"line\":17,\"rule\":\"MD031\",\"aliases\":[\"blanks-around-fences\"],\"description\":\"Fenced code blocks should be surrounded by blank lines\"},{\"filename\":\"./README.md\",\"line\":23,\"rule\":\"MD031\",\"aliases\":[\"blanks-around-fences\"],\"description\":\"Fenced code blocks should be surrounded by blank lines\"},{\"filename\":\"./doc/README.md\",\"line\":2,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./doc/README.md\",\"line\":3,\"rule\":\"MD013\",\"aliases\":[\"line-length\"],\"description\":\"Line length\"},{\"filename\":\"./doc/README.md\",\"line\":1,\"rule\":\"MD022\",\"aliases\":[\"blanks-around-headers\"],\"description\":\"Headers should be surrounded by blank lines\"},{\"filename\":\"./doc/README.md\",\"line\":3,\"rule\":\"MD034\",\"aliases\":[\"no-bare-urls\"],\"description\":\"Bare URL used\"}]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/61/log?consoleFull"
                                },
                                "level": "RECOMMENDED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "./CODE_OF_CONDUCT.md": {
                                    "MD013": {
                                        "description": "Line length",
                                        "line": [
                                            66,
                                            67
                                        ]
                                    }
                                },
                                "./CONTRIBUTING.md": {
                                    "MD002": {
                                        "description": "First header should be a top level header",
                                        "line": [
                                            29
                                        ]
                                    },
                                    "MD012": {
                                        "description": "Multiple consecutive blank lines",
                                        "line": [
                                            28,
                                            36,
                                            110
                                        ]
                                    },
                                    "MD013": {
                                        "description": "Line length",
                                        "line": [
                                            6,
                                            8,
                                            33,
                                            41,
                                            43,
                                            47,
                                            52,
                                            54,
                                            69,
                                            76,
                                            79,
                                            80,
                                            81,
                                            85,
                                            87,
                                            92,
                                            95,
                                            97,
                                            99,
                                            105,
                                            106,
                                            108,
                                            113,
                                            119,
                                            120,
                                            121,
                                            129,
                                            130,
                                            131,
                                            132,
                                            134
                                        ]
                                    },
                                    "MD022": {
                                        "description": "Headers should be surrounded by blank lines",
                                        "line": [
                                            136,
                                            142,
                                            148,
                                            154
                                        ]
                                    },
                                    "MD032": {
                                        "description": "Lists should be surrounded by blank lines",
                                        "line": [
                                            55,
                                            63
                                        ]
                                    }
                                },
                                "./README.md": {
                                    "MD009": {
                                        "description": "Trailing spaces",
                                        "line": [
                                            3,
                                            9,
                                            22
                                        ]
                                    },
                                    "MD013": {
                                        "description": "Line length",
                                        "line": [
                                            2,
                                            3,
                                            8,
                                            10,
                                            11,
                                            12
                                        ]
                                    },
                                    "MD022": {
                                        "description": "Headers should be surrounded by blank lines",
                                        "line": [
                                            1
                                        ]
                                    },
                                    "MD029": {
                                        "description": "Ordered list item prefix",
                                        "line": [
                                            12,
                                            16
                                        ]
                                    },
                                    "MD031": {
                                        "description": "Fenced code blocks should be surrounded by blank lines",
                                        "line": [
                                            13,
                                            15,
                                            17,
                                            23
                                        ]
                                    }
                                },
                                "./doc/README.md": {
                                    "MD013": {
                                        "description": "Line length",
                                        "line": [
                                            2,
                                            3
                                        ]
                                    },
                                    "MD022": {
                                        "description": "Headers should be surrounded by blank lines",
                                        "line": [
                                            1
                                        ]
                                    },
                                    "MD034": {
                                        "description": "Bare URL used",
                                        "line": [
                                            3
                                        ]
                                    }
                                }
                            }
                        },
                        {
                            "valid": false,
                            "message": "Docs are not fully compliant with restructuredtext-lint standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-markdownlint",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "restructuredtext-lint",
                                "lang": "reStructuredText",
                                "version": "1.3.2",
                                "docker": {
                                    "dockerfile": "QC.Doc/restructuredtext-lint/Dockerfile",
                                    "reviewed": "2022-01-18"
                                },
                                "ci": {
                                    "name": "QC.Doc github.com/bcobo/SIRENA restructuredtext-lint",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "rst-lint --level warning --format json ."
                                    ],
                                    "stdout_text": "[{\"line\": 7, \"source\": \"./doc/zreferences.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"bibliography\\\".\", \"full_message\": \"Unknown directive type \\\"bibliography\\\".\\n\\n.. bibliography:: references.bib\"}, {\"line\": 13, \"source\": \"./doc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"toctree\\\".\", \"full_message\": \"Unknown directive type \\\"toctree\\\".\\n\\n.. toctree::\\n   :maxdepth: 3\\n\\n   SIRENA\\n   SIRENAcommandline\\n   SIRENAfunctions\\n   zreferences\\n\"}, {\"line\": 24, \"source\": \"./doc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 25, \"source\": \"./doc/index.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 26, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 30, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 32, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 37, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int addFirstRow(ReconstructInitSIRENA *reconstruct_init, fitsfile **inLibObject, double samprate, int runF0orB0val, gsl_vector *E, gsl_vector *PHEIGHT, gsl_matrix *PULSE, gsl_matrix *PULSEB0, gsl_matrix *MF, gsl_matrix *MFB0, gsl_matrix *COVAR, gsl_matrix *WEIGHT, gsl_matrix *PULSEMaxLengthFixedFilter, gsl_matrix *PULSEMaxLengthFixedFilter_B0)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function writes the first row of the library (without intermediate AB-related values, because it would be necessary to have at least two rows=energies in the library). It also writes the *FIXFILTT* and *FIXFILTF* HDUs with the optimal filters in the time and frequency domain with fixed legnths (base-2 values) and the *PRCLOFWN HDU with the precalculated values for optimal filtering and :option:`OFNoise` = **WEIGHTN*.\\n\\n    - Declare variables\\n    - Write in the first row of the library FITS file some columns **ENERGY**, **PHEIGHT**, **PULSE**, **PULSEB0**, **MF**, **MFB0** with the info provided by the input GSL vectors :cpp:member:`E`, :cpp:member:`PHEIGHT`, :cpp:member:`PULSE`, :cpp:member:`PULSEB0`, :cpp:member:`MF` and :cpp:member:`MFB0`.\\n    - Write in the first row of the library FITS file **PLSMXLFF** column if option:`largeFilter` > :option:`OFLength` with the info provided by the input GSL vector :cpp:member:`PULSEMaxLengthFixedFilter`\\n    - Write in the first row of the library FITS file **COVARM** and **WEIGHTM** columns if :option:`addCOVAR`/:option:`addINTCOVAR` = yes with the info provided by the input GSL vectors :cpp:member:`COVAR` and :cpp:member:`WEIGHT`\\n    - Writing HDUs with fixed filters in time (*FIXFILTT*) and frequency (*FIXFILTF*), **Tx** and **Fx** columns respectively (calculating the optimal filters, :cpp:func:`calculus_optimalFilter`).\\n      In time domain **Tx** columns are real numbers but in frequency domain **Fx** columns are complex numbers (so real parts are written in the first half of the column and imaginary parts in the second one)\\n    - Calculate and write the pre-calculated values by using the noise weight matrix from noise intervals (M'WM)^{-1}M'W for different lengths, **OFWNx** columns in *PRCLOFWN*\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    fitsfile** **inLibObject**\\n\\n        FITS object containing information of the library FITS file\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    int **runF0orB0val**\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\\n\\n    gsl_vector* **E**\\n\\n        First energy to be included in the library\\n\\n    gsl_vector* **PHEIGHT**\\n\\n        Pulse height associated to the first energy to be included in the library\\n\\n    gsl_matrix* **PULSE**\\n\\n        Pulse template associated to the first energy to be included in the library\\n\\n    gsl_matrix* **PULSEB0**\\n\\n        Pulse template without baseline associated to the first energy to be included in the library\\n\\n    gsl_matrix* **MF**\\n\\n        Matched filter associated to the first energy to be included in the library\\n\\n    gsl_matrix* **MFB0**\\n\\n        Matched filter (baseline subtracted) associated to the first energy to be included in the library\\n\\n    gsl_matrix* **COVAR**\\n\\n        Covariance matrix associated to the first energy to be included in the library\\n\\n    gsl_matrix* **WEIGHT**\\n\\n        Weight matrix associated to the first energy to be included in the library\\n\\n    gsl_matrix* **PULSEMaxLengthFixedFilter**\\n\\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library\\n\\n    gsl_matrix* **PULSEMaxLengthFixedFilter_B0**\\n\\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library (baseline subtracted)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: fitsfile** inLibObject\\n\\n        FITS object containing information of the library FITS file\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int runF0orB0val\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\\n\\n    .. cpp:member:: gsl_vector* E\\n\\n        First energy to be included in the library\\n\\n    .. cpp:member:: gsl_vector* PHEIGHT\\n\\n        Pulse height associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* PULSE\\n\\n        Pulse template associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* PULSEB0\\n\\n        Pulse template without baseline associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* MF\\n\\n        Matched filter associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* MFB0\\n\\n        Matched filter (baseline subtracted) associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* COVAR\\n\\n        Covariance matrix associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* WEIGHT\\n\\n        Weight matrix associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* PULSEMaxLengthFixedFilter\\n\\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library\\n\\n    .. cpp:member:: gsl_matrix* PULSEMaxLengthFixedFilter_B0\\n\\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library (baseline subtracted)\\n\\n\"}, {\"line\": 166, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int align(double samprate, gsl_vector **vector1, gsl_vector **vector2)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    Based on :cite:`GilPita2005`\\n\\n    This function aligns :cpp:member:`vector1` with :cpp:member:`vector2` (by delaying or moving forward :cpp:member:`vector2`) assuming that :cpp:member:`vector1` and :cpp:member:`vector2` are shifted replicas of the same function.\\n\\n    From the discrete function :math:`x[n] (n=0,...,N-1,N)` and according to the time shifting property of the Fourier transform:\\n\\n    .. math::\\n\\n        & x[n]    <------> X[f]\\\\\\\\\\n        & x[n-m]  <------> X[f] exp(-j2\\\\cdot\\\\pi\\\\cdot m/N)\\n\\n    If :math:`\\\\mathit{Shift} = m` then :math:`\\\\mathit{PhaseDueToTheShift}= 2\\\\pi m/N` and thus, :math:`m = \\\\mathit{PhaseDueToTheShift}\\\\cdot N/(2\\\\pi)`\\n\\n    1) Declare variables\\n\\n    2) FFT of :cpp:member:`vector1`\\n\\n    3) FFT of :cpp:member:`vector2`\\n\\n    4) (Phases of the *FFT_vector1* and *FFT_vector2*) :math:`*size/(2\\\\pi)`\\n\\n    5) Shift between the input vectors\\n\\n    6) *shiftdouble* into *shiftint* (because we are working with samples)\\n\\n    7) Move forward or delay :cpp:member:`vector1` depending on positive or negative shift\\n\\n    **Members/Variables**\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    gsl_vector** **vector1**\\n\\n        GSL vector with input vector\\n\\n    gsl_vector** **vector2**\\n\\n        GSL with input vector which is delayed or moved forward to be aligned with :cpp:member:`vector1`\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: gsl_vector** vector1\\n\\n        GSL vector with input vector\\n\\n    .. cpp:member:: gsl_vector** vector2\\n\\n        GSL with input vector which is delayed or moved forward to be aligned with :cpp:member:`vector1`\\n\\n\"}, {\"line\": 228, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int calculateEnergy(gsl_vector *vector, gsl_vector *filter, gsl_vector_complex *filterFFT, int indexEalpha, int indexEbeta, ReconstructInitSIRENA *reconstruct_init, double samprate, gsl_vector *Dab, gsl_matrix *PRCLCOV, gsl_matrix *PRCLOFWN, double *calculatedEnergy, double *tstartNewDev, int *lagsShift, int LowRes, int productSize, int tooshortPulse_NoLags)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function calculates the energy of a pulse (:cpp:member:`vector`) basically depending on the :option:`EnergyMethod`, :option:`OFNoise`, and the :option:`FilterDomain` selected from input parameters.\\n\\n    a) **OPTFILT**/**0PAD** and **NSD** (= **I2R** or **I2RFITTED**): Optimal filter = Wiener filter  (see :ref:`optimalFilter_NSD`)\\n\\n    Once the filter template has been created (:cpp:member:`filter` or :cpp:member:`filterFFT`), pulse height analysis is performed by aligning the template with a pulse and multiplying each point in the template by the corresponding point in the pulse. The sum of these products is the energy.\\n\\n    In the practice, the alignment of the pulse relative to the trigger is not completely accurate, so a number of *n* lags could be used in order to find the peak value of the energy. The *n* peak values are fitted to a parabola to find the most accurate energy (:option:`LagsOrNot`) and a corrected starting time.\\n\\n    a) **OPTFILT** and **WEIGHTN** (= **I2R** or **I2RFITTED**) (see :ref:`optimalFilter_WEIGHTN`)\\n\\n    c) **INTCOVAR** and **COVAR** (see :ref:`INTCOVAR` and :ref:`COVAR`)\\n\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **vector**\\n\\n        Pulse whose energy has to be determined\\n\\n    gsl_vector* **filter**\\n\\n        Optimal filter in time domain\\n\\n    gsl_vector_complex* **filterFFT**\\n\\n        Optimal filter in frequency domain\\n\\n    int **indexEalpha**\\n\\n        Index of the energy lower than the energy of the pulse which is being analyzed\\n\\n    int **indexEbeta**\\n\\n        Index of the energy higher than the energy of the pulse which is being analyzed\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    double **samprate**\\n\\n        Sampling rate in Hz\\n\\n    gsl_vector* **Dab**\\n\\n        **DAB** column in the library\\n\\n    gsl_vector* **PRCLCOV**\\n\\n        **PCOVx** column in the library\\n\\n    gsl_vector* **PRCLOFWN**\\n\\n        **OFWNx** column in the library\\n\\n    double* **calculatedEnergy**\\n\\n        Calculated energy in eV.\\n\\n    double **tstartNewDev**\\n\\n        Addional deviation of the starting time (if :option:`LagsOrNot` = 1)\\n\\n    int **lagsShift**\\n\\n        Number of samples shifted to find the maximum of the parabola\\n\\n    int **LowREs**\\n\\n        1 if the low resolution energy estimator (without lags) is going to be calculated\\n\\n    int **productSize**\\n\\n        Size of the scalar product to be calculated\\n\\n    int **tooshortPulse_NoLags**\\n\\n        Pulse too short to apply lags (1) or not (0)\\n\\n    .. cpp:member:: gsl_vector* vector\\n\\n        Pulse whose energy has to be determined\\n\\n    .. cpp:member:: gsl_vector* filter\\n\\n        Optimal filter in time domain\\n\\n    .. cpp:member:: gsl_vector_complex* filterFFT\\n\\n        Optimal filter in frequency domain\\n\\n    .. cpp:member:: int indexEalpha\\n\\n        Index of the energy lower than the energy of the pulse which is being analyzed\\n\\n    .. cpp:member:: int indexEbeta\\n\\n        Index of the energy higher than the energy of the pulse which is being analyzed\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate in Hz\\n\\n    .. cpp:member:: gsl_vector* Dab\\n\\n        **DAB** column in the library\\n\\n    .. cpp:member:: gsl_vector* PRCLCOV\\n\\n        **PCOVx** column in the library\\n\\n    .. cpp:member:: gsl_vector* PRCLOFWN\\n\\n        **OFWNx** column in the library\\n\\n    .. cpp:member:: double* calculatedEnergy\\n\\n        Calculated energy in eV.\\n\\n    .. cpp:member:: double tstartNewDev\\n\\n        Addional deviation of the starting time (if :option:`LagsOrNot` = 1)\\n\\n    .. cpp:member:: int lagsShift\\n\\n        Number of samples shifted to find the maximum of the parabola\\n\\n    .. cpp:member:: int LowRes\\n\\n        1 if the low resolution energy estimator (without lags) is going to be calculated\\n\\n    .. cpp:member:: int productSize\\n\\n        Size of the scalar product to be calculated\\n\\n    .. cpp:member:: int tooshortPulse_NoLags\\n\\n        Pulse too short to apply lags (1) or not (0)\\n\\n\"}, {\"line\": 376, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int calculateIntParams(ReconstructInitSIRENA *reconstruct_init, int indexa, int indexb, double samprate, int runF0orB0val, gsl_matrix *modelsaux, gsl_matrix *covarianceaux, gsl_matrix *weightaux, gsl_vector *energycolumn, gsl_matrix **Wabaux, gsl_matrix **TVaux, gsl_vector **tEcolumn, gsl_matrix **XMaux, gsl_matrix **YVaux, gsl_matrix **ZVaux, gsl_vector **rEcolumn, gsl_matrix **Dabaux, gsl_matrix **Sabaux, gsl_matrix **PrecalCOVaux, gsl_matrix **optimalfiltersabFREQaux, gsl_matrix **optimalfiltersabTIMEaux, gsl_matrix *modelsMaxLengthFixedFilteraux, gsl_matrix **DabMaxLengthFixedFilteraux)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function calculates some intermediate scalars, vectors and matrices (WAB, TV, tE, XM, YV, ZV, rE, PAB and DAB) for the interpolation and covariance methods. See :ref:`INTCOVAR` reconstruction method. It is used in :cpp:func:`readAddSortParams` .\\n\\n    - Declare variables and allocate GSL vectors and matrices\\n    - Calculate intermediate scalars, vectors and matrices\\n    - Free allocated GSL vectors and matrices\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    int **indexa**\\n\\n        Lower index of the library to calculate the intermediate params (:math:`\\\\alpha`)\\n\\n    int **indexb**\\n\\n        Higher index of the library to calculate the intermediate params (:math:`\\\\beta`)\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    int **runF0orB0val**\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\\n\\n    gsl_matrix* **modelsaux**\\n\\n        GSL input matrix with model template\\n\\n    gsl_matrix* **covarianceaux**\\n\\n        GSL input matrix with covariance matrix\\n\\n    gsl_matrix* **weightaux**\\n\\n        GSL input matrix with weight matrix\\n\\n    gsl_vector* **energycolumn**\\n\\n        GSL input vector with list of energies\\n\\n    gsl_matrix** **WAB**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **TVaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_vector** **tEcolumn**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **XMaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **YVaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **ZVaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_vector** **rEcolumn**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **Dabaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **Sabaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **PrecalCOVaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **optimalfiltersabFREQaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **optimalfiltersabTIMEaux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix* **modelsMaxLengthFixedFilteraux**\\n\\n        Input/output intermediate parameter\\n\\n    gsl_matrix** **PabMaxLengthFixedFilteraux**\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: int indexa\\n\\n        Lower index of the library to calculate the intermediate params (:math:`\\\\alpha`)\\n\\n    .. cpp:member:: int indexb\\n\\n        Higher index of the library to calculate the intermediate params (:math:`\\\\beta`)\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int runF0orB0val\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\\n\\n    .. cpp:member:: gsl_matrix* modelsaux\\n\\n        GSL input matrix with model template\\n\\n    .. cpp:member:: gsl_matrix* covarianceaux\\n\\n        GSL input matrix with covariance matrix\\n\\n    .. cpp:member:: gsl_matrix* weightaux\\n\\n        GSL input matrix with weight matrix\\n\\n    .. cpp:member:: gsl_vector* energycolumn\\n\\n        GSL input vector with list of energies\\n\\n    .. cpp:member:: gsl_matrix** WAB\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix** TVaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_vector** tEcolumn\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **XMaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **YVaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **ZVaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_vector **rEcolumn\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **Dabaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **Sabaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **PrecalCOVaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **optimalfiltersabFREQaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **optimalfiltersabTIMEaux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix* modelsMaxLengthFixedFilteraux\\n\\n        Input/output intermediate parameter\\n\\n    .. cpp:member:: gsl_matrix **PabMaxLengthFixedFilteraux\\n\\n        Input/output intermediate parameter\\n\\n\"}, {\"line\": 573, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int calculateTemplate(ReconstructInitSIRENA *reconstruct_init, PulsesCollection *pulsesAll, PulsesCollection *pulsesInRecord, double samprate, gsl_vector **pulseaverage, gsl_vector **pulseaverage_B0, double *pulseaverageHeight, gsl_matrix **covariance, gsl_matrix **weight, gsl_vector **pulseaverageMaxLengthFixedFilter, gsl_vector **pulseaverageMaxLengthFixedFilter_B0)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function calculates the template (**PULSE** column in the library) of non piled-up pulses.\\n    Just in case in the detection process some piled-up pulses have not been distinguished as different pulses, a pulseheights histogram is built. This function uses the pulseheights histogram (built by using the **PHEIGHT** column of the library), **Tstart** and **quality** to select the non piled-up pulses.\\n\\n    1) Declare and initialize variables\\n\\n    2) Before building the histogram, select the pulseheights of the pulses well separated from other pulses whose *quality* = 0\\n\\n    3) Create the pulseheights histogram\\n\\n    4) Calculate the pulseaverage only taking into account the valid pulses:\\n\\n        * Check if the pulse is piled-up or not\\n\\n        * Non piled-up pulses => Average them\\n\\n    5) Calculate covariance and weight matrices\\n\\n    6) Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    PulsesCollection* **pulsesAll**\\n\\n        Collection of pulses found in the previous records\\n\\n    PulsesCollection* **pulsesInRecord**\\n\\n        Collection of pulses found in the current record\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    gsl_vector** **pulseaverage**\\n\\n        GSL vector with the pulseaverage (template) of the non piled-up pulses\\n\\n    gsl_vector** **pulseaverage_B0**\\n\\n        GSL vector with the pulseaverage (template) of the non piled-up pulses (baseline subtracted)\\n\\n    double* **pulseaverageHeight**\\n\\n        Height value of the pulseaverage\\n\\n    gsl_matrix** **covariance**\\n\\n        GSL matrix with covariance matrix\\n\\n    gsl_matrix** **weight**\\n\\n        GSL matrix with weight matrix (inverse of covariance matrix)\\n\\n    gsl_vector** **pulseaverageMaxLengthFixedFilter**\\n\\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses\\n\\n     gsl_vector** **pulseaverageMaxLengthFixedFilter_B0**\\n\\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses (baseline subtracted)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: PulsesCollection* pulsesAll\\n\\n        Collection of pulses found in the previous records\\n\\n    .. cpp:member:: PulsesCollection* pulsesInRecord\\n\\n        Collection of pulses found in the current record\\n\\n    .. cpp:member: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: gsl_vector** pulseaverage\\n\\n        GSL vector with the pulseaverage (template) of the non piled-up pulses\\n\\n    .. cpp:member:: gsl_vector** pulseaverage_B0\\n\\n        GSL vector with the pulseaverage (template) of the non piled-up pulses (baseline subtracted)\\n\\n    .. cpp:member:: double* pulseaverageHeight\\n\\n        Height value of the pulseaverage\\n\\n    .. cpp:member:: gsl_matrix** covariance\\n\\n        GSL matrix with covariance matrix\\n\\n    .. cpp:member:: gsl_matrix** weight\\n\\n        GSL matrix with weight matrix (inverse of covariance matrix)\\n\\n    .. cpp:member:: gsl_vector** pulseaverageMaxLengthFixedFilter\\n\\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses\\n\\n    .. cpp:member:: gsl_vector** pulseaverageMaxLengthFixedFilter_B0\\n\\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses (baseline subtracted)\\n\\n\"}, {\"line\": 687, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function::  int calculus_optimalFilter(int TorF, int intermediate, int opmode, gsl_vector *matchedfiltergsl, long mf_size, double samprate, int runF0orB0val, gsl_vector *freqgsl, gsl_vector *csdgsl, gsl_vector **optimal_filtergsl, gsl_vector **of_f, gsl_vector **of_FFT, gsl_vector_complex **of_FFT_complex)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    See description also at :ref:`optimal filter chapter <optimalFilter_NSD>`\\n\\n    This function calculates the optimal filter for a pulse whose matched filter (normalized template) is provided as input\\n    parameter, :cpp:member:`matchedfiltergsl`. An optimal filter is just a matched filter that has been adjusted based on the\\n    noise spectrum of the system.\\n\\n    It is assumed that all pulses are scaled versions of a template. In the frequency domain (as noise can be frequency dependent), the raw data\\n    can be expressed as :math:`D(f)=E\\\\cdot S(f)+N(f)`, where :math:`S(f)` is the normalized model pulse shape in the frequency domain,\\n    :math:`N(f)` is the power spectrum of the noise and :math:`E` is the scalar amplitude for the photon energy.\\n\\n    The second assumption is that the noise is stationary, i.e., it does not vary with time. The amplitude of each pulse can then be estimated by\\n    minimizing (weighted least-squares sense) the difference between the noisy data and the model pulse shape, being the :math:`\\\\chi^2` condition\\n    to be minimized:\\n\\n    .. math::\\n\\n        \\\\chi^2 = \\\\int \\\\frac{(D(f)-E \\\\cdot S(f))^2}{\\\\langle\\\\lvert N(f)\\\\lvert ^2\\\\rangle} df\\n\\n    In the time domain, the amplitude is the best weighted (optimally filtered) sum of the values in the pulse\\n\\n    .. math::\\n\\n       E = k \\\\int d(t)\\\\cdot of(t)\\n\\n    where :math:`of(t)` is the time domain expression of optimal filter which in frequency domain\\n\\n    .. math::\\n\\n        OF(f) = \\\\frac{S^*(f)}{\\\\langle\\\\lvert N(f)\\\\lvert ^2\\\\rangle}\\n\\n    and :math:`k` is the normalization factor to give :math:`E` in units of energy\\n\\n    .. math::\\n\\n        k = \\\\int \\\\frac{S(f)\\\\cdot S^{*}(f)}{\\\\langle\\\\lvert N(f)\\\\lvert ^2\\\\rangle} df\\n\\n    Steps:\\n\\n    - FFT calculus of the matched filter (filter template)\\n\\n        - Declare variables\\n        - Complex FFT values for positive and negative frequencies\\n        - FFT calculus\\n        - Generation of the frequencies (positive and negative)\\n        - Magnitude and argument for positive and negative frequencies\\n        - Free allocated GSL vectors\\n\\n    - :math:`N(f)`\\n    - To divide :math:`MatchedFilter(f)/N^2(f)` => :math:`MatchedFilter(f)` and :math:`N(f)` must have the same number of points\\n\\n        - *if* (:cpp:member:`mf_size` < *freqgsl->size*)\\n\\n            - *if* ((*freqgsl->size)%mf_size* == 0) => Decimate noise samples\\n            - *else* => It is necessary to work only with the positive frequencies so as not to handle the :math:`f=0` => :math:`N(f)` interpolation (:cpp:func:`interpolatePOS`)\\n\\n        - *else if* (:cpp:member:`mf_size` > *freqgsl->size*) => Error: Noise spectrum must have more samples than pulse spectrum\\n        - *else if* (:cpp:member:`mf_size` == *freqgsl->size*) => It is not necessary to do anything\\n    - :math:`OptimalFilter = MatchedFilter'(f)/N^2(f)`\\n    - Calculus of the normalization factor\\n    - Apply the normalization factor\\n    - Inverse FFT (to get the expression of the optimal filter in time domain)\\n\\n        - Complex :math:`OptimalFilter(f)` => Taking into account magnitude :math:`MatchedFilter(f)/N^2(f)` and phase given by :math:`MatchedFilter(f)`\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    int **TorF**\\n\\n        If :option:`FilterDomain` = **T** => :cpp:member:`TorF` = 0; If :option:`FilterDomain` = **F** => :cpp:member:`TorF` = 1\\n\\n    int **intermediate**\\n\\n        If :option:`intermediate` = 0 => Do not write an intermediate file; If :option:`intermediate` = 1 => Write an intermediate file\\n\\n    int **opmode**\\n\\n        If 0 => CALIBRATION run (library creation); if 1 => RECONSTRUCTION run (energy determination)\\n\\n    gsl_vector* **matchedfiltergsl**\\n\\n        Matched filter associated to the pulse (in general, from the interpolation between two matched filters of the library)\\n\\n    long **mf_size**\\n\\n        Matched filter size (samples)\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    int **runF0orB0val**\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0.\\n\\n    gsl_vector* **freqgsl**\\n\\n        Frequency axis of the current noise spectral density (input)\\n\\n    gsl_vector* **csdgsl**\\n\\n        Current noise spectral density (input)\\n\\n    gsl_vector* * **optimal_filtergsl**\\n\\n        Optimal filter in time domain (output)\\n\\n    gsl_vector** **of_f**\\n\\n        Frequency axis of the optimal filter spectrum (output)\\n\\n    gsl_vector** **of_FFT**\\n\\n        Optimal filter spectrum (absolute values) (output)\\n\\n    gsl_vector_complex** **of_FFT_complex**\\n\\n        Optimal filter spectrum (complex values) (output)\\n\\n    .. cpp:member:: int TorF\\n\\n        If :option:`FilterDomain` = **T** => :cpp:member:`TorF` = 0; If :option:`FilterDomain` = **F** => :cpp:member:`TorF` = 1\\n\\n    .. cpp:member:: int intermediate\\n\\n        If :option:`intermediate` = 0 => Do not write an intermediate file; If :option:`intermediate` = 1 => Write an intermediate file\\n\\n    .. cpp:member:: int opmode\\n\\n        If :option:`opmode` = 0 => CALIBRATION run (library creation); If :option:`opmode` = 1 => RECONSTRUCTION run (energy determination)\\n\\n    .. cpp:member:: gsl_vector* matchedfiltergsl\\n\\n        Matched filter associated to the pulse (in general, from the interpolation between two matched filters of the library)\\n\\n    .. cpp:member:: long mf_size\\n\\n        Matched filter size (samples)\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int runF0orB0val\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0.\\n\\n    .. cpp:member:: gsl_vector* freqgsl\\n\\n        Frequency axis of the current noise spectral density (input)\\n\\n    .. cpp:member:: gsl_vector* csdgsl\\n\\n        Current noise spectral density (input)\\n\\n    .. cpp:member:: gsl_vector* * optimal_filtergsl\\n\\n        Optimal filter in time domain (output)\\n\\n    .. cpp:member:: gsl_vector** of_f\\n\\n        Frequency axis of the optimal filter spectrum (output)\\n\\n    .. cpp:member:: gsl_vector** of_FFT\\n\\n        Optimal filter spectrum (absolute values) (output)\\n\\n    .. cpp:member:: gsl_vector_complex** of_FFT_complex\\n\\n        Optimal filter spectrum (complex values) (output)\\n\\n\"}, {\"line\": 863, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int callSIRENA_Filei(char* inputFile, SixtStdKeywords* keywords, ReconstructInitSIRENA* reconstruct_init_sirena,struct Parameters par, double sampling_rate, int *trig_reclength, PulsesCollection* pulsesAll, TesEventFile * outfile)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function calls SIRENA to build a library or reconstruct energies.\\n\\n    Steps:\\n\\n    - Open record file\\n    - *initializeReconstructionSIRENA*\\n    - Build up *TesRecord* to read the file\\n    - Iterate of records and run SIRENA:\\n        - *reconstructRecordSIRENA*\\n        - Save events to the event_list\\n        - Copy trigger keywords to event file\\n        - Close file\\n\\n    **Members/Variables**\\n\\n    char* **inputFile**\\n\\n        Input file name\\n\\n    SixtStdKeywords* **keywords**\\n\\n        Sixt standard keywords structure\\n\\n    ReconstructInitSIRENA* **reconstruct_init_sirena**\\n\\n        Parameters to run SIRENA\\n\\n    struct Parameters **par**\\n\\n        Input parameters\\n\\n    double **sampling_rate**\\n\\n        Sampling rate\\n\\n    int* **trig_reclength**\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n    PulsesCollection* **pulsesAll**\\n\\n        Structure containing the detected pulses\\n\\n    TesEventFile* **outfile**\\n\\n        Output events FITS file\\n\\n    .. cpp:member:: char* inputFile\\n\\n        Input file name\\n\\n    .. cpp:member:: SixtStdKeywords* keywords\\n\\n        Sixt standard keywords structure\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init_sirena\\n\\n        Parameters to run SIRENA\\n\\n    .. cpp:member:: struct Parameters par\\n\\n        Input parameters\\n\\n    .. cpp:member:: double sampling_rate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int* trig_reclength\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n    .. cpp:member:: PulsesCollection* pulsesAll\\n\\n        Structure containing the detected pulses\\n\\n    .. cpp:member:: TesEventFile* outfile\\n\\n        Output events FITS file\\n\\n\"}, {\"line\": 947, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int callSIRENA(char* inputFile, SixtStdKeywords* keywords, ReconstructInitSIRENA* reconstruct_init_sirena,struct Parameters par, double sampling_rate, int *trig_reclength, PulsesCollection* pulsesAll, TesEventFile * outfile)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function calls SIRENA to build a library or reconstruct energies no matter if :cpp:member:`inputFile` is only a FITS file or more (inputFile can start with '@' or not).\\n\\n    **Members/Variables**\\n\\n    char* **inputFile**\\n\\n        Input file name\\n\\n    SixtStdKeywords* **keywords**\\n\\n        Sixt standard keywords structure\\n\\n    ReconstructInitSIRENA* **reconstruct_init_sirena**\\n\\n        Parameters to run SIRENA\\n\\n    struct Parameters **par**\\n\\n        Input parameters\\n\\n    double **sampling_rate**\\n\\n        Sampling rate\\n\\n    int* **trig_reclength**\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n    PulsesCollection* **pulsesAll**\\n\\n        Structure containing the detected pulses\\n\\n    TesEventFile* **outfile**\\n\\n        Output events FITS file\\n\\n    .. cpp:member:: char* inputFile\\n\\n        Input file name\\n\\n    .. cpp:member:: SixtStdKeywords* keywords\\n\\n        Sixt standard keywords structure\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init_sirena\\n\\n        Parameters to run SIRENA\\n\\n    .. cpp:member:: struct Parameters par\\n\\n        Input parameters\\n\\n    .. cpp:member:: double sampling_rate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int* trig_reclength\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n    .. cpp:member:: PulsesCollection* pulsesAll\\n\\n        Structure containing the detected pulses\\n\\n    .. cpp:member:: TesEventFile* outfile\\n\\n        Output events FITS file\\n\\n\"}, {\"line\": 1020, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int checkXmls(struct Parameters* const par)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function checks if the XML file used to build the library is the same to be used to recconstruct (by checking the checksums)\\n\\n    **Members/Variables**\\n\\n    struct Parameters* const **par**\\n\\n        Structure containing the input parameters specified in *teslib.par* or *tesrecons.par*\\n\\n    .. cpp:member:: struct Parameters* const par\\n\\n        Structure containing the input parameters specified in *teslib.par* or *tesrecons.par*\\n\\n\"}, {\"line\": 1037, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int convertI2R (char* EnergyMethod, double Ibias, double Imin, double Imax, double ADU_CNV, double ADU_BIAS, double I_BIAS, double Ifit, double V0, double RL, double L, gsl_vector **invector, int real_data)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This funcion converts the current space into a quasi-resistance space (see :ref:`rSpace` for **I2R** and **I2RFITTED** modes). The input :cpp:member:`invector` filled in with current values is filled in here with **I2R** or **I2RFITTED** quasi-resistances at the output.\\n\\n    If the ``ADU_CNV`` keyword is in the input FITS file and :cpp:member:`invector` contains the **ADC** column data from the input FITS file:\\n\\n        :math:`I(A) = I\\\\_BIAS+ADU\\\\_CNV*(ADC-ADU\\\\_BIAS)` being :math:`ADC=I(adu)` and ``ADU_CNV``, ``ADU_BIAS`` and ``I_BIAS`` are keywords in the input FITS file\\n\\n        - Conversion according to :option:`EnergyMethod` = **I2R**:\\n\\n            :math:`DeltaI = I`\\n\\n            :math:`R/R0 = [1 - (abs(DeltaI)/I\\\\_BIAS)/(1+abs(DeltaI)/I\\\\_BIAS)]\\\\cdot10^5`\\n\\n        - Conversion according to :option:`EnergyMethod` = **I2RFITTED**:\\n\\n            :math:`R/V0 = -10^5/(I_{fit}+ADC)` being :math:`I_{fit}` value an input parameter\\n\\n\\n    If the ``ADU_CNV`` keyword is NOT in the input FITS file and :cpp:member:`invector` contains the **ADC** column data from the input FITS file:\\n\\n        :math:`aducnv = (IMAX-IMIN)/65534` (``IMIN`` and ``IMAX`` are keywords in the input FITS file and 65534 the number of quantification leves)\\n\\n        :math:`I(A) = ADC*aducnv+IMIN` being :math:`ADC=I(adu)`\\n\\n        - Conversion according to :option:`EnergyMethod` = **I2R**:\\n\\n            :math:`DeltaI = I`\\n\\n            :math:`R/R0 = [1 - (abs(DeltaI)/I0\\\\_START)/(1+abs(DeltaI)/I0\\\\_START)]\\\\cdot10^5`\\n\\n        - Conversion according to :option:`EnergyMethod` = **I2RFITTED**\\n\\n            :math:`R/V0 = -10^5/(I_{fit}+ADC)` being :math:`I_{fit}` value an input parameter\\n\\n    Conversion **I2RDER** is also available:\\n\\n        :math:`R = (V0-I \\\\cdot R_L-L \\\\cdot dI/dt)/I`\\n\\n    The :math:`10^5` scaling factor has been included in the quasi resistance space (both **I2R** and **I2RFITTED** transformations) to avoid rounding errors when working with very small numbers.\\n\\n    **Members/Variables**\\n\\n    char* **EnergyMethod**\\n\\n        Quasi-resistance energy calculation method: **I2R** or **I2RFITTED**, :option:`EnergyMethod`\\n\\n    double **Ibias**\\n\\n        Initial bias current (**I0_START** column)\\n\\n    double **Imin**\\n\\n        Current corresponding to 0 ADU (``IMIN`` keyword)\\n\\n    double **Imax**\\n\\n        Current corresponding to maximum ADU (``IMAX`` keyword)\\n\\n    double **ADU_CNV**\\n\\n        Conversion factor (A/adu) (``ADU_CNV`` keyword)\\n\\n    double **ADU_BIAS**\\n\\n        Bias current (adu) (``ADU_BIAS`` keyword)\\n\\n    double **I_BIAS**\\n\\n        Bias current (A) (``I_BIAS`` keyword)\\n\\n    double **Ifit**\\n\\n        Constant to apply the I2RFITTED conversion (adu)\\n\\n    double **V0**\\n\\n        Constant voltage bias\\n\\n    double **RL**\\n\\n        Effective load resistor\\n\\n     double **L**\\n\\n        Effective inductance\\n\\n    gsl_vector* **invector**\\n\\n        GSL vector with input signal values (**ADC** column of the input FITS file)\\n\\n    .. cpp:member:: char* EnergyMethod\\n\\n        Quasi-resistance energy calculation method: **I2R** or **I2RFITTED**, :option:`EnergyMethod`\\n\\n    .. cpp:member:: double Ibias\\n\\n        Initial bias current (**I0_START** column)\\n\\n    .. cpp:member:: double Imin\\n\\n        Current corresponding to 0 ADU (``IMIN`` keyword)\\n\\n    .. cpp:member:: double Imax\\n\\n        Current corresponding to maximum ADU (``IMAX`` keyword)\\n\\n    .. cpp:member:: double ADU_CNV\\n\\n        Conversion factor (A/adu) (``ADU_CNV`` keyword)\\n\\n    .. cpp:member:: double ADU_BIAS\\n\\n        Bias current (adu) (``ADU_BIAS`` keyword)\\n\\n    .. cpp:member:: double I_BIAS\\n\\n        Bias current (A) (``I_BIAS`` keyword)\\n\\n    .. cpp:member:: double Ifit\\n\\n        Constant to apply the I2RFITTED conversion (adu)\\n\\n    .. cpp:member:: double V0\\n\\n        Constant voltage bias\\n\\n    .. cpp:member:: double RL\\n\\n        Effective load resistor\\n\\n    .. cpp:member:: double L\\n\\n        Effective inductance\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        GSL vector with input signal values (**ADC** column of the input FITS file)\\n\\n\"}, {\"line\": 1179, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int createDetectFile(ReconstructInitSIRENA* reconstruct_init, double samprate, fitsfile **dtcObject, int inputPulselength)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function creates an intermediate FITS file with some useful info (during the development phase) if the :option:`intermediate` input parameter is set to 1.\\n\\n    The intermediate FITS file will contain 2 HDUs:\\n\\n        * *PULSES* HDU will contain some info about the found pulses: **TSTART**, **I0** (the pulse itself), **TEND**, **TAURISE**, **TAUFALL** and **QUALITY**\\n\\n        * *TESTINFO* HDU will contain columns **FILDER** (the low-pass filtered and differentiated records) and **THRESHOLD**\\n\\n    If file exists => Check :option:`clobber` for overwritting. If it does not, then create it.\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    fitsfile **dtcObject**\\n\\n        Object which contains information of the intermediate FITS file (used also by :cpp:func:`writeTestInfo` and :cpp:func:`writePulses`).\\n\\n    int **inputPulseLength**\\n\\n        :option:`OFLength` input parameter\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: fitsfile dtcObject\\n\\n        Object which contains information of the intermediate FITS file (used also by :cpp:func:`writeTestInfo` and :cpp:func:`writePulses`).\\n\\n    .. cpp:member:: int inputPulseLength\\n\\n        :option:`OFLength` input parameter\\n\\n\"}, {\"line\": 1228, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int createHisto(gsl_vector *invector, int nbins, gsl_vector **xhistogsl, gsl_vector **yhistogsl)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function builds the histogram of the input vector.\\n\\n      - Histogram x-axis values are the different input vector values (pulseheights)\\n\\n      - Histogram y-axis values are the the number of cases per unit of the variable on the horizontal axis\\n\\n    1) Declare variables\\n\\n    2) It will work with the positive elements of the input vector => *invectoraux2*\\n\\n    3) Check if all the values of :cpp:member:`invector` are the same => Histogram of only one bin\\n\\n    4) Obtain *invector_max* and *invector_min*\\n\\n    5) Obtain *binSize*\\n\\n    6) Create histogram axis\\n\\n    7) Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        GSL input vector\\n\\n    int **nbins**\\n\\n        Number of bins to build the histogram\\n\\n    gsl_vector** **xhistogsl**\\n\\n        GSL vector with output histogram x-axis\\n\\n    gsl_vector** **yhistogsl**\\n\\n        GSL vector with output histogram y-axis\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        GSL input vector\\n\\n    .. cpp:member:: int nbins\\n\\n        Number of bins to build the histogram\\n\\n    .. cpp:member:: gsl_vector** xhistogsl\\n\\n        GSL vector with output histogram x-axis\\n\\n    .. cpp:member:: gsl_vector** yhistogsl\\n\\n        GSL vector with output histogram y-axis\\n\\n\"}, {\"line\": 1287, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int createLibrary(ReconstructInitSIRENA* reconstruct_init, bool *appendToLibrary, fitsfile **inLibObject)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function creates the pulse templates library FITS file, if it does not exist yet. Otherwise, it opens it (to add a new row).\\n\\n        1) If it exists => Open it and set *appendToLibrary = true*\\n\\n        2) If it does not exist => Create it and set *appendToLibrary = false*\\n\\n            - Write keyword ``EVENTCNT`` = 1 in the *LIBRARY* extension\\n            - Write the whole list of input parameters in ``HISTORY`` in the *Primary* extension (by usin 'HDpar_stamp')\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    bool **appendToLibrary**\\n\\n        Used by the function :cpp:func:`writeLibrary`\\n\\n    fitsfile** **inLibObject**\\n\\n        Object which contains information of the library FITS file (used also by :cpp:func:`writeLibrary`)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: bool appendToLibrary\\n\\n        Used by the function :cpp:func:`writeLibrary`\\n\\n    .. cpp:member:: fitsfile** inLibObject\\n\\n        Object which contains information of the library FITS file (used also by :cpp:func:`writeLibrary`)\\n\"}, {\"line\": 1326, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int createTPSreprFile ()\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function creates the gennoisespec output FITS file.\\n\\n    Steps:\\n\\n    - Create the noise representation file (if it does not exist already)\\n    - Create the extensions *NOISE*, *NOISEALL* and *WEIGHTMS*\\n    - Write keywords\\n\\n\"}, {\"line\": 1341, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int differentiate(gsl_vector **invector, int szVct)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function applies the derivative method :math:`x_i-x_{i-1}` to the input vector.\\n\\n    The derivative method provides more sensitivity to handle with piled-up pulses.\\n    Moreover, little variations of the baseline will not affect.\\n\\n    **Members/Variables**\\n\\n    gsl_vector** **invector**\\n\\n        Input/Ouput GSL vector (non-differentiate input vector/differentiate input vector)\\n\\n    int **szVct**\\n\\n        Size of :cpp:member:`invector`\\n\\n    .. cpp:member:: gsl_vector** invector\\n\\n        Input/Ouput GSL vector (non-differentiate input vector/differentiate input vector)\\n\\n    .. cpp:member:: int szVct\\n\\n        Size of :cpp:member:`invector`\\n\\n\"}, {\"line\": 1371, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int eigenVV (gsl_matrix *matrixin, gsl_matrix **eigenvectors, gsl_vector **eigenvalues)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This funcion provides the principal eigenvectors and eigenvalues of the input matrix (at the moment, the first two eigenvalues and eigenvectors). The eigenvalues and eigenvectors are sorted in descending order and only the principal components are provided.\\n\\n    - Calculate the eigenvectors and the eigenvalues\\n    - Sort the eigenvectors and the eigenvalues in descending order\\n    - Choose the main eigenvectors and eigenvalues (the principal components analysis). At the moment, the first two eigenvectors and eigenvalues\\n\\n    **Members/Variables**\\n\\n    gsl_matrix* **matrixin**\\n\\n        Input GSL matrix\\n\\n    gsl_matrix** **eigenvectors**\\n\\n        Subset of eigenvectors of 'matrixin' chosen by PCA (the first two ones)\\n\\n    gsl_vector** **eigenvalues**\\n\\n        Subset of eigenvalues of 'matrixin' chosen by PCA (the first two ones)\\n\\n    .. cpp:member:: gsl_matrix* matrixin\\n\\n        Input GSL matrix\\n\\n    .. cpp:member:: gsl_matrix** eigenvectors\\n\\n        Subset of eigenvectors of 'matrixin' chosen by PCA (the first two ones)\\n\\n    .. cpp:member:: gsl_vector** eigenvalues\\n\\n        Subset of eigenvalues of 'matrixin' chosen by PCA (the first two ones)\\n\\n\"}, {\"line\": 1408, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void exit_error(const char* const func, string msg, int status)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function prints out error messages and exits program.\\n\\n    **Members/Variables**\\n\\n    const char* const **func**\\n\\n        Function name whose error is printed\\n\\n    string **msg**\\n\\n        Error message to be printed\\n\\n    int **status**\\n\\n        Status\\n\\n    .. cpp:member:: const char* const func\\n\\n        Function name whose error is printed\\n\\n    .. cpp:member:: string msg\\n\\n        Error message to be printed\\n\\n    .. cpp:member::  int status\\n\\n        Status\\n\\n\"}, {\"line\": 1443, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int FFT(gsl_vector *invector, gsl_vector_complex *outvector, double STD)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function calculates the FFT of the elements of a vector.\\n\\n    GSL library (overview of FFTs):\\n\\n    For physical applications it is important to remember that the index appearing in the DFT does not correspond directly to a physical frequency. If the time-step of the\\n    DFT is :math:`\\\\Delta` then the frequency domain includes both positive and negative frequencies, ranging from :math:`-1/(2\\\\Delta)` through 0 to :math:`+1/(2\\\\Delta)`. The positive frequencies are stored from the beginning of the array up to the middle, and the negative frequencies are stored backwards from the end of the array.\\n\\n    Here is a table which shows the layout of the array data, and the correspondence between the time domain data z, and the frequency domain data x.\\n\\n    =======   ==================   =========================================\\n     index         z                        x = FFT(z)\\n    =======   ==================   =========================================\\n     0        :math:`z(t = 0)`     :math:`x(f = 0)`\\n     1        :math:`z(t = 1)`     :math:`x(f = 1/(n\\\\Delta))`\\n     2        :math:`z(t = 2)`     :math:`x(f = 2/(n\\\\Delta))`\\n     [...]        [........]             [..................]\\n     n/2      :math:`z(t = n/2)`   :math:`x(f = +1/(2\\\\Delta),-1/(2\\\\Delta))`\\n     [...]        [........]             [..................]\\n     n-3      :math:`z(t = n-3)`   :math:`x(f = -3/(n\\\\Delta))`\\n     n-2      :math:`z(t = n-2)`   :math:`x(f = -2/(n\\\\Delta))`\\n     n-1      :math:`z(t = n-1)`   :math:`x(f = -1/(n\\\\Delta))`\\n    =======   ==================   =========================================\\n\\n    The frequency axis will be built as *f = i/STD = i/(size/samprate)* with *i* varying from 0 to *size/2-1* (*n=size* and :math:`\\\\Delta=1/samprate`  sec/sample).\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        Input GSL vector\\n\\n    gsl_vector_complex* **outvector**\\n\\n        Output GSL complex vector with the FFT of :cpp:member:`invector`\\n\\n    double **STD**\\n\\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        Input GSL vector\\n\\n    .. cpp:member:: gsl_vector_complex* outvector\\n\\n        Output GSL complex vector with the FFT of :cpp:member:`invector`\\n\\n    .. cpp:member::  double STD\\n\\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\\n\\n\"}, {\"line\": 1499, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int FFTinverse(gsl_vector_complex *invector, gsl_vector *outvector, double STD)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function calculates the inverse FFT of the elements of a vector.\\n\\n    **Members/Variables**\\n\\n    gsl_vector_complex* **invector**\\n\\n        Input GSL complex vector\\n\\n    gsl_vector* **outvector**\\n\\n        Output GSL vector with the inverse FFT of :cpp:member:`invector`\\n\\n    double **STD**\\n\\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\\n\\n    .. cpp:member:: gsl_vector_complex* invector\\n\\n        Input GSL complex vector\\n\\n    .. cpp:member:: gsl_vector* outvector\\n\\n        Output GSL vector with the inverse FFT of :cpp:member:`invector`\\n\\n    .. cpp:member:: double STD\\n\\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\\n\\n\"}, {\"line\": 1532, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int filderLibrary (ReconstructInitSIRENA** reconstruct_init, double samprate)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function calculates the (low-pass filter and) derivative of the models (*pulse_templates*) in the library (only necessary if first record),\\n    and it stores the *pulse_templates_filder* and the *maxDERs* and *samp1DERs* in the :cpp:member:`reconstruct_init` structure.\\n\\n    The maximum of the (low-pass filtered and) differentiated pulse has to be compared to the *maxDERs* to select the appropriate model. Or, the 1st sample out of the differentiated pulse has to be compared to the *samp1DERs* to select the appropriate model.\\n\\n    1) Check if it is the first record\\n\\n    2) (Low-pass filter and) differentiate the models (*pulse_templates*) of the library\\n\\n    3) Store the (low-pass filtered) derivatives in *pulse_templates_filder*\\n\\n    4) Calculate the maximum of the (low-pass filtered and) differentiated models (*maxDERs*)\\n\\n    5) Locate the 1st sample of the (low-pass filtered and) differentiated models (*samp1DERs*)\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n\"}, {\"line\": 1570, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: bool fileExists(const std::string& name)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function checks for file existence returning a boolean value.\\n\\n    **Members/Variables**\\n\\n    const std::string& **name**\\n\\n        File name\\n\\n    .. cpp:member:: const std::string& name\\n\\n        File name\\n\\n\"}, {\"line\": 1587, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int fillReconstructInitSIRENAGrading (struct Parameters par, AdvDet *det, ReconstructInitSIRENA** reconstruct_init_sirena)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function reads the grading data from the XML file and store it in the member *grading* of the :cpp:member:`reconstruct_init_sirena`.\\n\\n    It also checks if :option:`prebuff_0pad` input parameter value (preBuffer when **0PAD**) is possible depending on the prebuffer values in the XML file.\\n\\n    :cpp:member:`reconstruct_init_sirena->grading` number of rows = Number of grades in the XML file\\n    :cpp:member:`reconstruct_init_sirena->grading` number of columns = 3 (0->pre, 1->filter length inlcuding prebuffer, 2->prebuffer values)\\n\\n    **Members/Variables**\\n\\n    struct Parameters **par**\\n\\n        Input parameters\\n\\n    AdvDet* **det**\\n\\n        Pixel detector\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: struct Parameters par\\n\\n        Input parameters\\n\\n    .. cpp:member:: AdvDet* det\\n\\n        Pixel detector\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n\"}, {\"line\": 1625, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int filterByWavelets (ReconstructInitSIRENA* reconstruct_init, gsl_vector **invector, int length, int *onlyOnce)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function filters the input/output signal :cpp:member:`invector`, reducing the noise level.\\n\\n    Steps:\\n\\n    - It is only going to work with *n* elements of :cpp:member:'invector'\\n    - Discrete Wavelet Transform\\n    - Sorting coefficients\\n    - Hard thresholding: *n-nc* coefficients are deleted (those with low energy)\\n    - Inverse DWT\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    gsl_vector** **invector**\\n\\n        Input/output signal\\n\\n    int **length**\\n\\n        Length of the wavelet transform\\n\\n    int* **onlyOnce**\\n\\n        In order to control the times to be executed\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: gsl_vector** invector\\n\\n        Input/output signal\\n\\n    .. cpp:member:: int length\\n\\n        Length of the wavelet transform\\n\\n    .. cpp:member:: int *onlyOnce\\n\\n        In order to control the times to be executed\\n\\n\"}, {\"line\": 1674, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findInterval(int tail_duration, gsl_vector *invector, gsl_vector *startpulse, int npin, int pulse_length, int nPF, int interval, int *ni, gsl_vector **startinterval)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function finds the pulse-free intervals when the input vector has pulses.\\n    The pulse-free intervals must have a minimum length (*intervalMinBins*).\\n    The interval with pulse is :math:`Tstart,Tend+nPF*pulse \\\\_ length` (being :math:`Tend=n*pulse \\\\_ length`).\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Processing if the input vector has more pulses\\n        - It looks for pulse-free intervals between pulses\\n    - Processing if there are no more pulses in the input vector\\n        - It looks for pulse-free intervals at the end of the event and the search for more pulse-free intervals is finished\\n\\n    **Members/Variables**\\n\\n    int **tail_duration**\\n\\n        Length of the tail of a previous pulse\\n\\n    gsl_vector* **invector**\\n\\n        Input vector WITH pulses\\n\\n    gsl_vector* **startpulse**\\n\\n        Vector with the Tstart of all the pulses of the input vector (samples)\\n\\n    int **npin**\\n\\n        Number of pulses in the input vector\\n\\n    int **pulse_length**\\n\\n        Pulse length (samples)\\n\\n    int **nPF**\\n\\n        Number of pulse lengths after ending the pulse to start the pulse-free interval\\n\\n    int **interval**\\n\\n        Minimum length of the interval (samples)\\n\\n    int **ni**\\n\\n        Number of pulse-free intervals in the input vector\\n\\n    gsl_vector** **startinterval**\\n\\n        Vector with the starting time of each pulse-free interval (samples)\\n\\n    .. cpp:member:: int tail_duration\\n\\n        Length of the tail of a previous pulse\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        Input vector WITH pulses\\n\\n    .. cpp:member:: gsl_vector* startpulse\\n\\n        Vector with the Tstart of all the pulses of the input vector (samples)\\n\\n    .. cpp:member:: int npin\\n\\n        Number of pulses in the input vector\\n\\n    .. cpp:member:: int pulse_length\\n\\n        Pulse length (samples)\\n\\n    .. cpp:member:: int nPF\\n\\n        Number of pulse lengths after ending the pulse to start the pulse-free interval\\n\\n    .. cpp:member:: int interval\\n\\n        Minimum length of the interval (samples)\\n\\n    .. cpp:member:: int ni\\n\\n        Number of pulse-free intervals in the input vector\\n\\n    .. cpp:member:: gsl_vector** startinterval\\n\\n        Vector with the starting time of each pulse-free interval (samples)\\n\"}, {\"line\": 1764, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findIntervalN (gsl_vector *invector, int interval, int *ni, gsl_vector **startinterval)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function finds the pulse-free intervals when the input vector has NO pulses.\\n    The pulse-free intervals must have a minimum length (*intervalMinBins*).\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        Input vector WITHOUT pulses\\n\\n    int **interval**\\n\\n        Minimum length of the interval (samples)\\n\\n    int* **ni**\\n\\n        Number of pulse-free intervals in the input vector\\n\\n    gsl_vector** **startinterval**\\n\\n        Vector with the starting time of each pulse-free interval (samples)\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        Input vector WITHOUT pulses\\n\\n    .. cpp:member:: int interval\\n\\n        Minimum length of the interval (samples)\\n\\n    .. cpp:member:: int* ni\\n\\n        Number of pulse-free intervals in the input vector\\n\\n    .. cpp:member:: gsl_vector** startinterval\\n\\n        Vector with the starting time of each pulse-free interval (samples)\\n\\n\"}, {\"line\": 1806, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findMeanSigma(gsl_vector *invector, double *mean, double *sigma)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function calculates the mean and the standard deviation of the input vector.\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        Input GSL vector\\n\\n    double* **mean**\\n\\n        Mean of the elements of :cpp:member:`invector`\\n\\n    double* **sigma**\\n\\n        Standard deviation of the elements of :cpp:member:`invector`\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        Input GSL vector\\n\\n    .. cpp:member:: double* mean\\n\\n        Mean of the elements of :cpp:member:`invector`\\n\\n    .. cpp:member:: double* sigma\\n\\n        Standard deviation of the elements of :cpp:member:`invector`\\n\\n\"}, {\"line\": 1839, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findPulsesCAL(gsl_vector *vectorin, gsl_vector *vectorinDER, gsl_vector **tstart, gsl_vector **quality, gsl_vector **pulseheight, gsl_vector **maxDERgsl, int *nPulses, double *threshold, double scalefactor, double samplingRate, int samplesup, double nsgms, double lb, double lrs, ReconstructInitSIRENA *reconstruct_init, double stopcriteriamkc, double kappamkc)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function is going to find the pulses in a record (in the *CALibration* mode) by using the function :cpp:func:`findTstartCAL`.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Establish the threshold (call :cpp:func:`medianKappaClipping`)\\n    - Find pulses (call :cpp:func:`findTstartCAL`)\\n    - If at least a pulse is found\\n\\n      - Get :cpp:member:`pulseheight` of each found pulse (in order to be used to build the pulse templates library)\\n\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **vectorin**\\n\\n        Not filtered record\\n\\n    gsl_vector* **vectorinDER**\\n\\n        Derivative of the (low-pass filtered) :cpp:member:`vectorin`\\n\\n    gsl_vector** **tstart**\\n\\n        Starting time of the found pulses into the record (in samples)\\n\\n    gsl_vector** **quality**\\n\\n        Quality of the found pulses into the record\\n\\n    gsl_vector** **pulseheight**\\n\\n        Pulse height of the found pulses into the record\\n\\n    gsl_vector** **maxDERgsl**\\n\\n        Maximum of the derivative of the found (low-pass filtered) pulses into the record\\n\\n    int* **nPulses**\\n\\n        Number of found pulses\\n\\n    double* **threshold**\\n\\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\\n\\n    double **scalefactor**\\n\\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\\n\\n    double **samplingRate**\\n\\n        Sampling rate\\n\\n    int **samplesup**\\n\\n        Number of consecutive samples over the threshold to locate a pulse (:option:`samplesUp`)\\n\\n    double **nsgms**\\n\\n        Number of Sigmas to establish the threshold (:option:`nSgms`)\\n\\n    double **lb**\\n\\n        Vector containing the baseline averaging length used for each pulse\\n\\n    double **lrs**\\n\\n        Running sum length (:option:`LrsT` in samples)\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    double **stopcriteriamkc**\\n\\n        Used in :cpp:func:`medianKappaClipping` (%)\\n\\n    double **kappamkc**\\n\\n        Used in :cpp:func:`medianKappaClipping`\\n\\n    .. cpp:member:: gsl_vector* vectorin\\n\\n        Not filtered record\\n\\n    .. cpp:member:: gsl_vector* vectorinDER\\n\\n        Derivative of the (low-pass filtered) :cpp:member:`vectorin`\\n\\n    .. cpp:member:: gsl_vector** tstart\\n\\n        Starting time of the found pulses into the record (in samples)\\n\\n    .. cpp:member:: gsl_vector** quality\\n\\n        Quality of the found pulses into the record\\n\\n    .. cpp:member:: gsl_vector** pulseheight\\n\\n        Pulse height of the found pulses into the record\\n\\n    .. cpp:member:: gsl_vector** maxDERgsl\\n\\n        Maximum of the derivative of the found (low-pass filtered) pulses into the record\\n\\n    .. cpp:member:: int* nPulses\\n\\n        Number of found pulses\\n\\n    .. cpp:member:: double* threshold\\n\\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\\n\\n    .. cpp:member:: double scalefactor\\n\\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\\n\\n    .. cpp:member:: double samplingRate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int samplesup\\n\\n        Number of consecutive samples over the threshold to locate a pulse (:option:`samplesUp`)\\n\\n    .. cpp:member:: double nsgms\\n\\n        Number of Sigmas to establish the threshold (:option:`nSgms`)\\n\\n    .. cpp:member:: double lb\\n\\n        Vector containing the baseline averaging length used for each pulse\\n\\n    .. cpp:member:: double lrs\\n\\n        Running sum length (:option:`LrsT` in samples)\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: double stopcriteriamkc\\n\\n        Used in :cpp:func:`medianKappaClipping` (%)\\n\\n    .. cpp:member:: double kappamkc\\n\\n        Used in :cpp:func:`medianKappaClipping`\\n\\n\"}, {\"line\": 1995, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findPulsesNoise(gsl_vector *vectorin, gsl_vector *vectorinDER, gsl_vector **tstart, gsl_vector **quality, int *nPulses, double *threshold, double scalefactor, int sizepulsebins, double samplingRate, int samplesup, double nsgms, double stopcriteriamkc, double kappamkc)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function is going to find the pulses in a record by using the function :cpp:func:`findTstartNoise`\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Establish the threshold (call :cpp:func:`medianKappaClipping`)\\n    - Find pulses (call :cpp:func:`findTstartNoise`)\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **vectorin**\\n\\n        Not filtered record\\n\\n    gsl_vector* **vectorinDER**\\n\\n        Derivative of the low-pass filtered :cpp:member:`vectorin`\\n\\n    gsl_vector** **tstart**\\n\\n        Starting time of the found pulses into the record (samples)\\n\\n    gsl_vector** **quality**\\n\\n        Quality of the found pulses into the record\\n\\n    int* **nPulses**\\n\\n        Number of found pulses\\n\\n    double* **threshold**\\n\\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\\n\\n    double **scalefactor**\\n\\n        Scale factor to calculate the LPF box-car length\\n\\n    int **sizepulsebins**\\n\\n        Size of the pulse (samples)\\n\\n    double **samplingRate**\\n\\n        Sampling rate\\n\\n    int **samplesup**\\n\\n        Number of consecutive samples over the threshold to locate a pulse\\n\\n    double **nsgms**\\n\\n        Number of Sigmas to establish the threshold\\n\\n    double **stopCriteriamkc**\\n\\n        Used in :cpp:func:`medianKappaClipping_noiseSigma` (%)\\n\\n    double **kappamkc**\\n\\n        Used in :cpp:func:`medianKappaClipping_noiseSigma`\\n\\n    .. cpp:member:: gsl_vector* vectorin\\n\\n        Not filtered record\\n\\n    .. cpp:member:: gsl_vector* vectorinDER\\n\\n        Derivative of the low-pass filtered 'vectorin'\\n\\n    .. cpp:member:: gsl_vector** tstart\\n\\n        Starting time of the found pulses into the record (samples)\\n\\n    .. cpp:member:: gsl_vector** quality\\n\\n        Quality of the found pulses into the record\\n\\n    .. cpp:member:: int* nPulses\\n\\n        Number of found pulses\\n\\n    .. cpp:member:: double* threshold\\n\\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\\n\\n    .. cpp:member:: double scalefactor\\n\\n        Scale factor to calculate the LPF box-car length\\n\\n    .. cpp:member:: int sizepulsebins\\n\\n        Size of the pulse (samples)\\n\\n    .. cpp:member:: double samplingRate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int samplesup\\n\\n        Number of consecutive samples over the threshold to locate a pulse (*samplesUp*)\\n\\n    .. cpp:member:: double nsgms\\n\\n        Number of Sigmas to establish the threshold\\n\\n    .. cpp:member:: double stopCriteriamkc\\n\\n        Used in :cpp:func:`medianKappaClipping_noiseSigma` (%)\\n\\n    .. cpp:member:: double kappamkc\\n\\n        Used in :cpp:func:`medianKappaClipping_noiseSigma`\\n\\n\"}, {\"line\": 2115, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int FindSecondaries(int maxPulsesPerRecord, gsl_vector *adjustedDerivative, double adaptativethreshold, ReconstructInitSIRENA *reconstruct_init, int tstartFirstEvent, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl, gsl_vector **lagsgsl)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function runs after :cpp:func:`InitialTriggering` to find all the events (except the first one) in the first derivative of the (low-pass filtered) record by using the Adjusted Derivative detection method.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Establishing the criteria of the slope of the derivative depending on the sampling rate\\n    - It is necessary to find the tstarts...\\n\\n      It looks for an event and if a pulse is found, it looks for another event\\n\\n        - It looks for an event since the beginning (or the previous event) to the end of the record.\\n          The first condition to detect an event is that the :cpp:member:`adjustedDerivative` was over the :cpp:member:`threshold`\\n\\n            - Select the model of the found pulse from the libary by using the 1st sample of the derivative (*samp1DER*)\\n            - Dot product between the detected pulse and the pulse template in 3 different lags\\n\\n                - If maximum of the dot product found => Stop calculating dot products in more lags\\n                - If maximum of the dot product not found => Calculate dot products in more lags (number of lags is limited to 5)\\n\\n            - If maximum of the dot product not found => tstart is the first sample crossing above the threshold (without jitter)\\n\\n                - Average of the first 4 samples of the derivative\\n                - Find model in order to subtract\\n\\n            - If maximum of the dot product found => Parabola analytically defined => Locate the maximum => New tstart (with jitter)\\n\\n                - Iterative process in order to extract the best template from the library:\\n                    - *samp1DER* correction\\n                    - Find the model from the libary by using the corrected *samp1DER*\\n                    - Dot product in 3 lags\\n                    - Locate the maximum of the parabola\\n                - *samp1DER* correction\\n                - Find model in order to subtract\\n                - Template correction\\n                - Average of the first 4 samples of the derivative\\n\\n            - The second condition to detect an event is meeting the criteria of the slope of the derivative\\n\\n        - Subtract the model from the adjusted derivative\\n\\n            - Select the model of the found event from the libary by using the first sample of the derivative\\n            - Subtract\\n\\n    - ... Or to use the tstart provided as input parameters\\n\\n        - Obtain the *maxDERs* of the events whose tstarts have been provided (by using the maximum of the derivative to find the model)\\n\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    int **maxPulsesPerRecord**\\n\\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\\n\\n    gsl_vector* **adjustedDerivative**\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    double **adaptativethreshold**\\n\\n        Threshold\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    int **tstartFirstEvent**\\n\\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\\n\\n    int* **numberPulses**\\n\\n        Number of found events\\n\\n    gsl_vector** **tstartgsl**\\n\\n        Starting time of the found events (in samples)\\n\\n    gsl_vector** **flagTruncated**\\n\\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\\n\\n    gsl_vector** **maxDERgsl**\\n\\n        Maximum of the derivative of the event\\n\\n    gsl_vector** **samp1DERgsl**\\n\\n        Average of the first 4 samples of the derivative of the event\\n\\n    gsl_vector** **lagsgsl**\\n\\n        Number of necessary lags to establish the tstart (currently limited to 5)\\n\\n    .. cpp:member:: int maxPulsesPerRecord\\n\\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\\n\\n    .. cpp:member:: gsl_vector* adjustedDerivative\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    .. cpp:member:: double adaptativethreshold\\n\\n        Threshold\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: int tstartFirstEvent\\n\\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\\n\\n    .. cpp:member:: int* numberPulses\\n\\n        Number of found events\\n\\n    .. cpp:member:: gsl_vector** tstartgsl\\n\\n        Starting time of the found events (in samples)\\n\\n    .. cpp:member:: gsl_vector** flagTruncated\\n\\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\\n\\n    .. cpp:member:: gsl_vector** maxDERgsl\\n\\n        Maximum of the derivative of the event\\n\\n    .. cpp:member:: gsl_vector** samp1DERgsl\\n\\n        Average of the first 4 samples of the derivative of the event\\n\\n    .. cpp:member:: gsl_vector** lagsgsl\\n\\n        Number of necessary lags to establish the tstart (currently limited to 5)\\n\\n\"}, {\"line\": 2267, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int FindSecondariesSTC(int maxPulsesPerRecord, gsl_vector *adjustedDerivative, double adaptativethreshold, ReconstructInitSIRENA *reconstruct_init, int tstartFirstEvent, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl, gsl_vector **lagsgsl)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function runs after :cpp:func:`InitialTriggering` to find all the events (except the first one) in the first derivative of the (low-pass filtered) record by using the Single Threshold Crossing method.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - It is necessary to find the tstarts...\\n\\n      It looks for an event and if a pulse is found, it looks for another event\\n\\n        - It looks for an event since the beginning (or the previous event) to the end of the record.\\n          The condition to detect an event is that the :cpp:member:`adjustedDerivative` was over the :cpp:member:`threshold` at least :option:`samplesUp` consecutive samples\\n\\n    - ... Or to use the tstart provided as input parameters\\n\\n        - Obtain the *maxDERs* of the events whose tstarts have been provided\\n\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    int **maxPulsesPerRecord**\\n\\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\\n\\n    gsl_vector* **adjustedDerivative**\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    double **adaptativethreshold**\\n\\n        Threshold\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    int **tstartFirstEvent**\\n\\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\\n\\n    int* **numberPulses**\\n\\n        Number of found events\\n\\n    gsl_vector** **tstartgsl**\\n\\n        Starting time of the found events (in samples)\\n\\n    gsl_vector** **flagTruncated**\\n\\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\\n\\n    gsl_vector** **maxDERgsl**\\n\\n        Maximum of the derivative of the event\\n\\n    gsl_vector** **samp1DERgsl**\\n\\n        Average of the first 4 samples of the derivative of the event\\n\\n    .. cpp:member:: int maxPulsesPerRecord\\n\\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\\n\\n    .. cpp:member:: gsl_vector* adjustedDerivative\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    .. cpp:member:: double adaptativethreshold\\n\\n        Threshold\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: int tstartFirstEvent\\n\\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\\n\\n    .. cpp:member:: int* numberPulses\\n\\n        Number of found events\\n\\n    .. cpp:member:: gsl_vector** tstartgsl\\n\\n        Starting time of the found events (in samples)\\n\\n    .. cpp:member:: gsl_vector** flagTruncated\\n\\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\\n\\n    .. cpp:member:: gsl_vector** maxDERgsl\\n\\n        Maximum of the derivative of the event\\n\\n    .. cpp:member:: gsl_vector** samp1DERgsl\\n\\n        Average of the first 4 samples of the derivative of the event\\n\\n\"}, {\"line\": 2380, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findTstartCAL(int maxPulsesPerRecord, gsl_vector *der, double adaptativethreshold, int nSamplesUp, ReconstructInitSIRENA *reconstruct_init, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function scans all the values of the derivative of the (low-pass filtered) record until it finds :cpp:member:`nSamplesUp` consecutive\\n    values (due to the noise more than 1 value is required) over the threshold. To look for more pulses, it finds :cpp:member:`nSamplesUp` consecutive values\\n    (due to the noise) under the threshold and then, it starts to scan again.\\n\\n    Steps:\\n\\n    - Declare variables\\n\\n    - Allocate GSL vectors\\n\\n    - It is possible to find the tstarts...\\n\\n      - Obtain tstart of each pulse in the derivative:\\n\\n        - If :math:`der_i>threshold` and *foundPulse=false*, it looks for :cpp:member:`nSamplesUp` consecutive samples over the threshold\\n\\n          - If not, it looks again for a pulse crossing over the threshold\\n\\n          - If yes, a pulse is found (truncated if it is at the beginning)\\n\\n        - If :math:`der_i>threshold` and *foundPulse=true*, it looks for a sample under the threshold\\n\\n          - If not, it looks again for a sample under the threshold\\n\\n          - If yes, it looks for :cpp:member:`nSamplesUp` consecutive samples under the threshold and again it starts to look for a pulse\\n\\n\\n    - ... Or to use the tstart provided as input parameters\\n\\n      Obtain the *maxDERs* of the pulses whose tstarts have been provided\\n\\n    **Members/Variables**\\n\\n    int **maxPulsesPerRecord**\\n\\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\\n\\n    gsl_vector* **der**\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    double **adaptativethreshold**\\n\\n        Threshold\\n\\n    int **nSamplesUp**\\n\\n        Number of consecutive samples over the threshold to 'find' a pulse (:option:`samplesUp`)\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    int* **numberPulses**\\n\\n        Number of found pulses\\n\\n    gsl_vector** **tstartgsl**\\n\\n        Pulses tstart (in samples)\\n\\n    gsl_vector** **flagTruncated**\\n\\n        Flag indicating if the pulse is truncated\\n\\n    gsl_vector** **maxDERgsl**\\n\\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\\n\\n    .. cpp:member:: int maxPulsesPerRecord\\n\\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\\n\\n    .. cpp:member:: gsl_vector* der\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    .. cpp:member:: double adaptativethreshold\\n\\n        Threshold\\n\\n    .. cpp:member:: int nSamplesUp\\n\\n        Number of consecutive samples over the threshold to 'find' a pulse (:option:`samplesUp`)\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: int* numberPulses\\n\\n        Number of found pulses\\n\\n    .. cpp:member:: gsl_vector** tstartgsl\\n\\n        Pulses tstart (in samples)\\n\\n    .. cpp:member:: gsl_vector** flagTruncated\\n\\n        Flag indicating if the pulse is truncated\\n\\n    .. cpp:member:: gsl_vector** maxDERgsl\\n\\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\\n\\n\"}, {\"line\": 2490, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int findTstartNoise(int maxPulsesPerRecord, gsl_vector *der, double adaptativethreshold, int nSamplesUp, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl)\\n\\n    Located in file: *gennoisespec.cpp*.\\n\\n    This function finds the pulses tstarts in the input vector (first derivative of the filtered record).\\n\\n    This function scans all values the derivative of the (low-pass filtered) record until it finds *nSamplesUp* consecutive values (due to the noise more than 1 value is\\n    required) over the threshold. To look for more pulses, it finds *nSamplesUp* consecutive values (due to the noise) under the threshold and then, it starts to scan again.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Allocate GSL vectors\\n    - Obtain tstart of each pulse in the derivative:\\n        - If :math:`der_i > threshold` and *foundPulse=false*, it looks for *nSamplesUp* consecutive samples over the threshold\\n            - If not, it looks again for a pulse crossing over the threshold\\n            - If yes, a pulse is found (truncated if it is at the beginning)\\n        - If :math:`der_i > threshold` and *foundPulse=true*, it looks for a sample under the threshold\\n            - If not, it looks again for a sample under the threshold\\n            - If yes, it looks for *nSamplesUp* consecutive samples under the threshold and again it starts to look for a pulse\\n\\n    **Members/Variables**\\n\\n    int **maxPulsesPerRecord**\\n\\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector\\n\\n    gsl_vector* **der**\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    double **adaptativethreshold**\\n\\n        Threshold\\n\\n    int **nSamplesUp**\\n\\n        Number of consecutive samples over the threshold to 'find' a pulse\\n\\n    int* **numberPulses**\\n\\n        Number of found pulses\\n\\n    gsl_vector** **tstartgsl**\\n\\n        Pulses tstart (samples)\\n\\n    gsl_vector** **flagTruncated**\\n\\n        Flag indicating if the pulse is truncated (inside this function only initial truncated pulses are classified)\\n\\n    gsl_vector** **maxDERgsl**\\n\\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\\n\\n    .. cpp:member:: int maxPulsesPerRecord\\n\\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector\\n\\n    .. cpp:member:: gsl_vector* der\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    .. cpp:member:: double adaptativethreshold\\n\\n        Threshold\\n\\n    .. cpp:member:: int nSamplesUp\\n\\n        Number of consecutive samples over the threshold to 'find' a pulse\\n\\n    .. cpp:member:: int* numberPulses\\n\\n        Number of found pulses\\n\\n    .. cpp:member:: gsl_vector** tstartgsl\\n\\n        Pulses tstart (samples)\\n\\n    .. cpp:member:: gsl_vector** flagTruncated\\n\\n        Flag indicating if the pulse is truncated (inside this function only initial truncated pulses are classified)\\n\\n    .. cpp:member:: gsl_vector** maxDERgsl\\n\\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\\n\\n\"}, {\"line\": 2578, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_Esboundary(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, int *indexEalpha, int *indexEbeta, double *Ealpha, double *Ebeta, double margin)\\n\\n    Located in file: *tasksSIRENA.cpp*.\\n\\n    This function provides the indexes of the two energies which straddle the pulse energy, by  comparing the maximum value of the pulse derivative\\n    (:cpp:member:`maxDER`) to the list of maximums in the library  (:cpp:member:`maxDERs`).\\n\\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\\n\\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => :cpp:member:`indexEalpha` = :cpp:member:`indexEbeta` = 0\\n\\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => :cpp:member:`indexEalpha` = :cpp:member:`indexEbeta` = Number of templates-1\\n\\n    **Members/Variables**\\n\\n    double **maxDER**\\n\\n        Max value of the derivative of the (filtered) pulse whose embracing energies are being sought\\n\\n    gsl_vector* **maxDERs**\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info in the library about the energies\\n\\n    int* **indexEalpha**\\n\\n        Index of the energy lower than the energy of the pulse which is being analyzed\\n\\n    int* **indexEbeta**\\n\\n        Index of the energy higher than the energy of the pulse which is being analyzed\\n\\n    double* **Ealpha**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    double* **Ebeta**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    double **margin**\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n    .. cpp:member:: double maxDER\\n\\n        Max value of the derivative of the (filtered) pulse whose embracing energies are being sought\\n\\n    .. cpp:member:: gsl_vector* maxDERs\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info in the library about the energies\\n\\n    .. cpp:member:: int* indexEalpha\\n\\n        Index of the energy lower than the energy of the pulse which is being analyzed\\n\\n    .. cpp:member:: int* indexEbeta\\n\\n        Index of the energy higher than the energy of the pulse which is being analyzed\\n\\n    .. cpp:member:: double* Ealpha\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    .. cpp:member:: double* Ebeta\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    .. cpp:member:: double margin\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n\"}, {\"line\": 2658, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_matchedfilterSAB(double maxDER, gsl_vector *maxDERs, int preBuffer, ReconstructInitSIRENA *reconstruct_init, gsl_vector **matchedfilterFound, gsl_vector **DabFound, double *Ealpha, double *Ebeta, double margin)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function selects the proper matched filter (normalized template) from the calibration library from column **SAB** (or from column **MF** if only one energy included in                                                the library) by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library  (:cpp:member:`maxDERs`) for the *SAB* interpolation method (see :ref:`optimal filter chapter <optimalFilter_NSD>`). It also selects the proper row from the column **DAB**.\\n\\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\\n\\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\\n\\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\\n\\n    **Members/Variables**\\n\\n    int **runF0orB0val**\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\\n\\n    double **maxDER**\\n\\n        Max value of the derivative of the (filtered) pulse whose matched filter is being sought\\n\\n    gsl_vector* **maxDERs**\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    int **preBuffer**\\n\\n        preBuffer to work with in the particular pulse\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    gsl_vector** **matchedfilterFound**\\n\\n        GSL vector with the matched filter selected\\n\\n    gsl_vector** **DabFound**\\n\\n        **DAB** column from the library\\n\\n    double* **Ealpha**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    double* **Ebeta**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    double **margin**\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n    .. cpp:member:: int runF0orB0val\\n\\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\\n\\n    .. cpp:member:: double maxDER\\n\\n        Max value of the derivative of the (filtered) pulse whose matched filter is being sought\\n\\n    .. cpp:member:: gsl_vector* maxDERs\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    .. cpp:member:: int preBuffer\\n\\n        preBuffer to work with in the particular pulse\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: gsl_vector** matchedfilterFound\\n\\n        GSL vector with the matched filter selected\\n\\n    .. cpp:member:: gsl_vector** DabFound\\n\\n        **DAB** column from the library\\n\\n    .. cpp:member:: double* Ealpha\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    .. cpp:member:: double* Ebeta\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    .. cpp:member:: double margin\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n\"}, {\"line\": 2753, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_model_energies(double energy, ReconstructInitSIRENA *reconstruct_init, gsl_vector **modelFound)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function uses :cpp:member:`energy` in order to choose the proper pulse template (*pulse_templates_B0*) of the calibration library.\\n\\n    In general, it finds the two energies wich straddle :cpp:member:`energy` in the calibration library and interpolates (:cpp:func:`interpolate_model`):\\n\\n      - If :cpp:member:`energy` is lower than the lowest energy in the library => The model with the lowest energy in the library is chosen\\n      - If :cpp:member:`energy` is higher than the highest energy in the library => The model with the highest energy in the library is chosen\\n\\n    **Members/Variables**\\n\\n    double **energy**\\n\\n        Energy of the pulse whose pulse template is being sought\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the energies of the models (*energies*)\\n        and their templates (*pulse_templates*), the number of templates in the library (*ntemplates*), the template duration (*template_duration*) and\\n        the *pulse_templates_B0*.\\n\\n    gsl_vector** **modelFound**\\n\\n        Found template of the pulse whose energy is :cpp:member:`energy`\\n\\n    .. cpp:member:: double energy\\n\\n        Energy of the pulse whose pulse template is being sought\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the energies of the models (*energies*)\\n        and their templates (*pulse_templates*), the number of templates in the library (*ntemplates*), the template duration (*template_duration*) and\\n        the *pulse_templates_B0*.\\n\\n    .. cpp:member:: gsl_vector** modelFound\\n\\n        Found template of the pulse whose energy is :cpp:member:`energy`\\n\\n\"}, {\"line\": 2795, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_model_maxDERs(double maxDER, ReconstructInitSIRENA *reconstruct_init, gsl_vector **modelFound)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function uses the maximum of the derivative of the (filtered) pulse (:cpp:member:`maxDER`) in order to choose the proper\\n    pulse template (*pulse_templates_filder*) of the calibration library.\\n\\n    In general, it finds the two *maxDER* which straddle :cpp:member:`maxDER` in the calibration library and interpolates (:cpp:func:`interpolate_model`):\\n\\n      - If :cpp:member:`maxDER` is lower than the lowest *maxDERs* in the library => The model with\\n        the lowest *maxDERs* in the library is chosen\\n      - If :cpp:member:`maxDER` is higher than the highest *maxDERs* in the library => The model with\\n        the highest *maxDERs* in the library is chosen\\n\\n    **Members/Variables**\\n\\n    double **maxDER**\\n\\n        Maximum of the derivative of the (filtered) pulse whose pulse template is being sought\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the number of templates in\\n        the library (*ntemplates*), the template duration (*template_duration*), the filtered and differentiated templates (*pulse_templates_filder*)\\n        and the *maxDERs* of the templates\\n\\n    gsl_vector** **modelFound**\\n\\n        Found template of the pulse whose maximum of the derivative of the filtered version is :cpp:member:`maxDER`\\n\\n    .. cpp:member:: double maxDER\\n\\n        Maximum of the derivative of the (filtered) pulse whose pulse template is being sought\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the number of templates in\\n        the library (*ntemplates*), the template duration (*template_duration*), the filtered and differentiated templates (*pulse_templates_filder*)\\n        and the *maxDERs* of the templates\\n\\n    .. cpp:member:: gsl_vector** modelFound\\n\\n        Found template of the pulse whose maximum of the derivative of the filtered version is :cpp:member:`maxDER`\\n\\n\"}, {\"line\": 2840, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_model_samp1DERs(double samp1DER, ReconstructInitSIRENA *reconstruct_init, gsl_vector **modelFound)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function uses the 1st sample of the derivative of the filtered pulse (:cpp:member:`samp1DER`) in order to choose the proper pulse template (*pulse_templates_filder*) of the calibration library.\\n\\n    It finds the two :cpp:member:`samp1DER` closer in the calibration library and interpolates (:cpp:func:`interpolate_model`)\\n\\n      - If :cpp:member:`samp1DER` is lower than the lowest samp1DER in the library => The model with the lowest samp1DER in the library is chosen\\n      - If :cpp:member:`samp1DER` is higher than the highest samp1DER in the library => The model with the highest samp1DER in the library is chosen\\n\\n    **Members/Variables**\\n\\n    double **samp1DER**\\n\\n        1st sample of the derivative of the filtered pulse whose pulse template is being sought\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the 1st samples of the derivative of the models (*samp1DERs*) and their derived templates (*pulse_templates_filder*), the number of templates in the library (*ntemplates*) and the template duration (*template_duration*).\\n\\n    gsl_vector** **modelFound**\\n\\n        Found template of the pulse whose 1st sample of the derivative of the filtered pulse is :cpp:member:`samp1DER`\\n\\n    .. cpp:member:: double samp1DER\\n\\n        1st sample of the derivative of the filtered pulse whose pulse template is being sought\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the 1st samples of the derivative of the models (*samp1DERs*) and their derived templates (*pulse_templates_filder*), the number of templates in the library (*ntemplates*) and the template duration (*template_duration*).\\n\\n    .. cpp:member:: gsl_vector** modelFound\\n\\n        Found template of the pulse whose 1st sample of the derivative of the filtered pulse is :cpp:member:`samp1DER`\\n\\n\"}, {\"line\": 2878, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_optimalfilterSAB(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, gsl_vector **optimalfilterFound, gsl_vector **DabFound, double *Ealpha, double *Ebeta, double margin)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function selects the proper optimal filter from the calibration library columns **ABTx** or **ABFx** (or from **Tx** or **Fx**columns if only one energy included in                              the library) by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library  (:cpp:member:`maxDERs`). It also selects the proper row from the column **DAB**.\\n\\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\\n\\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\\n\\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\\n\\n    **Members/Variables**\\n\\n    double **maxDER**\\n\\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\\n\\n    gsl_vector* **maxDERs**\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info\\n        in the library (*optimal_filters*)\\n\\n    gsl_vector** **optimalfilterFound**\\n\\n        GSL vector with the optimal filter selected\\n\\n    gsl_vector** **DabFound**\\n\\n        **DAB** column from the library\\n\\n    double* **Ealpha**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    double* **Ebeta**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    double **margin**\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n    .. cpp:member:: double maxDER\\n\\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\\n\\n    .. cpp:member:: gsl_vector* maxDERs\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info\\n        in the library (*optimal_filters*)\\n\\n    .. cpp:member:: gsl_vector** optimalfilterFound\\n\\n        GSL vector with the optimal filter selected\\n\\n    .. cpp:member:: gsl_vector** DabFound\\n\\n        **DAB** column from the library\\n\\n    .. cpp:member:: double* Ealpha\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    .. cpp:member:: double* Ebeta\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    .. cpp:member:: double margin\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n\"}, {\"line\": 2959, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_prclofwn(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, gsl_vector **PRCLOFWNFound, double *Ealpha, double *Ebeta, double margin)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    When :option:`EnergyMethod` = **OPTFILT** and :option:`OFNoise` = **WEIGHTN** this function selects the proper precalculated values (**OFWNx**) from the calibration *PRCLOFWN* HDU of the library by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library (:cpp:member:`maxDERs`) for *reconstruct_init->OFLib* = 1.\\n\\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\\n\\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\\n\\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\\n\\n    **Members/Variables**\\n\\n    double **maxDER**\\n\\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\\n\\n    gsl_vector* **maxDERs**\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    gsl_vector** **PRCLOFWNFound**\\n\\n        GSL vector with some precalculated selected\\n\\n    double* **Ealpha**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    double* **Ebeta**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    double **margin**\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n    .. cpp:member:: double maxDER\\n\\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\\n\\n    .. cpp:member:: gsl_vector* maxDERs\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: gsl_vector** PRCLOFWNFound\\n\\n        GSL vector with some precalculated selected\\n\\n    .. cpp:member:: double* Ealpha\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    .. cpp:member:: double* Ebeta\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    .. cpp:member:: double margin\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n\"}, {\"line\": 3030, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int find_prclcov(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, gsl_vector **PRCLCOVFound, gsl_vector **DabFound, double *Ealpha, double *Ebeta, double margin)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    When :option:`EnergyMethod` = **COVAR** this function selects the proper precalculated values (**PCOVx**) from the *PRCLCOV* HDU of the  calibration library by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library (:cpp:member:`maxDERs`) for the *reconstruct_init->OFLib* = 1. It also selects the proper row from the column **PAB**.\\n\\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\\n\\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\\n\\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\\n\\n    **Members/Variables**\\n\\n    double **maxDER**\\n\\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\\n\\n    gsl_vector* **maxDERs**\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    gsl_vector** **PRCLCOVFound**\\n\\n        GSL vector with the precalculated values selected\\n\\n    gsl_vector** **DabFound**\\n\\n        **DAB** column from the library\\n\\n    double* **Ealpha**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    double* **Ebeta**\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    double **margin**\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n    .. cpp:member:: double maxDER\\n\\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\\n\\n    .. cpp:member:: gsl_vector* maxDERs\\n\\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: gsl_vector** PRCLCOVFound\\n\\n        GSL vector with the precalculated values selected\\n\\n    .. cpp:member:: gsl_vector** DabFound\\n\\n        **DAB** column from the library\\n\\n    .. cpp:member:: double* Ealpha\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\\n\\n    .. cpp:member:: double* Ebeta\\n\\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\\n\\n    .. cpp:member:: double margin\\n\\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\\n\\n\"}, {\"line\": 3109, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_void freeOptimalFilterSIRENA(OptimalFilterSIRENA* OFilterColl)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    Destructor of *OptimalFilterSIRENA* structure.\\n\\n    **Members/Variables**\\n\\n    OptimalFilterSIRENA* **OFilterColl**\\n\\n        Instance of *OptimalFilterSIRENA* structure\\n\\n    .. cpp:member:: OptimalFilterSIRENA* OFilterColl\\n\\n        Instance of *OptimalFilterSIRENA* structure\\n\\n\"}, {\"line\": 3126, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_void freeReconstructInitSIRENA(ReconstructInitSIRENA* reconstruct_init)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    Destructor of *ReconstructInitSIRENA* structure.\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Instance of *ReconstructInitSIRENA* structure\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Instance of *ReconstructInitSIRENA* structure\\n\\n\"}, {\"line\": 3143, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_void freePulsesCollection(PulsesCollection* PulsesColl)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    Destructor of *PulsesCollection* structure.\\n\\n    **Members/Variables**\\n\\n    PulsesCollection* **PulsesColl**\\n\\n        Instance of *PulsesCollection* structure\\n\\n    .. cpp:member:: PulsesCollection* PulsesColl\\n\\n        Instance of *PulsesCollection* structure\\n\\n\"}, {\"line\": 3160, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int fromGslMatrix(void **buffer, gsl_matrix **matrix, int type)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    The function puts the values of the input GSL matrix into an output buffer.\\n\\n    **Members/Variables**\\n\\n    void** **buffer**\\n\\n        Output buffer\\n\\n    gsl_matrix** **matrix**\\n\\n        Input GSL matrix\\n\\n    int **type**\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n    .. cpp:member:: void** buffer\\n\\n        Output buffer\\n\\n    .. cpp:member:: gsl_matrix** matrix\\n\\n        Input GSL matrix\\n\\n    .. cpp:member:: int type\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n\"}, {\"line\": 3193, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int fromGslVector(void **buffer, gsl_vector **array, int type)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    The function puts the values of the input GSL vector into an output buffer.\\n\\n    **Members/Variables**\\n\\n    void** **buffer**\\n\\n        Output buffer\\n\\n    gsl_vector** **array**\\n\\n        Input GSL vector\\n\\n    int **type**\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n    .. cpp:member:: void** buffer\\n\\n        Output buffer\\n\\n    .. cpp:member:: gsl_vector** array\\n\\n        Input GSL vector\\n\\n    .. cpp:member:: int type\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n\"}, {\"line\": 3228, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int gennoisespec_main()\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function calculates the current noise spectral density.\\n    If there are pulses in a record, the pulses are rejected and it is going to look for pulse-free intervals of a given size (*intervalMinBins*).\\n    If there are no pulses in a record, the event is divided into pulse-free intervals of a given size (*intervalMinBins*).\\n    It is going to look for pulse-free intervals, calculate their FFT(not filtered data) and average them.\\n\\n    Another feature is calculate the weight matrix of the noise (in fact, weight matrices of noise of different lengths).\\n\\n    The output FITS file (_noisespec) contains three columns in two extensions, *NOISE* and *NOISEALL*:\\n        - **FREQ**: Frequency\\n        - **CSD**: Current noise spectral density: Amount of current per unit (density) of frequency (spectral), as a function of the frequency\\n        - **SIGMACSD**: Standard error of the mean (filled out with 0's at the moment)\\n\\n    There is also other extension, *WEIGHTMS*, where the weight matrices of the noise are stored.\\n\\n    Steps:\\n\\n    - Reading all programm parameters by using PIL\\n    - Open input FITS file\\n    - Check if input FITS file have been simulated with TESSIM or XIFUSIM\\n    - To calculate *aducnv* (conversion factor between arbitrary units and A)...\\n    - ...or read ``ADU_CNV``, ``I_BIAS`` and ``ADU_BIAS``\\n    - Get structure of input FITS file columns\\n    - Read info to transform to resistance space (if it is necessary)\\n    - Read and check other input keywords\\n    - Read other necessary keywords from ANY HDU\\n    - Calculate the sampling rate\\n        - By using keywords in input FITS file (from ``DELTAT`` or ``TCLOCK``+``DEC_FAC`` or ``NUMROW``+``P_ROW``)\\n        - If necessary read the sampling rate from input FITS file (from the ``HISTORY`` in the *Primary* HDU)\\n        - If not possible, provide an error message to include DELTAT (inverse of sampling rate) in the input FITS file\\n    - Initialize variables and transform from seconds to samples\\n    - Declare variables\\n    - Create structure to run Iteration\\n        - Read columns (**TIME** and **ADC**)\\n    - Called iteration function: :cpp:func:`inDataIterator`\\n    - Close input FITS file\\n    - Generate CSD representation\\n        - Applying :cpp:func:`medianKappaClipping_noiseSigma` in order to remove the noise intervals with a high sigma (if :option:`rmNoiseInterval` = yes)\\n        - FFT calculus (EventSamplesFFT)\\n        - Add to mean FFT samples\\n        - Current noise spectral density\\n        - Extra normalization (further than the FFT normalization factor,1/n) in order to get the apropriate noise level provided by Peille (54 pA/rHz)\\n    - Load in noiseIntervals only those intervals with a proper sigma (if :option:`rmNoiseInterval` = yes) and NumMeanSamples = cnt (in order not to change excesively the code when weightMS)\\n    - Generate WEIGHT representation\\n    - Create output FITS File: GENNOISESPEC representation file\\n    - Write extensions *NOISE*, *NOISEALL* and *WEIGHTMS* (call :cpp:func:`writeTPSreprExten`)\\n    - Free allocated GSL vectors\\n    - Close output FITS file\\n    - Free memory\\n    - Finalize the task\\n\\n    The parameters (*struct Parameters* **par**) read by :cpp:func:`getpar_noiseSpec` are:\\n\\n    char **inFile**\\n\\n        Name of the input FITS file\\n\\n    char **outFile**\\n\\n        Name of the output FITS file\\n\\n    int **intervalMinSamples**\\n\\n        Length of a pulse-free interval to use (samples) = *intervalMinBins*\\n\\n    int **nplPF**\\n\\n        Number of pulse lengths after ending the pulse (Tend) to start the pulse-free interval\\n\\n    int **nintervals**\\n\\n        Number of pulse-free intervals to use to calculate the Noise Spectral Density\\n\\n    double **scaleFactor**\\n\\n        Scale factor to apply in order to calculate the LPF box-car length\\n\\n    int **samplesUp**\\n\\n        Consecutive samples over the threshold to locate a pulse\\n\\n    double **nSgms**\\n\\n        Number of Sigmas to establish the threshold\\n\\n    int **pulse_length**\\n\\n        Pulse length (samples)\\n\\n    double **LrsT**\\n\\n        Running sum length (seconds)\\n\\n    double **LbT**\\n\\n        Baseline averaging length (seconds)\\n\\n    char **weightMS**\\n\\n        Calculate and write the weight matrices if *weightMS=yes*\\n\\n    char **EnergyMethod**\\n\\n        Transform to resistance space (I2R, I2RFITTED) or not (OPTFILT)\\n\\n    double **Ifit**\\n\\n        Constant to apply the I2RFITTED conversion (adu)\\n\\n    char **clobber**\\n\\n        Re-write output files if *clobber=yes*\\n\\n    int **matrixSize**\\n\\n        Size of noise matrix if only one to be created\\n\\n    char **rmNoiseIntervals**\\n\\n        Remove some noise intervals before calculating the noise spectrum if *rmNoiseIntervals=yes*\\n\\n    .. cpp:member:: char **inFile**\\n\\n        Name of the input FITS file\\n\\n    .. cpp:member:: char **outFile**\\n\\n        Name of the output FITS file\\n\\n    .. cpp:member:: int **intervalMinSamples**\\n\\n        Length of a pulse-free interval to use (samples) = *intervalMinBins*\\n\\n    .. cpp:member:: int **nplPF**\\n\\n        Number of pulse lengths after ending the pulse (Tend) to start the pulse-free interval\\n\\n    .. cpp:member:: int **nintervals**\\n\\n        Number of pulse-free intervals to use to calculate the Noise Spectral Density\\n\\n    .. cpp:member:: double **scaleFactor**\\n\\n        Scale factor to apply in order to calculate the LPF box-car length\\n\\n    .. cpp:member:: int **samplesUp**\\n\\n        Consecutive samples over the threshold to locate a pulse\\n\\n    .. cpp:member:: double **nSgms**\\n\\n        Number of Sigmas to establish the threshold\\n\\n    .. cpp:member:: int **pulse_length**\\n\\n        Pulse length (samples)\\n\\n    .. cpp:member:: double **LrsT**\\n\\n        Running sum length (seconds)\\n\\n    .. cpp:member:: double **LbT**\\n\\n        Baseline averaging length (seconds)\\n\\n    .. cpp:member:: char **weightMS**\\n\\n        Calculate and write the weight matrices if *weightMS=yes*\\n\\n    .. cpp:member:: char **EnergyMethod**\\n\\n        Transform to resistance space (I2R, I2RFITTED) or not (OPTFILT)\\n\\n    .. cpp:member:: double **Ifit**\\n\\n        Constant to apply the I2RFITTED conversion (adu)\\n\\n    .. cpp:member:: char **clobber**\\n\\n        Re-write output files if *clobber=yes*\\n\\n    .. cpp:member:: int **matrixSize**\\n\\n        Size of noise matrix if only one to be created\\n\\n    .. cpp:member:: char **rmNoiseIntervals**\\n\\n        Remove some noise intervals before calculating the noise spectrum if *rmNoiseIntervals=yes*\\n\"}, {\"line\": 3420, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getB(gsl_vector *vectorin, gsl_vector *tstart, int nPulses, gsl_vector **lb, int sizepulse, gsl_vector **B, gsl_vector **rmsB)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function calculates the sum, :cpp:member:`B`, of :cpp:member:`lb` digitized data samples of a pulse-free interval immediately\\n    before each pulse. If the pulse-free interval before the current pulse is lower than :cpp:member:`lb`, :cpp:member:`B` is calculated with the available\\n    number of samples. If there is not a pulse-free interval before the pulse, it is looked for it after the current pulse.\\n    The number of samples of the pulse-free interval used to calculate :cpp:member:`B` is stored in the :cpp:member:`lb` vector.\\n\\n    Steps:\\n\\n    First of all, the auxiliary variable *Baux* is initialized to -999 and all the elements of the :cpp:member:`lb` vector are equal to the :option:`LbT` input parameter in samples.\\n    Then, the code is divided into 2 *if* statements:\\n\\n    - When the current pulse is the first pulse into the record:\\n\\n      - :math:`tstart \\\\geq lb` => Sum *lb* samples\\n      - :math:`0<tstart<lb` => Sum the available number of samples (although the available number of samples was lower than *lb*)\\n      - :math:`tstart=0` => If there is not a pulse-free interval before the pulse, it is looked for it after the current pulse\\n\\n    - When the current pulse is not the first pulse into the record:\\n\\n      - :math:`tstart_i-tend_{i-1} \\\\geq lb` => Sum lb samples\\n      - :math:`0<tstart_i-tend{i-1}<lb` => Sum the available number of samples (although the available number of samples was lower than *lb*)\\n      - If there is not a pulse-free interval before the pulse, it is looked for it after the current pulse\\n\\n    If *Baux* is still -999, a pulse-free interval can not be found to apply the running sum filter. This has to be taken into account,\\n    out of the function, to try to get a usable :cpp:member:`B`.\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **vectorin**\\n\\n        Input record\\n\\n    gsl_vector* **tstart**\\n\\n        Starting time of the pulses into the record\\n\\n    int **nPulses**\\n\\n        Number of pulses into the record\\n\\n    gsl_vector** **lb**\\n\\n        Vector containing the baseline averaging length used for each pulse\\n\\n    int **sizepulse**\\n\\n        Size of the pulse in samples\\n\\n    gsl_vector** **B**\\n\\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\\n\\n    gsl_vector** **rmsB**\\n\\n        In general, rms of the baseline related to a pulse-free interval immediately before the current pulse\\n\\n    .. cpp:member:: gsl_vector* vectorin\\n\\n        Input record\\n\\n    .. cpp:member:: gsl_vector* tstart\\n\\n        Starting time of the pulses into the record\\n\\n    .. cpp:member:: int nPulses\\n\\n        Number of pulses into the record\\n\\n    .. cpp:member:: gsl_vector** lb\\n\\n        Vector containing the baseline averaging length used for each pulse\\n\\n    .. cpp:member:: int sizepulse\\n\\n        Size of the pulse in samples\\n\\n    .. cpp:member:: gsl_vector** B\\n\\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\\n\\n    .. cpp:member:: gsl_vector** rmsB\\n\\n        In general, rms of the baseline related to a pulse-free interval immediately before the current pulse\\n\"}, {\"line\": 3507, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: LibraryCollection* getLibraryCollection(ReconstructInitSIRENA* reconstruct_init, gsl_vector *pBi, gsl_vector *posti, int* const status)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    This function creates and retrieves a *LibraryCollection* from a file.\\n\\n    - Create *LibraryCollection* structure\\n    - Open FITS file in READONLY mode (move to the first HDU) and get number of templates (rows)\\n    - Allocate library structure\\n    - Get **PULSE** and **MF** column numbers (depending the different options)\\n    - Get template duration\\n    - Allocate library structure (cont.)\\n    - Get matched filter duration\\n    - Read different columns and populate the *LibraryCollection* structure\\n    - Added new code to handle the new HDUs *FIXFILTF*, *FIXFILTT*, *PRCLCOV* and *PRCLOFWN*\\n    - Free allocated GSL vectors and matrices\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Instance of *ReconstructInitSIRENA* structure\\n\\n    gsl_vector **posti**\\n\\n        Vector with the post values read from the XML file\\n\\n    int* const **status**\\n\\n        Input/output status\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Instance of *ReconstructInitSIRENA* structure\\n\\n    .. cpp:member:: gsl_vector pBi\\n\\n        Vector with the preBuffer values read from the XML file\\n\\n     .. cpp:member:: gsl_vector posti\\n\\n        Vector with the post values read from the XML file\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/output status\\n\\n\"}, {\"line\": 3555, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: NoiseSpec* getNoiseSpec(ReconstructInitSIRENA* reconstruct_init, int* const status)\\n\\n    Located  in file: *integraSIRENA.cpp*\\n\\n    This function creates and retrieves a *NoiseSpec* from a file.\\n\\n    - Create *NoiseSpec* structure\\n    - Open FITS file, move to the *NOISE*, *NOISEALL* and *WEIGHTMS* HDUs and get necessary keywords\\n    - Allocate *NoiseSpec* structure\\n    - Get noise spectrum (**CSD**), and noise frequencies (**FREQ**) column numbers\\n    - Read column **CSD** and save it into the structure\\n    - Read column **FREQ** and save it into the structure\\n    - Read columns **Wx** with the noise weight matrix from noise intervals and save them into the structure\\n    - Return noise spectrum\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Instance of *ReconstructInitSIRENA* structure\\n\\n    int* const **status**\\n\\n        Input/Output status\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Instance of *ReconstructInitSIRENA* structure\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/Output status\\n\\n\"}, {\"line\": 3589, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getpar_noiseSpec(struct Parameters* const par)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function gets the input parameter from the command line or their default values from the *gennoisespec.par* file\\n\\n    **Members/Variables**\\n\\n    struct Parameters* const **par**\\n\\n        Structure containing the input parameters specified in *gennoisespec.par*\\n\\n    .. cpp:member:: struct Parameters* const par\\n\\n        Structure containing the input parameters specified in *gennoisespec.par*\\n\\n\"}, {\"line\": 3606, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getpar_teslib(struct Parameters* const par)\\n\\n    Located in file: *teslib.c*\\n\\n    This function gets the input parameter from the command line or their default values from the *teslib.par* file\\n\\n    **Members/Variables**\\n\\n    struct Parameters* const **par**\\n\\n        Structure containing the input parameters specified in *teslib.par*\\n\\n    .. cpp:member:: struct Parameters* const par\\n\\n        Structure containing the input parameters specified in *teslib.par*\\n\\n\"}, {\"line\": 3623, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getpar_tesrecons(struct Parameters* const par)\\n\\n    Located in file: *tesrecons.c*\\n\\n    This function gets the input parameter from the command line or their default values from the *tesrecons.par* file\\n\\n    **Members/Variables**\\n\\n    struct Parameters* const **par**\\n\\n        Structure containing the input parameters specified in *tesrecons.par*\\n\\n    .. cpp:member:: struct Parameters* const par\\n\\n        Structure containing the input parameters specified in *tesrecons.par*\\n\\n\"}, {\"line\": 3640, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getPulseHeight(gsl_vector *vectorin, double tstart, double tstartnext, int lastPulse, double lrs, double lb, double B, int sizepulse, double *pulseheight)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function estimates the pulse height of a pulse by using a running sum filter. It extracts from the record, :cpp:member:`vectorin`, the pulse whose\\n    pulse height is going to be estimated by using :cpp:func:`RS_filter`.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Extracting from the record the pulse whose pulse height is going to be estimated\\n    - Apply the running sum filter\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **vectorin**\\n\\n        Not filtered record\\n\\n    double **tstart**\\n\\n        Starting time of the pulse whose pulse height is going to be estimated\\n\\n    double **tstartnext**\\n\\n        Starting time of the next pulse whose pulse height is going to be estimated\\n\\n    int **lastPulse**\\n\\n        It is 1 if the pulse is the last one into the record or the only one\\n\\n    double **lrs**\\n\\n        Running sum length (equal to the :option:`LrsT` input parameter in samples)\\n\\n    double **lb**\\n\\n        Baseline averaging length used for the pulse whose pulse height is going to be estimated\\n\\n    double **B**\\n\\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\\n\\n    int **sizepulse**\\n\\n        Size of the pulse in samples\\n\\n    double* **pulseheight**\\n\\n        Estimated pulse height of the pulse\\n\\n    .. cpp:member:: gsl_vector* vectorin\\n\\n        Not filtered record\\n\\n    .. cpp:member:: double tstart\\n\\n        Starting time of the pulse whose pulse height is going to be estimated\\n\\n    .. cpp:member:: double tstartnext\\n\\n        Starting time of the next pulse whose pulse height is going to be estimated\\n\\n    .. cpp:member:: int lastPulse\\n\\n        It is 1 if the pulse is the last one into the record or the only one\\n\\n    .. cpp:member:: double lrs\\n\\n        Running sum length (equal to the :option:`LrsT` input parameter in samples)\\n\\n    .. cpp:member:: double lb\\n\\n        Baseline averaging length used for the pulse whose pulse height is going to be estimated\\n\\n    .. cpp:member:: double B\\n\\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\\n\\n    .. cpp:member:: int sizepulse\\n\\n        Size of the pulse in samples\\n\\n    .. cpp:member:: double* pulseheight\\n\\n        Estimated pulse height of the pulse\\n\\n\"}, {\"line\": 3728, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getSamplingrate_trigreclength_Filei (char* inputFile, struct Parameters par, double* samplingrate, int* trigreclength)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function gets the *sampling rate* and the *trig_reclength* from an inputs FITS file :cpp:member:`inputFile`.\\n\\n    Steps:\\n\\n     - Open FITS file\\n     - Check if input FITS file have been simulated with TESSIM or XIFUSIM\\n     - Check if input XML file and XMl file to build the library to be used to reconstruct are the same\\n     - Get the sampling rate from the HISTORY keyword from the input FITS file and check with sampling rate from XML file\\n     - If xifusim file => Get 'trig_reclength' from the HISTORY keyword from the input FITS file 'trig_reclength' is necessary if SIRENA is going to run in THREADING mode\\n     - Close FITS file\\n     - Free memory\\n\\n    **Members/Variables**\\n\\n    char* **inputFile**\\n\\n        Input file name\\n\\n    struct Parameters **par**\\n\\n        Input parameters\\n\\n    double* **samplingrate**\\n\\n        (In) Sampling rate from XML file => (Out) Sampling rate\\n\\n    int* **trigreclength**\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n   .. cpp:member:: char* inputFile\\n\\n        Input file name\\n\\n   .. cpp:member:: struct Parameters par\\n\\n        Input parameters\\n\\n   .. cpp:member:: double* samplingrate\\n\\n        (In) Sampling rate from XML file => (Out) Sampling rate\\n\\n   .. cpp:member:: int* trigreclength\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n\"}, {\"line\": 3779, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int getSamplingrate_trigreclength (char* inputFile, struct Parameters par, double* samplingrate, int* trigreclength, int* numfits)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function gets the *sampling rate* and the *trig_reclength* no matter if :cpp:member:`inputFile` is only a FITS file or more (inputFile can start with '@' or not, input file or files can have been simulated with TESSIM or XIFUSIM).\\n\\n    **Members/Variables**\\n\\n    char* **inputFile**\\n\\n        Input file name\\n\\n    struct Parameters **par**\\n\\n        Input parameters\\n\\n    double* **samplingrate**\\n\\n        (In) Sampling rate from XML file => (Out) Sampling rate\\n\\n    int* **trigreclength**\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n    int* **numfits**\\n\\n        Number of FITS files to work with\\n\\n   .. cpp:member:: char* inputFile\\n\\n        Input file name\\n\\n   .. cpp:member:: struct Parameters par\\n\\n        Input parameters\\n\\n   .. cpp:member:: double* samplingrate\\n\\n        (In) Sampling rate from XML file => (Out) Sampling rate\\n\\n   .. cpp:member:: int* trigreclength\\n\\n        Necessary if SIRENA is going to run in THREADING mode\\n\\n   .. cpp:member:: int* numfits\\n\\n        Number of FITS files to work with\\n\\n\"}, {\"line\": 3828, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void gsl_vector_complex_absIFCA(gsl_vector *cvnew,gsl_vector_complex *cv)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function calculates the magnitude of the complex elements of a vector (real part).\\n\\n    **Members/Variables**\\n\\n    gsl_vector_complex* **cv**\\n\\n        Input GSL complex vector\\n\\n    gsl_vector* **cvnew**\\n\\n        Output GSL vector with the absolute values of the elements of :cpp:member:`cv`\\n\\n    .. cpp:member:: gsl_vector_complex* cv\\n\\n        Input GSL complex vector\\n\\n    .. cpp:member:: gsl_vector* cvnew\\n\\n        Output GSL vector with the absolute values of the elements of :cpp:member:`cv`\\n\\n\"}, {\"line\": 3853, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void gsl_vector_complex_argIFCA(gsl_vector *varg, gsl_vector_complex *vin)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function calculates the arguments of the complex elements of a vector.\\n\\n    **Members/Variables**\\n\\n    gsl_vector_complex* **vin**\\n\\n        Input GSL complex vector\\n\\n    gsl_vector* **varg**\\n\\n        Output GSL vector with the arguments of the elements of :cpp:member:`vin`\\n\\n    .. cpp:member:: gsl_vector_complex* vin\\n\\n        Input GSL complex vector\\n\\n    .. cpp:member:: gsl_vector* varg\\n\\n        Output GSL vector with the arguments of the elements of :cpp:member:`vin`\\n\\n\"}, {\"line\": 3878, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void gsl_vector_complex_scaleIFCA(gsl_vector_complex *cv,gsl_complex z)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function multiplies the complex elements of a vector by a complex number.\\n\\n    **Members/Variables**\\n\\n    gsl_vector_complex* **cv**\\n\\n        Input/Output (scaled) GSL complex vector\\n\\n    gsl_complex **z**\\n\\n        Input GSL complex number\\n\\n    .. cpp:member:: gsl_vector_complex* cv\\n\\n        Input/Output (scaled) GSL complex vector\\n\\n    .. cpp:member:: gsl_complex z\\n\\n        Input GSL complex number\\n\\n\"}, {\"line\": 3903, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void gsl_vector_sqrtIFCA(gsl_vector *cvnew, gsl_vector *cv)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function calculates the square root of the elements of a vector.\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **cv**\\n\\n        Input GSL complex vector\\n\\n    gsl_vector* **cvnew**\\n\\n        Output GSL vector with the square root values of the elements of :cpp:member:`cv`\\n\\n    .. cpp:member:: gsl_vector* cv\\n\\n        Input GSL complex vector\\n\\n    .. cpp:member:: gsl_vector* cvnew\\n\\n        Output GSL vector with the square root values of the elements of :cpp:member:`cv`\\n\\n\"}, {\"line\": 3928, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int gsl_vector_Sumsubvector(gsl_vector *invector, long offset, long n, double *sum)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function returns the sum of some elements of the input vector.\\n\\n    The starting element of the sum is :cpp:member:`offset` from the start of the input vector. It will sum up :cpp:member:`n` elements.\\n\\n    :cpp:member:`offset` can take values from 0 to *invector->size*\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        Input GSL vector\\n\\n    long **offset**\\n\\n        It is the first element to be summed\\n\\n    long **n**\\n\\n        Number of elements in the sum\\n\\n    double* **sum**\\n\\n        Calculated output value (sum of the corresponding elements)\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        Input GSL vector\\n\\n    .. cpp:member:: long offset\\n\\n        It is the first element to be summed\\n\\n    .. cpp:member:: long n\\n\\n        Number of elements in the sum\\n\\n    .. cpp:member:: double* sum\\n\\n        Calculated output value (sum of the corresponding elements)\\n\\n\"}, {\"line\": 3977, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int inDataIterator(long totalrows, long offset, long firstrow, long nrows, int ncols, iteratorCol *cols, void *user_strct)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function takes the optimum number of rows to read the input FITS file and works iteratively\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Allocate input GSL vectors\\n    - Read iterator\\n    - Processing each record\\n        - Information has been read by blocks (with nrows per block)\\n        - Just in case the last record has been filled out with 0's => Last record discarded\\n        - Convert to the resistance space if necessary\\n        - To avoid taking into account the pulse tails at the beginning of a record as part of a pulse-free interval\\n        - Low-pass filtering\\n        - Differentiate\\n        - Finding the pulses: Pulses tstarts are found (call :cpp:func:`findPulsesNoise`)\\n        - Finding the pulse-free intervals in each record\\n            - If there are pulses => Call :cpp:func:`findInterval`\\n            - No pulses => The whole event is going to be used (DIVIDING into intervals of intervalMinBins size) => Call :cpp:func:`findIntervalN`\\n        - Calculating the mean and sigma of the intervals without pulses together => *BSLN0* and *NOISESTD*\\n    - Preparing the CSD calculus (not filtered data)\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    long **totalrows**\\n\\n        Total number of rows processed\\n\\n    long **offset**\\n\\n        If positive, this number of rows at the beginning of the table (or pixels in the image) will be skipped and will not be passed to the work function\\n\\n    long **firstrow**\\n\\n        First row to read\\n\\n    long **nrows**\\n\\n        It specifies the number of table rows that are to be passed to the work function on each iteration. If *nrows = 0* then CFITSIO will calculate the optimum number for greatest efficiency. If *nrows* is negative, then all the rows or pixels will be passed at one time, and the work function will only be called once. If any variable length arrays are being processed, then the *nrows* value is ignored, and the iterator will always process one row of the table at a time\\n\\n    int **ncols**\\n\\n        Number of columns\\n\\n    iteratorCol* **cols**\\n\\n        Structure of iteration\\n\\n    void* **user_strct**\\n\\n        This is a user supplied pointer that can be used to pass ancillary information from the driver routine to the work function. It may point to a single number, an array, or to a structure containing an arbitrary set of parameters\\n\\n    .. cpp:member:: long totalrows\\n\\n        Total number of rows processed\\n\\n    .. cpp:member:: long offset\\n\\n        If positive, this number of rows at the beginning of the table (or pixels in the image) will be skipped and will not be passed to the work function\\n\\n    .. cpp:member:: long firstrow\\n\\n        First row to read\\n\\n    .. cpp:member:: long nrows\\n\\n        It specifies the number of table rows that are to be passed to the work function on each iteration. If *nrows = 0* then CFITSIO will calculate the optimum number for greatest efficiency. If *nrows* is negative, then all the rows or pixels will be passed at one time, and the work function will only be called once. If any variable length arrays are being processed, then the *nrows* value is ignored, and the iterator will always process one row of the table at a time\\n\\n    .. cpp:member:: int ncols\\n\\n        Number of columns\\n\\n    .. cpp:member:: iteratorCol* cols\\n\\n        Structure of iteration\\n\\n    .. cpp:member:: void* user_strct\\n\\n        This is a user supplied pointer that can be used to pass ancillary information from the driver routine to the work function. It may point to a single number, an array, or to a structure containing an arbitrary set of parameters\\n\"}, {\"line\": 4061, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_void initializeReconstructionSIRENA(ReconstructInitSIRENA* reconstruct_init, char* const record_file, fitsfile *fptr, char* const library_file, char* const event_file, int flength_0pad, int prebuff_0pad, double scaleFactor, int samplesUp, int samplesDown, double nSgms, int detectSP, int opmode, char *detectionMode, double LrsT, double LbT, char* const noise_file, char* filter_domain, char* filter_method, char* energy_method, double filtEev, double Ifit, char *ofnoise, int lagsornot, int nLags, int Fitting35, int ofiter, char oflib, char *ofinterp, char* oflength_strategy, int oflength, char preBuffer, double monoenergy, char addCOVAR, char addINTCOVAR, char addOFWN, int largeFilter, int interm, char* const detectFile, int errorT, int Sum0Filt, char clobber, int maxPulsesPerRecord, double SaturationValue, char* const tstartPulse1, int tstartPulse2, int tstartPulse3, double energyPCA1, double energyPCA2, char * const XMLFile, int* const status)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    This function initializes the structure *ReconstructInitSIRENA* with the variables required for SIRENA reconstruction. The values are taken from the input parameters.\\n\\n    - Load *LibraryCollection* structure if library file exists\\n    - Load *NoiseSpec* structure\\n    - Fill in the matrix *tstartPulse1_i* if *tstartPulse1* = nameFile Start time (in samples) of the first pulse (0  if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse, :option:`tstartPulse1`\\n    - Fill in *reconstruct_init*\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    char* const **record_file**\\n\\n        Filename of input data file with records, :option:`RecordFile`\\n\\n    fitsfile* **fptr**\\n\\n        FITS object with pointer to data file\\n\\n    char* const **library_file**\\n\\n        File name of calibration library, :option:`LibraryFile`\\n\\n    char* const **event_file**\\n\\n        File name of output events (with reconstructed energy), :option:`TesEventFile`\\n\\n    int **flength_0pad**\\n\\n        0-padding filter length, :option:`flength_0pad`\\n\\n    int **prebuff_0pad**\\n\\n        preBuffer used when 0-padding, :option:`prebuff_0pad`\\n\\n    double **scaleFactor**\\n\\n        Detection scale factor for initial filtering, :option:`scaleFactor`\\n\\n    int **samplesUp**\\n\\n        Number of samples for threshold trespassing, :option:`samplesUp`\\n\\n    int **samplesDown**\\n\\n        Number of samples below the threshold to look for other pulse, :option:`samplesDown`\\n\\n    double **nSgms**\\n\\n        Number of standard deviations in the kappa-clipping process for threshold estimation, :option:`nSgms`\\n\\n    int **detectSP**\\n\\n        Detect secondary pulses (1) or not (0), :option:`detectSP`\\n\\n    int **opmode**\\n\\n        Calibration run (0) or energy reconstruction run (1)\\n\\n    char* **detectionMode**\\n\\n        Adjusted Derivative (AD) or Single Threshold Crossing (STC), :option:`detectionMode`\\n\\n    double **LrsT**\\n\\n        Running sum length for the RS raw energy estimation (seconds), :option:`LrsT`\\n\\n    double **LbT**\\n\\n        Baseline averaging length (seconds), :option:`LbT`\\n\\n    char* const **noise_file**\\n\\n        Noise file, :option:`NoiseFile`\\n\\n    char* **filter_domain**\\n\\n        Filtering Domain: Time (**T**) or Frequency (**F**), :option:`FilterDomain`\\n\\n    char* **filter_method**\\n\\n        Filtering Method: **F0** (deleting the zero frequency bin) or **F0** (deleting the baseline), :option:`FilterMethod`\\n\\n    char* **energy_method**\\n\\n         Energy calculation Method: **OPTFILT**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**, :option:`EnergyMethod`\\n\\n    double **filtEev**\\n\\n         Energy of the filters of the library to be used to calculate energy (only for OPTFILT, I2R and I2RFITTED), :option:`filtEeV`\\n\\n    double **Ifit**\\n\\n         Constant to apply the I2RFITTED conversion\\n\\n    char* **ofnoise**\\n\\n         For optimal filtering:  **NSD** or **WEIGHTN**, :option:`OFNoise`\\n\\n    int **lagsornot**\\n\\n        Lags (1) or no lags (0), :option:`LagsOrNot`\\n\\n    int **nLags**\\n\\n        Number of lags (positive odd number)\\n\\n    int **Fitting35**\\n\\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\\n\\n    int **ofiter**\\n\\n        Iterate (1) or not iterate (0), :option:`OFIter`\\n\\n    char **oflib**\\n\\n        Work or not with a library with optimal filters (1/0)\\n\\n    char* **ofinterp**\\n\\n        Optimal Filter by using the Matched Filter or the DAB as matched filter (*MF*/*DAB*)\\n        It has been fixed in :ref:`tesrecons` as *SAB*\\n\\n    char* **oflength_strategy**\\n\\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**, :option:`OFStrategy`\\n\\n    int **oflength**\\n\\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**), :option:`OFLength`\\n\\n    char **preBuffer**\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the xml file)\\n\\n    double **monoenergy**\\n\\n        Monochromatic energy of input file in eV (only for library creation), :option:`monoenergy`\\n\\n    int **addCOVAR**\\n\\n        Add or not pre-calculated values related to COVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addCOVAR`\\n\\n    int **addINTCOVAR**\\n\\n        Add or not pre-calculated values related to INTCOVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addINTCOVAR`\\n\\n    int **addOFWN**\\n\\n        Add or not pre-calculated values related to Optimal Filtering by using Weight Noise matrix in the library file (yes/no) (only for library creation), :option:`addOFWN`\\n\\n    int **largeFilter**\\n\\n        Length of the longest fixed filters (only for library creation), :option:`largeFilter`\\n\\n    int **interm**\\n\\n        Write or not intermediate files (1/0), :option:`intermediate`\\n\\n    char* const **detectFile**\\n\\n        Intermediate detections file (if :option:`intermediate` = 1), :option:`detectFile`\\n\\n    int **errorT**\\n\\n        Additional error (in samples) added to the detected time (logically, it changes the reconstructed energies)\\n\\n    int **Sum0Filt**\\n\\n        0-padding: Subtract the sum of the filter (1) or not (0)\\n\\n    char **clobber**\\n\\n        Overwrite or not output files if exist (yes/no), :option:`clobber`\\n\\n    int **maxPulsesPerRecord**\\n\\n        Default size of the event list, :option:`EventListSize`\\n\\n    double **SaturationValue**\\n\\n        Saturation level of the ADC curves\\n\\n    int **tstartPulse1**\\n\\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse, :option:`tstartPulse1`\\n\\n    int **tstartPulse2**\\n\\n        Tstart (samples) of the second pulse, :option:`tstartPulse2`\\n\\n    int **tstartPulse3**\\n\\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS), :option:`tstartPulse3`\\n\\n    double **energyPCA1**\\n\\n        First energy (only for :option:`EnergyMethod` = **PCA**)\\n\\n    double **energyPCA2**\\n\\n        Second energy (only for :option:`EnergyMethod` = **PCA**)\\n\\n    char * const **XMLFile**\\n\\n        File name of the XML input file with instrument definition\\n\\n    int* const **status**\\n\\n        Input/Output status\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: char* const record_file\\n\\n        Filename of input data file with records, :option:`RecordFile`\\n\\n    .. cpp:member:: fitsfile* fptr\\n\\n        FITS object with pointer to data file\\n\\n    .. cpp:member:: char* const library_file\\n\\n        File name of calibration library, :option:`LibraryFile`\\n\\n    .. cpp:member:: char* const event_file\\n\\n        File name of output events (with reconstructed energy), :option:`TesEventFile`\\n\\n    .. cpp:member:: int flength_0pad\\n\\n        0-padding filter length, :option:`flength_0pad`\\n\\n    .. cpp:member:: int prebuff_0pad\\n\\n        preBuffer used when 0-padding, :option:`prebuff_0pad`\\n\\n    .. cpp:member:: double scaleFactor\\n\\n        Detection scale factor for initial filtering, :option:`scaleFactor`\\n\\n    .. cpp:member:: int samplesUp\\n\\n        Number of samples for threshold trespassing, :option:`samplesUp`\\n\\n    .. cpp:member:: int samplesDown\\n\\n        Number of samples below the threshold to look for other pulse, :option:`samplesDown`\\n\\n    .. cpp:member:: double nSgms\\n\\n        Number of standard deviations in the kappa-clipping process for threshold estimation, :option:`nSgms`\\n\\n    .. cpp:member:: int detectSP\\n\\n        Detect secondary pulses (1) or not (0), :option:`detectSP`\\n\\n    .. cpp:member:: int opmode\\n\\n        Calibration run (0) or energy reconstruction run (1)\\n\\n    .. cpp:member:: char* detectionMode\\n\\n        Adjusted Derivative (AD) or Single Threshold Crossing (STC), :option:`detectionMode`\\n\\n    .. cpp:member:: double LrsT\\n\\n        Running sum length for the RS raw energy estimation (seconds), :option:`LrsT`\\n\\n    .. cpp:member:: double LbT\\n\\n        Baseline averaging length (seconds), :option:`LbT`\\n\\n    .. cpp:member:: char* const noise_file\\n\\n        Noise file, :option:`NoiseFile`\\n\\n    .. cpp:member:: char* filter_domain\\n\\n        Filtering Domain: Time (**T**) or Frequency (**F**), :option:`FilterDomain`\\n\\n    .. cpp:member:: char* filter_method\\n\\n        Filtering Method: **F0** (deleting the zero frequency bin) or **F0** (deleting the baseline), :option:`FilterMethod`\\n\\n    .. cpp:member:: char* energy_method\\n\\n         Energy calculation Method: **OPTFILT**, **0PAD**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**, :option:`EnergyMethod`\\n\\n    .. cpp:member:: double filtEev\\n\\n         Energy of the filters of the library to be used to calculate energy (only for OPTFILT, I2R and I2RFITTED), :option:`filtEeV`\\n\\n    .. cpp:member:: double Ifit\\n\\n         Constant to apply the I2RFITTED conversion\\n\\n    .. cpp:member:: char* ofnoise\\n\\n         For optimal filtering:  **NSD** or **WEIGHTN**, :option:`OFNoise`\\n\\n    .. cpp:member:: int lagsornot\\n\\n        Lags (1) or no lags (0), :option:`LagsOrNot`\\n\\n    .. cpp:member:: int nLags\\n\\n        Number of lags (positive odd number)\\n\\n    .. cpp:member:: int Fitting35\\n\\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\\n\\n    .. cpp:member:: int ofiter\\n\\n        Iterate (1) or not iterate (0), :option:`OFIter`\\n\\n    .. cpp:member:: char oflib\\n\\n        Work or not with a library with optimal filters (1/0)\\n\\n    .. cpp:member:: char* ofinterp\\n\\n        Optimal Filter by using the Matched Filter or the DAB as matched filter (*MF*/*SAB*)\\n        It has been fixed in :ref:`tesrecons` as *SAB*\\n\\n    .. cpp:member:: char* oflength_strategy\\n\\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**, :option:`OFStrategy`\\n\\n    .. cpp:member:: int oflength\\n\\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**), :option:`OFLength`\\n\\n    .. cpp:member:: char preBuffer\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the xml file)\\n\\n    .. cpp:member:: double monoenergy\\n\\n        Monochromatic energy of input file in eV (only for library creation), :option:`monoenergy`\\n\\n    .. cpp:member:: int addCOVAR\\n\\n        Add or not pre-calculated values related to COVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addCOVAR`\\n\\n    .. cpp:member:: int addINTCOVAR\\n\\n        Add or not pre-calculated values related to INTCOVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addINTCOVAR`\\n\\n    .. cpp:member:: int addOFWN\\n\\n        Add or not pre-calculated values related to Optimal Filtering by using Weight Noise matrix in the library file (yes/no) (only for library creation), :option:`addOFWN`\\n\\n    .. cpp:member:: int largeFilter\\n\\n        Length of the longest fixed filters (only for library creation), :option:`largeFilter`\\n\\n    .. cpp:member:: int interm\\n\\n        Write or not intermediate files (1/0), :option:`intermediate`\\n\\n    .. cpp:member:: char* const detectFile\\n\\n        Intermediate detections file (if :option:`intermediate` = 1), :option:`detectFile`\\n\\n    .. cpp:member:: int errorT\\n\\n        Additional error (in samples) added to the detected time (logically, it changes the reconstructed energies)\\n\\n    .. cpp:member:: int Sum0Filt\\n\\n        0-padding: Subtract the sum of the filter (1) or not (0)\\n\\n    .. cpp:member:: char clobber\\n\\n        Overwrite or not output files if exist (yes/no), :option:`clobber`\\n\\n    .. cpp:member:: int maxPulsesPerRecord\\n\\n        Default size of the event list, :option:`EventListSize`\\n\\n    .. cpp:member:: double SaturationValue\\n\\n        Saturation level of the ADC curves\\n\\n    .. cpp:member:: int tstartPulse1\\n\\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse, :option:`tstartPulse1`\\n\\n    .. cpp:member:: int tstartPulse2\\n\\n        Tstart (samples) of the second pulse, :option:`tstartPulse2`\\n\\n    .. cpp:member:: int tstartPulse3\\n\\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS), :option:`tstartPulse3`\\n\\n    .. cpp:member:: double energyPCA1\\n\\n        First energy (only for :option:`EnergyMethod` = **PCA**)\\n\\n    .. cpp:member:: double energyPCA2\\n\\n        Second energy (only for :option:`EnergyMethod` = **PCA**)\\n\\n    .. cpp:member:: char * const XMLFile\\n\\n        File name of the XML input file with instrument definition\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/Output status\\n\"}, {\"line\": 4484, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int InitialTriggering(gsl_vector *derivative, double nSgms, double scalefactor, double samplingRate, double stopcriteriamkc, double kappamkc, bool *triggerCondition, int *tstart, int *flagTruncated, double *threshold, int tstartProvided)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function finds the first pulse in the input vector, first derivative of the (low-pass filtered) record.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Stablish the :cpp:member:`threshold`\\n    - It is necessary to find the tstart of the first pulse...\\n\\n      Obtain tstart of the first pulse in the derivative if :math:`derivative_i>threshold`\\n\\n    - ... Or to use the tstart provided as input parameter\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **derivative**\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    double **nSgms**\\n\\n        Number of *Sigmas* to establish the threshold (:option:`nSgms`)\\n\\n    double **scalefactor**\\n\\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\\n\\n    double **samplingRate**\\n\\n        Sampling rate\\n\\n    double **stopcriteriamkc**\\n\\n        Used in :cpp:func:`medianKappaClipping` (%)\\n\\n    double **kappamkc**\\n\\n        Used in :cpp:func:`medianKappaClipping`\\n\\n    bool* **triggerCondition**\\n\\n        True => The algorithm has found the first event\\n\\n        False => The algorithm has not found any event\\n\\n    int* **tstart**\\n\\n        First event tstart (in samples)\\n\\n    int* **flagTruncated**\\n\\n        Flag indicating if the event is truncated\\n\\n    double* **threshold**\\n\\n        Calculated threshold  (output parameter because it is necessary out of the function)\\n\\n    int **tstartProvided**\\n\\n        Tstart of the first pulse provided as input parameter\\n\\n    .. cpp:member:: gsl_vector* derivative\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    .. cpp:member:: double nSgms\\n\\n        Number of *Sigmas* to establish the threshold (:option:`nSgms`)\\n\\n    .. cpp:member:: double scalefactor\\n\\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\\n\\n    .. cpp:member:: double samplingRate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: double stopcriteriamkc\\n\\n        Used in :cpp:func:`medianKappaClipping` (%)\\n\\n    .. cpp:member:: double kappamkc\\n\\n        Used in :cpp:func:`medianKappaClipping`\\n\\n    .. cpp:member:: bool* triggerCondition\\n\\n        True => The algorithm has found the first event\\n\\n        False => The algorithm has not found any event\\n\\n    .. cpp:member:: int* tstart\\n\\n        First event tstart (in samples)\\n\\n    .. cpp:member:: int* flagTruncated\\n\\n        Flag indicating if the event is truncated\\n\\n    .. cpp:member:: double* threshold\\n\\n        Calculated threshold  (output parameter because it is necessary out of the function)\\n\\n    .. cpp:member:: int tstartProvided\\n\\n        Tstart of the first pulse provided as input parameter\\n\\n\"}, {\"line\": 4595, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_void IntegrafreeTesEventListSIRENA(TesEventList* event_list)\\n\\n    Located in file *integraSIRENA.cpp*\\n\\n    This function frees the structure in the input parameter.\\n\\n    **Members/Variables**\\n\\n    TesEventList* **event_list**\\n\\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\\n\\n    .. cpp:member:: TesEventList* event_list\\n\\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\\n\\n\"}, {\"line\": 4612, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int interactivePars(inparam *taskPars, int np, string task)\\n\\n    Located in file *inoututils.cpp*\\n\\n    This function reads input parameters interactively (provided by the user or taken as default values).\\n    Used in tool :ref:`gennoisespec`.\\n\\n    **Members/Variables**\\n\\n    inparam* **taskPars**\\n\\n        Instance of *inparam* structure storing input parameters\\n\\n    int **np**\\n\\n        Number of parameters\\n\\n    string **task**\\n\\n        Tool name\\n\\n    .. cpp:member:: inparam* taskPars\\n\\n        Instance of *inparam* structure storing input parameters\\n\\n    .. cpp:member:: int np\\n\\n        Number of parameters\\n\\n    .. cpp:member:: string task\\n\\n        Tool name\\n\"}, {\"line\": 4645, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int interpolatePOS(gsl_vector *x_in, gsl_vector *y_in, long size, double step, gsl_vector **x_out, gsl_vector **y_out)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function interpolates an input vector (:cpp:member:`x_in`, :cpp:member:`y_in`), creating an output vector (:cpp:member:`x_out`, :cpp:member:`y_out`) with the size and frequency step given. *POS* comes from the fact that the input spectrum only has positive frequencies (in order to not handle the f=0 bin).\\n\\n    - Declare and initialize variables\\n    - GSL method applied for interpolatation\\n    - Generate the interpolated output vector\\n    - Free memory\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **x_in**\\n\\n        GSL input vector with the abscissas of the vector which is going to be interpolated\\n\\n    gsl_vector* **y_in**\\n\\n        GSL input vector with the ordinates of the vector which is going to be interpolated\\n\\n    long **size**\\n\\n        Size of the interpolated output vector\\n\\n    double **step**\\n\\n        Frequency step of the interpolated output vector\\n\\n    gsl_vector** **x_out**\\n\\n        GSL output vector with the abscissas of the interpolated vector\\n\\n    gsl_vector** **y_out**\\n\\n        GSL output vector with the ordinates of the interpolated vector\\n\\n    .. cpp:member:: gsl_vector* x_in\\n\\n        GSL input vector with the abscissas of the vector which is going to be interpolated\\n\\n    .. cpp:member:: gsl_vector* y_in\\n\\n        GSL input vector with the ordinates of the vector which is going to be interpolated\\n\\n    .. cpp:member:: long size\\n\\n        Size of the interpolated output vector\\n\\n    .. cpp:member:: double step\\n\\n        Frequency step of the interpolated output vector\\n\\n    .. cpp:member:: gsl_vector** x_out\\n\\n        GSL output vector with the abscissas of the interpolated vector\\n\\n    .. cpp:member:: gsl_vector** y_out\\n\\n        GSL output vector with the ordinates of the interpolated vector\\n\\n\"}, {\"line\": 4707, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int interpolate_model(gsl_vector **modelFound, double p_model, gsl_vector *modelIn1, double p_modelIn1, gsl_vector *modelIn2, double p_modelIn2)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function interpolates the pulse model, :math:`p(t,E)`, between two models of the pulse models library,\\n    :math:`p(t,E_1)` and :math:`p(t,E_2)`, being :math:`E_1<E<E_2`.\\n\\n    According to the interpolation method:\\n\\n    .. math::\\n\\n        p(t,E)={\\\\frac{E_2-E}{E_2-E_1}}p(t,E_1)+{\\\\frac{E-E_1}{E_2-E_1}}p(t,E_2)\\n\\n\\n    **Members/Variables**\\n\\n    gsl_vector** **modelFound**\\n\\n        Found model of the pulse whose *energy* or *maxDER* is :cpp:member:`p_model`\\n\\n    double **p_model**\\n\\n        Parameter (*energy* or *maxDER*) of the pulse whose model is being sought\\n\\n    gsl_vector* **modelIn1**\\n\\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately lower than :cpp:member:`p_model` in the library FITS file\\n\\n    double **p_modelIn1**\\n\\n        Parameter (*energy* or *maxDER*) immediately lower than :cpp:member:`p_model` in the library FITS file\\n\\n    gsl_vector* **modelIn2**\\n\\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately greater than :cpp:member:`p_model` in the library FITS file\\n\\n    double **p_modelIn2**\\n\\n        Parameter (*energy* or *maxDER*) immediately greater than :cpp:member:`p_model` in the library FITS file\\n\\n    .. cpp:member:: gsl_vector** modelFound\\n\\n        Found model of the pulse whose *energy* or *maxDER* is :cpp:member:`p_model`\\n\\n    .. cpp:member:: double p_model\\n\\n        Parameter (*energy* or *maxDER*) of the pulse whose model is being sought\\n\\n    .. cpp:member:: gsl_vector* modelIn1\\n\\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately lower than :cpp:member:`p_model` in the library FITS file\\n\\n    .. cpp:member:: double p_modelIn1\\n\\n        Parameter (*energy* or *maxDER*) immediately lower than :cpp:member:`p_model` in the library FITS file\\n\\n    .. cpp:member:: gsl_vector* modelIn2\\n\\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately greater than :cpp:member:`p_model` in the library FITS file\\n\\n    .. cpp:member:: double p_modelIn2\\n\\n        Parameter (*energy* or *maxDER*) immediately greater than :cpp:member:`p_model` in the library FITS file\\n\\n\"}, {\"line\": 4772, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: bool isNumber(string s)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function returns TRUE if the input string is a number or FALSE if not.\\n\\n    **Members/Variables**\\n\\n    string **s**\\n\\n        Input string\\n\\n    .. cpp:member:: string s\\n\\n        Input string\\n\\n\"}, {\"line\": 4795, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int loadRecord(TesRecord* record, double *time_record, gsl_vector **adc_double)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This fucntion loads the structure :cpp:member:`record` into the :cpp:member:`adc_double` GSL vector.\\n\\n    It checks if the record has been filled out with 0's => It only loads the first values (which are different from 0).\\n\\n    **Members/Variables**\\n\\n    TesRecord* **record**\\n\\n        Member of *TesRecord* structure that contains the input record\\n\\n    double **time_record**\\n\\n        Starting time of the record (output)\\n\\n    gsl_vector** **adc_double**\\n\\n        Storage of the record to be processed (input/output)\\n\\n    .. cpp:member:: TesRecord* record\\n\\n        Member of *TesRecord* structure that contains the input record\\n\\n    .. cpp:member:: double time_record\\n\\n        Starting time of the record (output)\\n\\n    .. cpp:member:: gsl_vector** adc_double\\n\\n        Storage of the record to be processed (input/output)\\n\\n\"}, {\"line\": 4830, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int lpf_boxcar (gsl_vector **invector, int szVct, int sampleRate)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function implements a low pass filtering as a box-car function in time.\\n\\n    The box-car function is a temporal average window:\\n\\n    .. math::\\n\\n        x_{i-1}=\\\\sum_{0}^{n-1}\\\\frac{I_i}{n}\\n\\n    .. math::\\n\\n        x_i=\\\\sum_{1}^{n}\\\\frac{I_i}{n}\\n\\n    If the cut frequency of the filter is :math:`\\\\mathit{f_c}`, the box-car length (*n*) is\\n\\n    .. math::\\n\\n        \\\\frac{1}{f_c}samprate\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Define the LPF (frequency domain) and the box-car function (time domain)\\n    - It is going to work with a longer vector to not have fake results for the last *boxLength* windows\\n    - Apply the box-car window by shifting it along the (lengthened) input vector\\n    - Free allocated GSL vectors\\n\\n    The function returns:\\n\\n      - 1: Function cannot run\\n      - 3: Cut-off frequency too high => Equivalent to not filter\\n      - 4: Cut-off frequency too low\\n\\n    **Members/Variables**\\n\\n    gsl_vector** **invector**\\n\\n        Input/Output GSL vector (non-filtered input vector/filtered input vector)\\n\\n    int **szVct**\\n\\n        Size of :cpp:member:`invector`\\n\\n    int **sampleRate**\\n\\n        Sampling rate (samples/s)\\n\\n    .. cpp:member:: gsl_vector** invector\\n\\n        Input/Output GSL vector (non-filtered input vector/filtered input vector)\\n\\n    .. cpp:member:: int szVct\\n\\n        Size of :cpp:member:`invector`\\n\\n    .. cpp:member:: int sampleRate\\n\\n        Sampling rate (samples/s)\\n\\n\"}, {\"line\": 4895, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int matrix2vector(gsl_matrix *matrixin, gsl_vector **vectorout)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function converts an input square matrix :math:`[n \\\\times n]` into an output :math:`n^2` vector. It puts the first row of the matrix (:math:`n` elements) in the first :math:`n` elements of the vector (from :math:`0` to :math:`n-1`), the second row of the matrix in the elements from :math:`n` to :math:`2n-1` of the vector and so on.\\n\\n    **Members/Variables**\\n\\n    gsl_matrix* **matrixin**\\n\\n        GSL input square matrix :math:`[n \\\\times n]`\\n\\n    gsl_vector** **vectorout**\\n\\n        GSL output vector whose length is :math:`n^2`\\n\\n    .. cpp:member:: gsl_matrix* matrixin\\n\\n        GSL input square matrix :math:`[n \\\\times n]`\\n\\n    .. cpp:member:: gsl_vector** vectorout\\n\\n        GSL output vector whose length is :math:`n^2`\\n\\n\"}, {\"line\": 4920, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int medianKappaClipping (gsl_vector *invector, double kappa, double stopCriteria, double nSigmas, int boxLPF, double *threshold)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function calculates a threshold in the first derivative of the record by using a Kappa-clipping method\\n    (replacing points beyond :math:`mean\\\\pm kappa \\\\cdot sigma` with the median).\\n\\n    Mean and sigma are calculated and values of :cpp:member:`invector` out of :math:`(mean+kappa \\\\cdot sigma,mean-kappa \\\\cdot sigma)` are replaced\\n    with the median (it is trying to look for the baseline). And this process is iteratively repeated until there are\\n    no points beyond :math:`mean \\\\pm kappa \\\\cdot sigma`. Finally, the threshold is calculated as :math:`mean+nSigmas \\\\cdot sigma` ('+' is used because\\n    `if there are pulses in the input invector they are always positive`).\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Calculate the median\\n    - Iterate until there are no points out of the maximum excursion ( :math:`kappa \\\\cdot sigma`)\\n    - Establish the threshold as mean+nSigmas*sigma\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        First derivative of the (filtered) record\\n\\n    double **kappa**\\n\\n        Value to establish the range around of the mean\\n\\n    double **stopCriteria**\\n\\n        It is given in %\\n\\n    double **nSigmas**\\n\\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\\\cdot sigma`\\n\\n    int **boxLPF**\\n\\n        Length of the low-pass filtering box-car\\n\\n    double* **threshold**\\n\\n        Calculated threshold\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        First derivative of the (filtered) record\\n\\n    .. cpp:member:: double kappa\\n\\n        Value to establish the range around of the mean\\n\\n    .. cpp:member:: double stopCriteria\\n\\n        It is given in %\\n\\n    .. cpp:member:: double nSigmas\\n\\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\\\cdot sigma`\\n\\n    .. cpp:member:: int boxLPF\\n\\n        Length of the low-pass filtering box-car\\n\\n    .. cpp:member:: double* threshold\\n\\n        Calculated threshold\\n\\n\"}, {\"line\": 4990, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int medianKappaClipping_noiseSigma (gsl_vector *invector, double kappa, double stopCriteria, double nSigmas, double *mean, double *sigma)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n\\n    This function provides the mean and the sigma of an input vector (with noise sigmas) by using a Kappa-clipping\\n    method (replacing points beyond :math:`mean\\\\pm kappa \\\\cdot sigma` with the median).\\n\\n    First, mean and sigma are calculated and :cpp:member:`invector` values out of :math:`(mean+kappa \\\\cdot sigma,mean-kappa \\\\cdot sigma)` are replaced\\n    with the median (it is trying to look for the baseline). And this process is iteratively repeated until there are\\n    no points beyond :math:`mean \\\\pm kappa \\\\cdot sigma`. Finally, the mean and sigma of the resulting vector are provided.\\n\\n    Steps:\\n\\n    - Declare variables\\n    - Calculate the median\\n    - Iterate until there are no points out of the maximum excursion ( :math:`kappa \\\\cdot sigma`)\\n    - Calculate mean and sigma\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **invector**\\n\\n        First derivative of the (filtered) record\\n\\n    double **kappa**\\n\\n        Value to establish the range around of the mean\\n\\n    double **stopCriteria**\\n\\n        It is given in %\\n\\n    double **nSigmas**\\n\\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\\\cdot sigma`\\n\\n    double* **mean**\\n\\n        Mean value of the :cpp:member:`invector` (no points beyond :math:`mean \\\\pm kappa \\\\cdot sigma`)\\n\\n    double* **sigma**\\n\\n        Sigma value of the :cpp:member:`invector` (no points beyond :math:`mean \\\\pm kappa \\\\cdot sigma`)\\n\\n    .. cpp:member:: gsl_vector* invector\\n\\n        First derivative of the (filtered) record\\n\\n    .. cpp:member:: double kappa\\n\\n        Value to establish the range around of the mean\\n\\n    .. cpp:member:: double stopCriteria\\n\\n        It is given in %\\n\\n    .. cpp:member:: double nSigmas\\n\\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\\\cdot sigma`\\n\\n    .. cpp:member:: int boxLPF\\n\\n        Length of the low-pass filtering box-car\\n\\n    .. cpp:member:: double* mean\\n\\n        Mean value of the :cpp:member:`invector` (no points beyond :math:`mean \\\\pm kappa \\\\cdot sigma`)\\n\\n    .. cpp:member:: double* sigma\\n\\n        Sigma value of the :cpp:member:`invector` (no points beyond :math:`mean \\\\pm kappa \\\\cdot sigma`)\\n\\n\"}, {\"line\": 5064, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void MyAssert(int expr, char* msg)\\n\\n    Located in file: *initSIRENA.c*\\n\\n    This function displays an error message if the condition in :cpp:member:`expr` is true.\\n\\n    **Members/Variables**\\n\\n    int **expr**\\n\\n        Condition to be true in order to display the error message\\n\\n    char* msg\\n\\n        Message to be displayed\\n\\n\"}, {\"line\": 5083, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_OptimalFilterSIRENA* newOptimalFilterSIRENA(int* const status)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    Constructor. It returns a pointer to an empty *OptimalFilterSIRENA* data structure.\\n\\n    **Members/Variables**\\n\\n    int* const **status**\\n\\n        Input/output status\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/output status\\n\\n\"}, {\"line\": 5100, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_PulsesCollection* newPulsesCollection(int* const status)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    Constructor. It returns a pointer to an empty *PulsesCollection* data structure.\\n\\n    **Members/Variables**\\n\\n    int* const **status**\\n\\n        Input/output status\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/output status\\n\"}, {\"line\": 5116, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_ReconstructInitSIRENA* newReconstructInitSIRENA(int* const status)\\n\\n    Located in file *integraSIRENA.cpp*\\n\\n    Constructor. It returns a pointer to an empty *ReconstructInitSIRENA* data structure.\\n\\n    **Members/Variables**\\n\\n    int* const **status**\\n\\n        Input/output status\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/output status\\n\\n\"}, {\"line\": 5133, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int noDetect(gsl_vector *der, ReconstructInitSIRENA *reconstruct_init, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl, gsl_vector **samp1DERgsl)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function runs if the starting time of the pulses are agiven as input parameters (:option:`tstartPulse1` != 0).\\n    It looks for the maximum of the derivative of the pulse and the average of the first 4 samples of the derivative of the pulse.\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **der**\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    int* **numberPulses**\\n\\n        Number of events\\n\\n    gsl_vector** **tstartgsl**\\n\\n        Starting time of the events (in samples)\\n\\n    gsl_vector** **flagTruncated**\\n\\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\\n\\n    gsl_vector** **maxDERgsl**\\n\\n        Maximum of the derivative of the event\\n\\n    gsl_vector** **samp1DERgsl**\\n\\n        Average of the first 4 samples of the derivative of the event\\n\\n    .. cpp:member:: gsl_vector* der\\n\\n        First derivative of the (low-pass filtered) record\\n\\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: int* numberPulses\\n\\n        Number of events\\n\\n    .. cpp:member:: gsl_vector** tstartgsl\\n\\n        Starting time of the events (in samples)\\n\\n    .. cpp:member:: gsl_vector** flagTruncated\\n\\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\\n\\n    .. cpp:member:: gsl_vector** maxDERgsl\\n\\n        Maximum of the derivative of the event\\n\\n    .. cpp:member:: gsl_vector** samp1DERgsl\\n\\n        Average of the first 4 samples of the derivative of the event\\n\\n\"}, {\"line\": 5204, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int obtainRiseFallTimes (gsl_vector *recordNOTFILTERED, double samprate, gsl_vector *tstartgsl, gsl_vector *tendgsl, gsl_vector *Bgsl, gsl_vector *Lbgsl, int numPulses, gsl_vector **tauRisegsl, gsl_vector **tauFallgsl)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function provides an estimation of the rise and fall time of the detected pulses in a record.\\n\\n    - Find the maximum of each pulse: *amax*\\n    - Baseline of each pulse: *abase*\\n    - Find the first sample in the rising part above the 10% and 50%: *t10* and *t50*\\n        - Line by using 2 points: *(t10,a10)* and *(t50,a50)*\\n        - *t0 (t0,abase)*\\n        - *tmax (tmax,amax)*\\n        - Rise time = *tmax-t0*\\n    - Find the first sample in the decreasing part below the 50% and 10%: *t50* and *t10*\\n        - Line by using 2 points: *(t50,a50)* and *(t10,a10)*\\n        - *t0 (t0,abase)*\\n        - *tmax (tmax,amax)*\\n        - Fall time = *t0-tmax*\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **recordNOTFILTERED**\\n\\n        Record neither low-pass filtered nor differentiated\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    gsl_vector* **tstartgsl**\\n\\n        Starting time of the detected pulses in the record (samples)\\n\\n    gsl_vector* **tendgsl**\\n\\n        Ending time of the detected pulses in the record (samples)\\n\\n    gsl_vector* **Bgsl**\\n\\n        In general, sum of the *Lb* digitized data samples of a pulse-free interval immediately before each pulse\\n\\n    gsl_vector* **Lbgsl**\\n\\n        Number of samples added in *Bgsl* for each pulse\\n\\n    int **numPulses**\\n\\n        Number of detected pulses in the record\\n\\n    gsl_vector** **tauRisegsl**\\n\\n        Rise time of the detected pulses in the record (seconds)\\n\\n    gsl_vector** **tauFallgsl**\\n\\n        Fall time of the detected pulses in the record (seconds)\\n\\n    .. cpp:member:: gsl_vector* recordNOTFILTERED\\n\\n        Record neither low-pass filtered nor differentiated\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: gsl_vector* tstartgsl\\n\\n        Starting time of the detected pulses in the record (samples)\\n\\n    .. cpp:member:: gsl_vector* tendgsl\\n\\n        Ending time of the detected pulses in the record (samples)\\n\\n    .. cpp:member:: gsl_vector* Bgsl\\n\\n        In general, sum of the *Lb* digitized data samples of a pulse-free interval immediately before each pulse\\n\\n    .. cpp:member:: gsl_vector* Lbgsl\\n\\n        Number of samples added in *Bgsl* for each pulse\\n\\n    .. cpp:member:: int numPulses\\n\\n        Number of detected pulses in the record\\n\\n    .. cpp:member:: gsl_vector** tauRisegsl\\n\\n        Rise time of the detected pulses in the record (seconds)\\n\\n    .. cpp:member:: gsl_vector** tauFallgsl\\n\\n        Fall time of the detected pulses in the record (seconds)\\n\\n\"}, {\"line\": 5298, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int parabola3Pts (gsl_vector *x, gsl_vector *y, double *a, double *b, double *c)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function calculates the equation of a parabola given 3 points.\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **x**\\n\\n        Input GSL with *x* vector\\n\\n    gsl_vector* **y**\\n\\n        Input GSL with *y* vector\\n\\n    double* **a**\\n\\n        Fit coefficient of the quadratic term\\n\\n    double* **b**\\n\\n        Fit coefficient of the linear term\\n\\n    double* **c**\\n\\n        Fit coefficient (independent term)\\n\\n    .. cpp:member:: gsl_vector* x\\n\\n        Input GSL with *x* vector\\n\\n    .. cpp:member:: gsl_vector* y\\n\\n        Input GSL with *y* vector\\n\\n    .. cpp:member:: double* a\\n\\n        Fit coefficient of the quadratic term\\n\\n    .. cpp:member:: double* b\\n\\n        Fit coefficient of the linear term\\n\\n    .. cpp:member:: double* c\\n\\n        Fit coefficient (independent term)\\n\\n\"}, {\"line\": 5347, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int polyFit(gsl_vector *x_fit, gsl_vector *y_fit, double *a, double *b, double *c)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function makes a polynomial fitting :math:`ax^2+bx+c` using the regression quadratic analysis. To measure how well model agrees with the data, the chi-square merit function is used, which in this case is\\n\\n    .. math::\\n\\n        \\\\chi^2 (a,b,c)= \\\\sum_{i=1}^{N}\\\\left(\\\\frac{y_i-a-bx_i-c{x_i}^2}{\\\\sigma_i}\\\\right)^2\\n\\n    This equation is minimized to determine *a*, *b* and *c*. Then\\n\\n    .. math::\\n\\n       \\\\begin{array}{ccc}\\n       S_{(x,x)}=\\\\sum{{x_i}^2}-\\\\frac{(\\\\sum{x_i})^2}{N} & S_{(x^2,y)}=\\\\sum{{x_i}^2y_i}-\\\\frac{\\\\sum{{x_i}^2}\\\\cdot\\\\sum{y_i}}{N}\\\\\\\\\\n       S_{(x,y)}=\\\\sum{x_iy_i}-\\\\frac{\\\\sum{x_i}\\\\cdot\\\\sum{y_i}}{N} & S_{(x^2,x^2)}=\\\\sum{{x_i}^4}-\\\\frac{\\\\left(\\\\sum{{x_i}^2}\\\\right)^2}{N}\\\\\\\\\\n       S_{(x,x^2)}=\\\\sum{{x_i}^3}-\\\\frac{\\\\sum{x_i}\\\\cdot\\\\sum{{x_i}^2}}{N} & \\\\\\\\\\n       \\\\end{array}\\n\\n    .. math::\\n\\n       a = \\\\frac{S_{(x^2,y)}S_{(x,x)}-S_{(x,y)}S_{(x,x^2)}}{S_{(x,x)}S_{(x^2,x^2)} -{\\\\vert S_{(x,x^2)} \\\\vert}^2}\\n\\n    .. math::\\n\\n       b = \\\\frac{S_{(x,y)}S_{(x^2,x^2)}-S_{(x^2,y)}S_{(x,x^2)}}{S_{(x,x)}S_{(x^2,x^2)} -{\\\\vert S_{(x,x^2)} \\\\vert}^2}\\n\\n    .. math::\\n\\n       c = \\\\frac{\\\\sum{y_i}}{N}-b\\\\frac{\\\\sum{x_i}}{N}-a\\\\frac{\\\\sum{{x_i}^2}}{N}\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **x_fit**\\n\\n        Input GSL with *x* vector\\n\\n    gsl_vector* **y_fit**\\n\\n        Input GSL with *y* vector\\n\\n    double* **a**\\n\\n        Fit coefficient of the quadratic term\\n\\n    double* **b**\\n\\n        Fit coefficient of the linear term\\n\\n    double* **c**\\n\\n        Fit coefficient (independent term)\\n\\n    .. cpp:member:: gsl_vector* x_fit\\n\\n        Input GSL with *x* vector\\n\\n    .. cpp:member:: gsl_vector* y_fit\\n\\n        Input GSL with *y* vector\\n\\n    .. cpp:member:: double* a\\n\\n        Fit coefficient of the quadratic term\\n\\n    .. cpp:member:: double* b\\n\\n        Fit coefficient of the linear term\\n\\n    .. cpp:member:: double* c\\n\\n        Fit coefficient (independent term)\\n\\n\"}, {\"line\": 5422, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int polyFitLinear(gsl_vector *x_fit, gsl_vector *y_fit, double *a, double *b)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function makes a linear fitting :math:`ax+b` using the regression linear analysis. To measure how well model agrees with the data, the chi-square merit function is used, which in this case is\\n\\n    .. math::\\n\\n        \\\\chi^2 (a,b)= \\\\sum_{i=1}^{N}\\\\left(\\\\frac{y_i-a-bx_i}{\\\\sigma_i}\\\\right)^2\\n\\n    This equation is minimized to determine *a* and *b*. Then\\n\\n    .. math::\\n\\n       a = \\\\frac{N \\\\sum{x_i y_i}- \\\\sum{x_i}\\\\sum{y_i}}{N \\\\sum{x_i^2} - {\\\\left(\\\\sum{x_i}\\\\right)}^2}\\n\\n    .. math::\\n\\n       b = \\\\frac{\\\\sum{y_i}}{N}-a \\\\frac{\\\\sum{x_i}}{N}\\n\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **x_fit**\\n\\n        Input GSL with *x* vector\\n\\n    gsl_vector* **y_fit**\\n\\n        Input GSL with *y* vector\\n\\n    double* **a**\\n\\n        Fit coefficient of the linear term\\n\\n    double* **b**\\n\\n        Fit coefficient (independent term)\\n\\n    .. cpp:member:: gsl_vector* x_fit\\n\\n        Input GSL with *x* vector\\n\\n    .. cpp:member:: gsl_vector* y_fit\\n\\n        Input GSL with *y* vector\\n\\n    .. cpp:member:: double* a\\n\\n        Fit coefficient of the linear term\\n\\n    .. cpp:member:: double* b\\n\\n        Fit coefficient (independent term)\\n\\n\"}, {\"line\": 5478, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void print_error( const char* const func, string message, int status)\\n\\n    Located in file: *genutils.cpp*\\n\\n    This function prints out error messages.\\n\\n    **Members/Variables**\\n\\n    const char* const **func**\\n\\n        Function name whose error is printed\\n\\n    string **msg**\\n\\n        Error message to be printed\\n\\n    int **status**\\n\\n        Status\\n\\n    .. cpp:member:: const char* const func\\n\\n        Function name whose error is printed\\n\\n    .. cpp:member:: string msg\\n\\n        Error message to be printed\\n\\n    .. cpp:member:: int status\\n\\n        Status\\n\\n\"}, {\"line\": 5511, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int procRecord (ReconstructInitSIRENA** reconstruct_init, double tstartRecord, double samprate, fitsfile *dtcObject, gsl_vector *record, gsl_vector *recordWithoutConvert2R, PulsesCollection *foundPulses, long num_previousDetectedPulses, int pixid, gsl_vector *phid, int oscillations, int nrecord, double tstartPrevPulse)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function processes the input record (detecting the pulses):\\n\\n    1) Declare and initialize variables\\n\\n    2) Allocate GSL vectors\\n\\n    3) (Low-pass filtering and) differentiation\\n\\n    4) If there are weird oscillations in the record, it is not processed => numPulses = 0\\n\\n    5) Find the events (pulses) in the record\\n\\n       - If production mode:\\n\\n            - No detect if :option:`tstartPulse1` != 0: 'noDetect'\\n            - Detect (:option:`tstartPulse1` != 0):\\n\\n                - 'InitialTriggering'\\n                - 'FindSecondaries' (:option:`detectionMode` = AD) or 'FindSecondariesSTC' (:option:`detectionMode` = STC)\\n\\n       - If calibration mode: 'findPulsesCAL'\\n\\n    6) Calculate the end time of the found pulses and check if the pulse is saturated\\n\\n    7) Calculate the baseline (mean and standard deviation) before a pulse (in general *before*) => To be written in **BSLN** and **RMSBSLN** columns in the output FITS file\\n\\n    8) Obtain the approximate rise and fall times of each pulse\\n\\n    9) Load the found pulses data in the input/output *foundPulses* structure\\n\\n    10) Write test info (if *reconstruct_init->intermediate* = 1)\\n\\n    11) Write pulses info in intermediate output FITS file (if *reconstruct_init->intermediate* = 1)\\n\\n    12) Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    double **tstartRecord**\\n\\n        Starting time of the record (in order to calculate absolute times)\\n\\n    double **samprate**\\n\\n        Sampling rate (in order to low-pass filter)\\n\\n    fitsfile* **dtcObject**\\n\\n        Object which contains information of the intermediate FITS file (to be written if :option:`intermediate` = 1)\\n\\n    gsl_vector* **record**\\n\\n        GSL vector with signal values of input record\\n\\n    gsl_vector* **recordWithoutConvert2R**\\n\\n        GSL vector with original signal values of input record (without being converted to R space)\\n\\n    PulsesCollection* **foundPulses**\\n\\n        Input/output structure where the info about found pulses is stored\\n\\n    long **num_previousDetectedPulses**\\n\\n        Number of previous detected pulses (to know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name)\\n\\n    int **pixid**\\n\\n        Pixel ID (from the input file) to be propagated\\n\\n    gsl_vector* **phid**\\n\\n        Photon ID (from the input file) to be propagated\\n\\n    int **oscillations**\\n\\n        1 (there are weird oscillations in the record) or 0 (record without weird oscillations)\\n\\n    int **nrecord**\\n\\n        Current record index\\n\\n    double **tstartPrevPulse**\\n\\n        tstart of the previous pulse (last pulse of the previous record) (seconds)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: double tstartRecord\\n\\n        Starting time of the record (in order to calculate absolute times)\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate (in order to low-pass filter)\\n\\n    .. cpp:member:: fitsfile* dtcObject\\n\\n        Object which contains information of the intermediate FITS file (to be written if :option:`intermediate` = 1)\\n\\n    .. cpp:member:: gsl_vector* record\\n\\n        GSL vector with signal values of input record\\n\\n    .. cpp:member:: gsl_vector* recordWithoutConvert2R\\n\\n        GSL vector with original signal values of input record (without being converted to R space)\\n\\n    .. cpp:member:: PulsesCollection* foundPulses\\n\\n        Input/output structure where the info about found pulses is stored\\n\\n    .. cpp:member:: long num_previousDetectedPulses\\n\\n        Number of previous detected pulses (to know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name)\\n\\n    .. cpp:member:: int pixid\\n\\n        Pixel ID (from the input file) to be propagated\\n\\n    .. cpp:member:: gsl_vector* phid\\n\\n        Photon ID (from the input file) to be propagated\\n\\n    .. cpp:member:: int oscillations\\n\\n        1 (there are weird oscillations in the record) or 0 (record without weird oscillations)\\n\\n    .. cpp:member:: int nrecord\\n\\n        Current record index\\n\\n    .. cpp:member:: double tstartPrevPulse\\n\\n        tstart of the previous pulse (last pulse of the previous record) (seconds)\\n\\n\"}, {\"line\": 5658, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int pulseGrading(ReconstructInitSIRENA *reconstruct_init, int tstart, int grade1, int grade2, int *pulseGrade, long *OFlength, int nrecord)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function provides the pulse grade (Rejected=-1, HighRes=1, MidRes=2, LimRes=3, LowRes=4) and the optimal filter length by taking into account the info read from the XML file and the :option:`OFStrategy` (**FREE**, **BYGRADE** or **FIXED**).  (Pileup=-2 not used)\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    int **tstart**\\n\\n        Start time (samples)\\n\\n    int **grade1**\\n\\n        Pulse duration (length of optimal filter applied)\\n\\n    int **grade2**\\n\\n        Difference between the start time of the pulse and the start time of the previous pulse\\n\\n    int* **pulseGrade**\\n\\n        Pulse grade (output)\\n\\n    long* **OFlength**\\n\\n        Optimal filter length (= :option:`OFLength` only if :option:`OFStrategy` = **FIXED** and :option:`OFLength` <= grade1) (output)\\n\\n    int nrecord\\n\\n        Current record index (to know the particular record where there could be more than one pulse => message)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: int grade1\\n\\n        Pulse duration (length of optimal filter applied)\\n\\n    .. cpp:member:: int grade2\\n\\n        Difference between the start time of the pulse and the start time of the previous pulse\\n\\n    .. cpp:member:: int OFlength_strategy\\n\\n        Same as :option:`OFStrategy` (input)\\n\\n    .. cpp:member:: int* pulseGrade\\n\\n        Pulse grade (output)\\n\\n    .. cpp:member:: long* OFlength\\n\\n        Optimal filter length (= :option:`OFLength` only if :option:`OFStrategy` = **FIXED** and :option:`OFLength` <= grade1) (output)\\n\\n    .. cpp:member:: int nrecord\\n\\n        Current record index (to know the particular record where there could be more than one pulse => message)\\n\\n\"}, {\"line\": 5727, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int readAddSortParams(ReconstructInitSIRENA *reconstruct_init, fitsfile **inLibObject, double samprate, int eventcntLib, double estenergy, gsl_vector *pulsetemplate, gsl_vector *pulsetemplate_B0, gsl_matrix *covariance, gsl_matrix *weight, gsl_vector *pulsetemplateMaxLengthFixedFilter, gsl_vector *pulsetemplateMaxLengthFixedFilter_B0)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function reads the library data, add new data (a new row) and sort the data according to an energy-ascending order.\\n\\n    - Declare variables\\n    - Load values already in the library\\n    - Add new values\\n    - Realign\\n    - Add intermeadiate values\\n    - Recalculate intermediate values of some new pairs\\n    - Write values in the library\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    fitsfile** **inLibObject**\\n\\n        FITS object containing information of the library FITS file\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    int **eventcntLib**\\n\\n        Number of templates in the library\\n\\n    double **estenergy**\\n\\n        Pulse height of the template whose energy is going to be added to the library\\n\\n    gsl_vector* **pulsetemplate**\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library\\n\\n    gsl_vector* **pulsetemplate_B0**\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\\n\\n    gsl_matrix* **covariance**\\n\\n        GSL matrix with covariance matrix of the energy which is going to be added to the library\\n\\n    gsl_matrix* **weight**\\n\\n        GSL matrix with weight matrix of the energy which is going to be added to the library\\n\\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter**\\n\\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library\\n\\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter_B0**\\n\\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library (without baseline)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: fitsfile** inLibObject\\n\\n        FITS object containing information of the library FITS file\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: int eventcntLib\\n\\n        Number of templates in the library\\n\\n    .. cpp:member:: double estenergy\\n\\n        Pulse height of the template whose energy is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplate\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplate_B0\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\\n\\n    .. cpp:member:: gsl_matrix* covariance\\n\\n        GSL matrix with covariance matrix of the energy which is going to be added to the library\\n\\n    .. cpp:member:: gsl_matrix* weight\\n\\n        GSL matrix with weight matrix of the energy which is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter\\n\\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter_B0\\n\\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library (without baseline)\\n\\n\"}, {\"line\": 5833, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int readFitsComplex(IOData obj, gsl_matrix **result)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    This function reads values of a complex column of a FITS file. After that, the function puts them into a GSL matrix for an easier processing.\\n\\n    **Members/Variables**\\n\\n    IOData **obj**\\n\\n        Input object for complex FITS column\\n\\n    gsl_matrix** **result**\\n\\n        Output GSL matrix\\n\\n    .. cpp:member:: IOData obj\\n\\n        Input object for complex FITS column\\n\\n    .. cpp:member:: gsl_matrix** result\\n\\n        Output GSL matrix\\n\\n\"}, {\"line\": 5858, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int readFitsSimple(IOData obj, gsl_vector **result)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    This function reads values of a simple column of a FITS file. After that, the function puts them into a GSL vector for an easier processing.\\n\\n    **Members/Variables**\\n\\n    IOData **obj**\\n\\n        Input object for simple FITS column\\n\\n    gsl_vector** **result**\\n\\n        Output GSL vector\\n\\n    .. cpp:member:: IOData obj\\n\\n        Input object for simple FITS column\\n\\n    .. cpp:member:: gsl_vector** result\\n\\n        Output GSL vector\\n\"}, {\"line\": 5882, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: extern_C_void reconstructRecordSIRENA(TesRecord* record, int trig_reclength, TesEventList* event_list, ReconstructInitSIRENA* reconstruct_init,  int lastRecord, int nRecord, PulsesCollection **pulsesAll, int* const status)\\n\\n    Located in file: *integraSIRENA.cpp*\\n\\n    This function is the main wrapper function to detect, grade and calculate the energy of the pulses in the input records.\\n\\n    - Inititalize *PulsesCollection* structure\\n    - Check consistency of some input parameters\\n    - If first record, read the necessary keywords and columns from the input file in order to convert from current to quasi-resistance space\\n    - In case of running with threading\\n    - Detect pulses in input record (:cpp:func:`runDetect`).\\n    - If reconstruction and not PCA:\\n        - Filter and calculate energy of pulses (:cpp:func:`runEnergy`)\\n    - Fill in the :cpp:member:`pulsesAll` structure\\n    - Populate output event list with pulses energies, arrival time and grading\\n\\n    **Members/Variables**\\n\\n    TesRecord* **record**\\n\\n        Instance of *TesRecord* structure that contains the input record\\n\\n    int **trig_reclength**\\n\\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\\n\\n    TesEventList* **event_list**\\n\\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\\n\\n    ReconstructInitSIRENA* **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    int **lastRecord**\\n\\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\\n\\n    int **nRecord**\\n\\n        Input record number\\n\\n    PulsesCollection** **pulsesAll**\\n\\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record.\\n\\n    int* const **status**\\n\\n        Input/output status\\n\\n    .. cpp:member:: TesRecord* record\\n\\n        Instance of *TesRecord* structure that contains the input record\\n\\n    .. cpp:member:: int trig_reclength\\n\\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\\n\\n    .. cpp:member:: TesEventList* event_list\\n\\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\\n\\n     .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: int lastRecord\\n\\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\\n\\n    .. cpp:member:: int nRecord\\n\\n        Input record number\\n\\n    .. cpp:member:: int lastRecord\\n\\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\\n\\n    .. cpp:member:: int nRecord\\n\\n        Input record number\\n\\n    .. cpp:member:: PulsesCollection** pulsesAll\\n\\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record.\\n\\n    .. cpp:member:: int* const status\\n\\n        Input/output status\\n\\n\"}, {\"line\": 5973, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int RS_filter(gsl_vector *vector, double lrs, double lb, double B, double *pulseheight)\\n\\n    Located in file: *pulseprocess.cpp*\\n\\n    This function uses the running sum filter to find the pulse height. It always works in time domain.\\n\\n    A running sum filter, *RS*, is the sum of :cpp:member:`lrs` digitized data samples. It is continuously updated upon the arrival of\\n    new data point. Simultaneously a baseline filter, :cpp:member:`B`, is the sum of :cpp:member:`lb` digitized data samples without pulses. The\\n    algorithm looks for the time when *RS/lrs* reaches its maximum. At that time *RS* is stored, :math:`RS_{max}`, and the baseline\\n    is scaled with :cpp:member:`lrs`, *Bp* ( :math:`Bp=B \\\\cdot lrs/lb`). Then, the pulse height related to the pulse pseudoenergy is given by:\\n\\n    .. math::\\n\\n        Pulse height=\\\\frac{RS_{max}-B_p}{lrs}\\n\\n    **Members/Variables**\\n\\n    gsl_vector* **vector**\\n\\n        Not filtered pulse (extracted from the record in :cpp:func:`getPulseHeight`)\\n\\n    double **lrs**\\n\\n        Running sum length (samples)\\n\\n    double **lb**\\n\\n        Baseline averaging length (samples)\\n\\n    double **B**\\n\\n        In general, sum of the :cpp:member:`lb` digitized data samples of a pulse-free interval immediately before the current pulse\\n\\n    double* **pulseheight**\\n\\n        Pulseheight of the input pulse\\n\\n    .. cpp:member:: gsl_vector* vector\\n\\n        Not filtered pulse (extracted from the record in :cpp:func:`getPulseHeight`)\\n\\n    .. cpp:member:: double lrs\\n\\n        Running sum length (samples)\\n\\n    .. cpp:member:: double lb\\n\\n        Baseline averaging length (samples)\\n\\n    .. cpp:member:: double B\\n\\n        In general, sum of the :cpp:member:`lb` digitized data samples of a pulse-free interval immediately before the current pulse\\n\\n    .. cpp:member:: double* pulseheight\\n\\n        Pulseheight of the input pulse\\n\\n\"}, {\"line\": 6031, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void runDetect(TesRecord* record, int trig_reclength, int lastRecord, int nrecord, PulsesCollection *pulsesAll, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function is responsible for the **detection** in SIRENA, record by record. It is used both for library creation and energy reconstruction runnings.\\n\\n    Conditions:\\n\\n        - If first record and reconstruction mode  =>  Run :cpp:func:`filderLibrary`\\n\\n        - If last record and calibration mode => Run :cpp:func:`calculateTemplate` and :cpp:func:`writeLibrary`\\n\\n        - If :option:`intermediate` = 1 => :cpp:func:`writeTestInfo` and :cpp:func:`writePulses`\\n\\n        - If calibration mode => Find pulses by using :cpp:func:`findPulsesCAL`\\n\\n        - If reconstruction mode => Find pulses by :cpp:func:`InitialTriggering` and :cpp:func:`FindSecondaries` or :cpp:func:`FindSecondariesSTC`\\n\\n    Steps:\\n\\n        1) Create library file if it is necessary: calibration and last record (run :cpp:func:`createLibrary`)\\n\\n        2) Create intermediate output FITS file if required (:cpp:func:`createDetectFile`)\\n\\n        3) (Filter and) differentiate the *models* of the library (only for the first record in reconstruction mode). Run  (:cpp:func:`filderLibrary`)\\n\\n        4) Store the input record in *invector* (:cpp:func:`loadRecord`)\\n\\n        5) Detect weird oscillations in some GSFC records providing a warning (no pulses detected in that record)\\n\\n        6) Convert *I* into *R* if :option:`EnergyMethod` = **I2R** or **I2RFITTED** (:cpp:func:`convertI2R`)\\n\\n        7) Process each record (:cpp:func:`proceRecord`):\\n\\n                - (Low-pass filter and) differentiate\\n                - Find pulses\\n                - Load the found pulses data in the input/output *foundPulses* structure\\n                - Write test info in intermediate output FITS file if :option:`intermediate` = 1 (:cpp:func:`writeTestInfo`)\\n                - Write pulses info in intermediate output FITS file if :option:`intermediate` = 1 (:cpp:func:`writePulses`)\\n\\n        **From this point forward, I2R and I2RFITTED are completely equivalent to OPTFILT**\\n\\n        8) If last record in calibration mode run:\\n\\n                * :cpp:func:`calculateTemplate` (and :cpp:func:`weightMatrix`)\\n                * :cpp:func:`writeLibrary`\\n\\n        9) If last record and PCA:\\n\\n                - In order to not have restrictions when providing (\\\\*reconstruct_init)->energyPCAx\\n                - Covariance data\\n                - Eigenvalues and eigenvectors\\n                - RSxN (S=2)\\n                - AE straight line: Pto0(x,y) and Pto10(x,y)\\n                - Calculus of the rotation angle\\n                - Rotation\\n                - Histograms of the two clusters (two energies)\\n                - Conversion factor from arbitrary unit to eV\\n                - Energy calculation\\n\\n        10) Close intermediate output FITS file if it is necessary\\n\\n    **Members/Variables**\\n\\n    TesRecord* **record**\\n\\n        Member of *TesRecord* structure that contains the input record\\n\\n    int **trig_reclength**\\n\\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\\n\\n    int **lastRecord**\\n\\n        Integer to verify whether *record* is the last one (=1) to be read (and thus if library file will be created)\\n\\n    PulsesCollection* **pulsesAll**\\n\\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    PulsesCollection** **pulsesInRecord**\\n\\n        Member of *PulsesCollection* structure to store all the pulses found in the input record\\n\\n    .. cpp:member:: TesRecord* record\\n\\n        Member of *TesRecord* structure that contains the input record\\n\\n    .. cpp:member:: int trig_reclength\\n\\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\\n\\n    .. cpp:member:: int lastRecord\\n\\n        Integer to verify whether *record* is the last one (=1) to be read (and thus if library file will be created)\\n\\n    .. cpp:member:: int nrecord\\n\\n        Current record index (to know the particular record where there is a weird oscillation)\\n\\n    .. cpp:member:: PulsesCollection* pulsesAll\\n\\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: PulsesCollection** pulsesInRecord\\n\\n        Member of *PulsesCollection* structure to store all the pulses found in the input record\\n\\n\"}, {\"line\": 6148, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void runEnergy(TesRecord* record, int lastRecord, int nrecord, int trig_reclength, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord, PulsesCollection *pulsesAll)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function calculates the pulse energy applying different methods (from :option:`EnergyMethod` and :option:`OFNoise`).\\n    It only runs in RECONSTRUCTION mode (except to :option:`EnergyMethod` = **PCA**).\\n\\n    - Declare variables\\n    - Store the :cpp:member:`record` in *invector* (:cpp:func:`loadRecord`)\\n    - Subtract the baseline if :option:`EnergyMethod` = **OPTFILT** and *runF0orB0val* = 1 (:option:`FilterMethod` = **B0**)\\n    - Subtract the baseline if :option:`EnergyMethod` = **INTCOVAR**\\n    - Check Quality\\n    - For each pulse:\\n\\n        - Establish the pulse grade (for example VeryHighRes=1, HighRes=2, IntRes=3, MedRes=4, LimRes=5, LowRes=6, Rejected=-1) and the optimal filter length\\n        - Pulse: Load the proper piece of the record in *pulse*\\n        - Get the low resolution energy estimator by filtering with a 8-samples-length (with lags) filter:\\n            - Load the low resolution pulse in *pulse_lowres*\\n            - Get the filter\\n            - Calculate the low resolution estimator\\n        - If :option:`OFIter` = 1, in the first iteration ( *numiteration* = 0) the values of *maxDER* and *maxDERs* are used in\\n          :cpp:func:`find_matchedfilterSAB`, :cpp:func:`find_optimalfilterSAB` or :cpp:func:`find_Esboundary` getting the values of the *energies* which straddle the *maxDER* (*Ealpha* and *Ebeta*). It will have more iterations if the calculated *energy* is out of *[Ealpha, Ebeta]*. If *energy* is in *[Ealpha, Ebeta]* the iterative process stops.\\n\\n                - If :option:`EnergyMethod` = **OPTFILT** (or **I2R**, **I2RFITTED**) and *reconstruct_init->OFLib* = 0 and :option:`OFNoise` = **NSD**:\\n\\n                    - Find the matched filter and load it in *filter* (:cpp:func:`find_matchedfilterSAB`)\\n                    - Calculate the optimal filter\\n\\n                - If :option:`EnergyMethod` = **OPTFILT** (or **I2R**, **I2RFITTED**) and *reconstruct_init->OFLib* = 1 and :option:`OFNoise` = **NSD**:\\n\\n                    - If it is necessary, choose the base-2 system value closest (lower than or equal) to the pulse length\\n                    - Find the optimal filter and load it in *filter* (:cpp:func:`find_optimalfilterSAB`)\\n\\n                - If :option:`EnergyMethod` = **INTCOVAR** or **COVAR**:\\n\\n                    - Get the indexes of the two energies which straddle the pulse (:cpp:func:`find_Esboundary`)\\n                    - If :option:`EnergyMethod` = **COVAR** and *reconstruct_init->OFLib* = 1:\\n\\n                       - Choose the base-2 system value closest (lower than or equal) to the pulse length\\n                       - :cpp:func:`find_prclcov` to find the appropriate values of the *PRCLCOV* HDU (**PCOVx** columns)\\n\\n                - If :option:`EnergyMethod` = **OPTFILT** (or **I2R**, **I2RFITTED**) and *reconstruct_init->OFLib* = 1 and :option:`OFNoise` = **WEIGHTN**:\\n\\n                    - Choose the base-2 system value closest (lower than or equal) to the pulse length\\n                    - :cpp:func:`find_prclofwn` to find the appropriate values of the *PRCLOFWN* HDU (**OFWNx** columns)\\n\\n                - Subtract the sum of the filter if :option:`EnergyMethod` = **OPTFILT**, :option:`OFNoise` = **NSD**, :option:`FilterDomain` = **T**, 0-padding and :option:`Sum0Filt` =1\\n                - Calculate the energy of each pulse\\n                - If using lags, it is necessary to modify the tstart of the pulse\\n        - In order to subtract the pulse model, it has to be located in the tstart with jitter and know its values in the digitized samples\\n        - Subtract the pulse model from the record\\n        - Write info of the pulse in the output intemediate file if :option:`intermediate` = 1\\n    - Free allocated GSL vectors\\n\\n    **Members/Variables**\\n\\n    TesRecord** **record**\\n\\n        Structure that contains the input ADC record\\n\\n    int **lastRecord**\\n\\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\\n\\n    int **nRecord**\\n\\n        Input record number\\n\\n    int **trig_reclength**\\n\\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    PulsesCollection* **pulsesInRecord**\\n\\n        Collection of pulses found in the current record\\n\\n     PulsesCollection* **pulsesAll**\\n\\n        Member of *PulsesCollection* structure to store all the pulses found in the input FITS file. To know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name\\n\\n    .. cpp:member:: TesRecord** record\\n\\n        Structure that contains the input ADC record\\n\\n     .. cpp:member:: int **lastRecord**\\n\\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\\n\\n    .. cpp:member:: int **nRecord**\\n\\n        Input record number\\n\\n    .. cpp:member:: int trig_reclength\\n\\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: PulsesCollection* pulsesInRecord\\n\\n        Collection of pulses found in the current record\\n\\n    .. cpp:member::  PulsesCollection* pulsesAll\\n\\n        Member of *PulsesCollection* structure to store all the pulses found in the input FITS file. To know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name\\n\\n\"}, {\"line\": 6261, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void th_runEnergy(TesRecord* record, int nrecord, int trig_reclength, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord, PulsesCollection *pulsesAll)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function is responsible for the **reconstruction** in SIRENA (instead of :cpp:func:`runEnergy`) when the **THREADING** running option has been chosen (hardcoded at this moment).\\n\"}, {\"line\": 6269, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int shiftm(gsl_vector *vectorin, gsl_vector *vectorout, int m)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function returns as :cpp:member:`vectorout` the :cpp:member:`vectorin` delayed :cpp:member:`m` samples.\\n\\n    **Members/Variables**\\n\\n    int **m**\\n\\n        Delay in samples\\n\\n    gsl_vector* **vectorin**\\n\\n        GSL vector with input vector\\n\\n    gsl_vector* **vectorout**\\n\\n        GSL with input vector (:cpp:member:`vectorin`) delayed :cpp:member:`m` samples\\n\\n    .. cpp:member:: int m\\n\\n        Delay in samples\\n\\n    .. cpp:member:: gsl_vector* vectorin\\n\\n        GSL vector with input vector\\n\\n    .. cpp:member:: gsl_vector* vectorout\\n\\n        GSL with input vector (:cpp:member:`vectorin`) delayed :cpp:member:`m` samples\\n\\n\"}, {\"line\": 6302, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int shift_m(gsl_vector *vectorin, gsl_vector *vectorout, int m)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function returns as :cpp:member:`vectorout` the :cpp:member:`vectorin` moved forward by :cpp:member:`m` samples.\\n\\n    **Members/Variables**\\n\\n    int **m**\\n\\n        Advance in samples\\n\\n    gsl_vector* **vectorin**\\n\\n        GSL vector with input vector\\n\\n    gsl_vector* **vectorout**\\n\\n        GSL with input vector (:cpp:member:`vectorin`) moved forward :cpp:member:`m` samples\\n\\n    .. cpp:member:: int m\\n\\n        Advance in samples\\n\\n    .. cpp:member:: gsl_vector* vectorin\\n\\n        GSL vector with input vector\\n\\n    .. cpp:member:: gsl_vector* vectorout\\n\\n        GSL with input vector (:cpp:member:`vectorin`) moved forward :cpp:member:`m` samples\\n\\n\"}, {\"line\": 6335, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: char* subString (const char* input, int offset, int len, char* dest)\\n\\n    Located in file: *initSIRENA.cpp*\\n\\n    This function extracts some elements from an array of characters.\\n\\n    **Members/Variables**\\n\\n    const char* **input**\\n\\n        Array of characters from which some elements are extracted\\n\\n    int **offset**\\n\\n        Offset\\n\\n    int **len**\\n\\n        Length (number of elements to extract)\\n\\n    char* **dest**\\n\\n        Array of characters into which the extracted characters are written\\n\\n    .. cpp:member:: const char* input\\n\\n        Array of characters from which some elements are extracted\\n\\n    .. cpp:member:: int offset\\n\\n        Offset\\n\\n    .. cpp:member:: int len\\n\\n        Length (number of elements to extract)\\n\\n    .. cpp:member:: char* dest\\n\\n        Array of characters into which the extracted characters are written\\n\\n\"}, {\"line\": 6378, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int teslib_main()\\n\\n    Located in file: *teslib.c*\\n\\n    This function is mainly a wrapper to pass a data file to the SIRENA tasks in order to build a library that will be used to reconstruct the energies.\\n\\n    Steps:\\n\\n    - Register HEATOOL\\n    - Reading all programm parameters by using PIL\\n    - Check preBuffer values if the library already exists\\n    - Read XML info\\n    - :cpp:func:`getSamplingrate_trigreclength` => Obtain the *trig_reclength* and the sampling rate\\n    - Sixt standard keywords structure\\n    - Open output FITS file\\n    - Initialize data structures\\n    - Read the grading data from the XML file and store it in *reconstruct_init_sirena->grading*\\n    - Build up TesEventList\\n    - Call SIRENA to build the library\\n    - Save GTI extension to event file\\n    - Free memory\\n\\n    The user must supply the following input parameters (*teslib.par* file).\\n\\n    Parameters:\\n\\n    char **RecordFile**\\n\\n        Record FITS file\\n\\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\\n\\n    char **TesEventFile**\\n\\n        Output event list file\\n\\n    char **LibraryFile**\\n\\n        File with calibration library\\n\\n    char **NoiseFile**\\n\\n        Noise FITS file with noise spectrum\\n\\n    char **XMLFile**\\n\\n        XML input FITS file with instrument definition\\n\\n    char **preBuffer**\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\\n                                                                                        preBuffer=filtlen-post\\n\\n    int **EventListSize**\\n\\n        Default size of the event list per record\\n\\n    char **clobber**\\n\\n        Overwrite or not output files if exist (yes/no)\\n\\n    char **history**\\n\\n        Write program parameters into output file\\n\\n    double **scaleFactor**\\n\\n        Detection scale factor for initial filtering\\n\\n    int **samplesUp**\\n\\n        Number of consecutive samples up for threshold trespassing\\n\\n    double **nSgms**\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\\n\\n    double **LrsT**\\n\\n        Running sum length for the RS raw energy estimation (seconds)\\n\\n    double **LbT**\\n\\n        Baseline averaging length (seconds)\\n\\n    double **monoenergy**\\n\\n        Monochromatic energy of the pulses in the input FITS file in eV\\n\\n    char **addCOVAR**\\n\\n        Add or not pre-calculated values related to COVAR reconstruction method in the library file (yes/no)\\n\\n    char **addINTCOVAR**\\n\\n        Add or not pre-calculated values related to INTCOVAR reconstruction method in the library file (yes/no)\\n\\n    char **addOFWN**\\n\\n         Add or not or not pre-calculated values in the library file related to Optimal Filtering by using Weight Noise matrix in the library file(yes/no)\\n\\n    int **largeFilter**\\n\\n        Length of the longest fixed filter\\n\\n    char **EnergyMethod**\\n\\n        Energy calculation Method: **OPTFILT**, **I2R** or **I2RFITTED**\\n\\n    double **Ifit**\\n\\n        Constant to apply the I2RFITTED conversion\\n\\n    char **FilterMethod**\\n\\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\\n\\n    int **intermediate**\\n\\n        Write or not intermediate files (1/0)\\n\\n    char **detectFile**\\n\\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\\n\\n    char **tstartPulse1**\\n\\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\\n\\n    int **tstartPulse2**\\n\\n        Tstart (samples) of the second pulse\\n\\n    int **tstartPulse3**\\n\\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\\n\\n    .. cpp:member:: char RecordFile\\n\\n        Record FITS file\\n\\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\\n\\n    .. cpp:member:: char TesEventFile\\n\\n        Output event list file\\n\\n    .. cpp:member:: char LibraryFile\\n\\n        File with calibration library\\n\\n    .. cpp:member:: char NoiseFile\\n\\n        Noise FITS file with noise spectrum\\n\\n    .. cpp:member:: char XMLFile\\n\\n        XML input FITS file with instrument definition\\n\\n    .. cpp:member:: char preBuffer\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\\n                                                                                        preBuffer=filtlen-post\\n\\n    .. cpp:member:: int EventListSize\\n\\n        Default size of the event list\\n\\n    .. cpp:member:: char clobber\\n\\n        Overwrite or not output files if exist (yes/no)\\n\\n    .. cpp:member:: char history\\n\\n        Write program parameters into output file\\n\\n    .. cpp:member:: double scaleFactor\\n\\n        Detection scale factor for initial filtering\\n\\n    .. cpp:member:: int samplesUp\\n\\n        Number of consecutive samples up for threshold trespassing\\n\\n    .. cpp:member:: double nSgms\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\\n\\n    .. cpp:member:: double LrsT\\n\\n        Running sum length for the RS raw energy estimation (seconds)\\n\\n    .. cpp:member:: double LbT\\n\\n        Baseline averaging length (seconds)\\n\\n    .. cpp:member:: double monoenergy\\n\\n        Monochromatic energy of the pulses in the input FITS file in eV\\n\\n    .. cpp:member:: char addCOVAR\\n\\n        Add or not pre-calculated values in the library file related to COVAR reconstruction method in the library file (yes/no)\\n\\n     .. cpp:member:: char addINTCOVAR\\n\\n        Add or not pre-calculated values in the library file related to INTCOVAR reconstruction method in the library file (yes/no)\\n\\n    .. cpp:member:: char addOFWN\\n\\n        Add or not pre-calculated values in the library file related to Optimal Filtering by using Weight Noise matrix  in the library file (yes/no)\\n\\n    .. cpp:member:: int largeFilter\\n\\n        Length of the longest fixed filter\\n\\n    .. cpp:member:: char EnergyMethod\\n\\n        Energy calculation Method: **OPTFILT**, **I2R** or **I2RFITTED**\\n\\n    .. cpp:member:: double Ifit\\n\\n        Constant to apply the I2RFITTED conversion\\n\\n    .. cpp:member:: char FilterMethod\\n\\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\\n\\n    .. cpp:member:: int intermediate\\n\\n        Write or not intermediate files (1/0)\\n\\n    .. cpp:member:: char detectFile\\n\\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\\n\\n    .. cpp:member:: char **tstartPulse1**\\n\\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\\n\\n    .. cpp:member:: int **tstartPulse2**\\n\\n        Tstart (samples) of the second pulse\\n\\n    .. cpp:member:: int **tstartPulse3**\\n\\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\\n\\n\"}, {\"line\": 6631, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int tesrecons_main()\\n\\n    Located in file: *tesrecons.c*\\n\\n    This function is mainly a wrapper to pass a data file to the SIRENA tasks in order to reconstruct the energies.\\n\\n    Steps:\\n\\n    - Register HEATOOL\\n    - Reading all programm parameters by using PIL\\n    - Read XML info\\n    - :cpp:func:`getSamplingrate_trigreclength` => Obtain the *trig_reclength* and the sampling rate\\n    - Sixt standard keywords structure\\n    - Open output FITS file\\n    - Initialize data structures for pulse filtering\\n    - Read the grading data from the XML file and store it in *reconstruct_init_sirena->grading*\\n    - Build up TesEventList\\n    - Call SIRENA to build reconstruct the energies\\n    - Save GTI extension to event file\\n    - Free memory\\n\\n    The user must supply the following input parameters (*tesrecons.par* file).\\n\\n    Parameters:\\n\\n    char **RecordFile**\\n\\n        Record FITS file\\n\\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\\n\\n    char **TesEventFile**\\n\\n        Output event list file\\n\\n    char **LibraryFile**\\n\\n        File with calibration library\\n\\n    char **XMLFile**\\n\\n        XML input FITS file with instrument definition\\n\\n    char **preBuffer**\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\\n                                                                                        preBuffer=filtlen-post\\n\\n    int **EventListSize**\\n\\n        Default size of the event list per record\\n\\n    char **clobber**\\n\\n        Overwrite or not output files if exist (yes/no)\\n\\n    char **history**\\n\\n        Write program parameters into output file\\n\\n    double **scaleFactor**\\n\\n        Detection scale factor for initial filtering\\n\\n    int **samplesUp**\\n\\n        Number of consecutive samples up for threshold trespassing\\n\\n    int **samplesDown**\\n\\n        Number of consecutive samples below the threshold to look for other pulse\\n\\n    double **nSgms**\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\\n\\n    char **detectionMode**\\n\\n        Adjusted Derivative (**AD**) or Single Threshold Crossing (**STC**)\\n\\n    int **detectSP**\\n\\n        Detect secondary pulses (1) or not (0)\\n\\n    double **LbT**\\n\\n        Baseline averaging length (seconds)\\n\\n    int **intermediate**\\n\\n        Write or not intermediate files (1/0)\\n\\n    char **detectFile**\\n\\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\\n\\n    char **FilterDomain**\\n\\n        Filtering Domain: Time (**T**) or Frequency (**F**)\\n\\n    char **FilterMethod**\\n\\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\\n\\n    char **EnergyMethod**\\n\\n        Energy calculation Method: **OPTFILT**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**\\n\\n    double **filtEeV**\\n\\n        Energy of the filters of the library to be used to calculate energy (only for **OPTFILT**, **I2R** and **I2RFITTED**)\\n\\n    double **Ifit**\\n\\n        Constant to apply the I2RFITTED conversion\\n\\n    char **OFNoise**\\n\\n        Noise to use with Optimal Filtering: **NSD** or **WEIGHTN**\\n\\n    int **LagsOrNot**\\n\\n        Lags or no lags (1/0)\\n\\n    int **nLags**\\n\\n        Number of lags (positive odd number)\\n\\n    int **Fitting35**\\n\\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\\n\\n    int **OFIter**\\n\\n        Iterate or not iterate (1/0)\\n\\n    int **OFLib**\\n\\n        Work or not with a library with optimal filters (yes/no)\\n\\n    char **OFStrategy**\\n\\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**\\n\\n    int **OFLength**\\n\\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**)\\n\\n    int **flength_0pad**\\n\\n        0-padding filter length\\n\\n    int **prebuff_0pad**\\n\\n        preBuffer when 0-padding\\n\\n    int **errorT**\\n\\n        Additional error (in samples) added to the detected time (Logically, it changes the reconstructed energies )\\n\\n    int **Sum0Filt**\\n\\n        0-padding: Subtract the sum of the filter (1) or not (0)\\n\\n    char **tstartPulse1**\\n\\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\\n\\n    int **tstartPulse2**\\n\\n        Tstart (samples) of the second pulse\\n\\n    int **tstartPulse3**\\n\\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\\n\\n    double **energyPCA1**\\n\\n        First energy (only for PCA)\\n\\n    double **energyPCA2**\\n\\n        Second energy (only for PCA)\\n\\n    .. cpp:member:: char RecordFile\\n\\n        Record FITS file\\n\\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\\n\\n    .. cpp:member:: char TesEventFile\\n\\n        Output event list file\\n\\n    .. cpp:member:: char LibraryFile\\n\\n        File with calibration library\\n\\n    .. cpp:member:: char XMLFile\\n\\n        XML input FITS file with instrument definition\\n\\n    .. cpp:member:: char preBuffer\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\\n                                                                                        preBuffer=filtlen-post\\n\\n    .. cpp:member:: int EventListSize\\n\\n        Default size of the event list\\n\\n    .. cpp:member:: char clobber\\n\\n        Overwrite or not output files if exist (yes/no)\\n\\n    .. cpp:member:: char history\\n\\n        Write program parameters into output file\\n\\n    .. cpp:member:: double scaleFactor\\n\\n        Detection scale factor for initial filtering\\n\\n    .. cpp:member:: int samplesUp\\n\\n        Number of consecutive samples up for threshold trespassing\\n\\n    .. cpp:member:: int samplesDown\\n\\n        Number of consecutive samples below the threshold to look for other pulse\\n\\n    .. cpp:member:: double nSgms\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\\n\\n    .. cpp:member:: char detectionMode\\n\\n        Adjusted Derivative (**AD**) or Single Threshold Crossing (**STC**)\\n\\n    .. cpp:member:: int detectSP\\n\\n        Detect secondary pulses (1) or not (0)\\n\\n    .. cpp:member:: double LbT\\n\\n        Baseline averaging length (seconds)\\n\\n     .. cpp:member:: int intermediate\\n\\n        Write or not intermediate files (1/0)\\n\\n    .. cpp:member:: char detectFile\\n\\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\\n\\n    .. cpp:member:: char FilterDomain\\n\\n        Filtering Domain: Time (**T**) or Frequency (**F**)\\n\\n    .. cpp:member:: char FilterMethod\\n\\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\\n\\n    .. cpp:member:: char EnergyMethod\\n\\n        Energy calculation Method: **OPTFILT**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**\\n\\n    .. cpp:member:: double filtEeV\\n\\n        Energy of the filters of the library to be used to calculate energy (only for **OPTFILT**, **I2R** and **I2RFITTED**)\\n\\n    .. cpp:member:: double Ifit\\n\\n        Constant to apply the I2RFITTED conversion\\n\\n    .. cpp:member:: char OFNoise\\n\\n        Noise to use with Optimal Filtering: **NSD** or **WEIGHTN**\\n\\n    .. cpp:member:: int LagsOrNot\\n\\n        Lags or no lags (1/0)\\n\\n    .. cpp:member:: int nLags\\n\\n        Number of lags (positive odd number)\\n\\n    .. cpp:member:: int Fitting35\\n\\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\\n\\n    .. cpp:member:: int OFIter\\n\\n        Iterate or not iterate (1/0)\\n\\n    .. cpp:member:: int OFLib\\n\\n        Work or not with a library with optimal filters (yes/no)\\n\\n    .. cpp:member:: char OFStrategy\\n\\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**\\n\\n    .. cpp:member:: int OFLength\\n\\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**)\\n\\n    .. cpp:member:: int flength_0pad\\n\\n        0-padding filter length\\n\\n    .. cpp:member:: int prebuff_0pad\\n\\n        preBuffer when 0-padding\\n\\n    .. cpp:member:: int errorT\\n\\n        Additional error (in samples) added to the detected time (Logically, it changes the reconstructed energies )\\n\\n    .. cpp:member:: int Sum0Filt\\n\\n        0-padding: Subtract the sum of the filter (1) or not (0)\\n\\n    .. cpp:member:: char tstartPulse1\\n\\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\\n\\n    .. cpp:member:: int tstartPulse2\\n\\n        Tstart (samples) of the second pulse\\n\\n    .. cpp:member:: int tstartPulse3\\n\\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\\n\\n    .. cpp:member:: double energyPCA1\\n\\n        First energy (only for PCA)\\n\\n    .. cpp:member:: double energyPCA2\\n\\n        Second energy (only for PCA)\\n\\n\"}, {\"line\": 6979, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int th_runDetect (TesRecord* record, int trig_reclength, int lastRecord, int nrecord, PulsesCollection *pulsesAll, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function is responsible for the **detection** in SIRENA (instead of :cpp:func:`runDetect`) when the **THREADING** running option has been chosen (hardcoded at this moment). It is used both for library creation and energy reconstruction runnings.\\n\"}, {\"line\": 6985, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int toGslMatrix(void **buffer, gsl_matrix **matrix, long numCol, int numRow, int type, int eventini)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    The function puts the values of the input buffer into an output GSL matrix. Columns and rows are input parameters.\\n\\n    **Members/Variables**\\n\\n    void** **buffer**\\n\\n        Input buffer with data\\n\\n    gsl_matrix** **matrix**\\n\\n        Output GSL matrix\\n\\n    long **numCol**\\n\\n        Number of columns\\n\\n    int **numRow**\\n\\n        Number of rows\\n\\n    int **type**\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n    int **eventini**\\n\\n        Initial event to start writing\\n\\n    .. cpp:member:: void** buffer\\n\\n        Input buffer with data\\n\\n    .. cpp:member:: gsl_matrix** matrix\\n\\n        Output GSL matrix\\n\\n    .. cpp:member:: long numCol\\n\\n        Number of columns\\n\\n    .. cpp:member:: int numRow\\n\\n        Number of rows\\n\\n    .. cpp:member:: int type\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n    .. cpp:member:: int eventini\\n\\n        Initial event to start writing\\n\\n\"}, {\"line\": 7042, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int toGslVector(void **buffer, gsl_vector **array, long nevent, int eventini, int type)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    The function puts the values of the input buffer into an output GSL vector.\\n\\n    **Members/Variables**\\n\\n    void** **buffer**\\n\\n        Input buffer with data\\n\\n    gsl_vector** **array**\\n\\n        Output GSL vector\\n\\n    long **nevent**\\n\\n        Number of elements to store\\n\\n    int **eventini**\\n\\n        Initial element number\\n\\n    int **type**\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n    .. cpp:member:: void** buffer\\n\\n        Input buffer with data\\n\\n    .. cpp:member:: gsl_vector** array\\n\\n        Output GSL vector\\n\\n    .. cpp:member:: long nevent\\n\\n        Number of elements to store\\n\\n    .. cpp:member:: int eventini\\n\\n        Initial element number\\n\\n    .. cpp:member:: int type\\n\\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\\n\\n\"}, {\"line\": 7095, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int vector2matrix(gsl_vector *vectorin, gsl_matrix **matrixout)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function converts an input :math:`n^2` vector into an output square matrix :math:`[n \\\\times n]`. It puts the first :math:`n` elements of the vector in the first row of the matrix, the second group of :math:`n` elements (from :math:`n` to :math:`2n-1`) of the vector in the second row and so on.\\n\\n    **Members/Variables**\\n\\n    gsl_vector** **vectorin**\\n\\n        GSL input vector whose length is :math:`n^2`\\n\\n    gsl_matrix* **matrixout**\\n\\n        GSL output square matrix :math:`[n \\\\times n]`\\n\\n    .. cpp:member:: gsl_vector** vectorin\\n\\n        GSL input vector whose length is :math:`n^2`\\n\\n    .. cpp:member:: gsl_matrix* matrixout\\n\\n        GSL output square matrix :math:`[n \\\\times n]`\\n\\n\"}, {\"line\": 7122, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int weightMatrix(ReconstructInitSIRENA *reconstruct_init, bool saturatedPulses, PulsesCollection *pulsesAll, PulsesCollection *pulsesInRecord, long nonpileupPulses, gsl_vector *nonpileup, gsl_vector *pulseaverage, gsl_matrix **covariance, gsl_matrix **weight)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    :cite:`Fixsen2004`\\n\\n    This function calculates the weight matrix by using the non piled-up pulses found in all the records, stored in *pulsesAll* (previous records) and *pulsesInRecord* (current record). The weight matrix of each energy (and other intermediate values) will be stored in the library by the function :cpp:func:`fillInLibraryData`.\\n\\n    Definitions:\\n\\n        :math:`S_i^p`: Value of the ith-sample of the pulse number *p*\\n\\n        :math:`M_i^p`: Value of the ith-sample of the model number *p* (model= *pulseaverage*):\\n\\n        .. math::\\n\\n            M_i = <S_i> = (1/N)\\\\sum_{p=1}^{N}S_i^p\\n\\n        N: number of non piled-up pulses\\n\\n        .. math::\\n\\n            & D_i = S_i - M_i \\\\\\\\\\n            & V_{ij} = <D_iD_j> = E[(S_i-M_i)(S_j-M_j)] = (1/N)\\\\sum_{p=1}^{N}(S_i^p-M_i^p)(S_j^p-M_j^p) \\\\\\\\\\n            & V = \\\\left[\\\\begin{matrix} <D_1D_1> & <D_1D_2> & ... & <D_1D_n> \\\\\\\\\\n            <D_2D_1> & <D_2D_2> & ... & <D_2D_n> \\\\\\\\\\n            ....  &  ....  & ... &  ....  \\\\\\\\\\n            <D_nD_1> & <D_nD_2> & ... & <D_nD_n>\\\\end{matrix}\\\\right]\\n\\n        where *n* is the :option:`OFLength` and thus :math:`V = [n \\\\times n]`.\\n\\n        The weight matrix :math:`W = [V]^{-1}`.\\n\\n    Steps:\\n\\n        - Calculate the elements of the diagonal of the covariance matrix\\n        - Calculate the elements out of the diagonal of the covariance matrix\\n        - If saturated pulses => Covariance matrix is a singular matrix => Non invertible\\n\\n          In order to allow the covariance matrix to be inverted => Replacing 0's (0's are due to the saturated values, equal in the pulse and in the model)\\n\\n          - Elements of the diagonal: Generating a random double :math:`f_1` between a range *(fMin,fMax)* (-NoiseStd,NoiseStd) to replace 0's with :math:`f_1^2`\\n          - Elements out of the diagonal: Generating two random doubles :math:`f_1` and :math:`f_2` between a range *(fMin,fMax)* (-NoiseStd,NoiseStd) to replace 0's with :math:`f_1 \\\\cdot f_2`\\n\\n        - Calculate the weight matrix\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    bool **saturatedPulses**\\n\\n        If *true*, all the pulses (calibration mode => all the pulses have the same energy) are saturated\\n\\n    PulsesCollection* **pulsesAll**\\n\\n        Collection of pulses found in the previous records\\n\\n    PulsesCollection* **pulsesInRecord**\\n\\n        Collection of pulses found in the current record\\n\\n    long **nonpileupPulses**\\n\\n        Number of non piled-up pulses\\n\\n    gsl_vector* **nonpileup**\\n\\n        GSL vector containing info about all the pulses informing if they are piled-up or not\\n\\n    gsl_vector** **pulseaverage**\\n\\n        GSL vector with the pulseaverage (= template = model) of the non piled-up pulses\\n\\n    gsl_matrix** **covariance**\\n\\n        GSL matrix with covariance matrix\\n\\n    gsl_matrix** **weight**\\n\\n        GSL matrix with weight matrix\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: bool saturatedPulses\\n\\n        If *true*, all the pulses ( :option:`opmode` = 0 => all the pulses have the same energy) are saturated\\n\\n    .. cpp:member:: PulsesCollection* pulsesAll\\n\\n        Collection of pulses found in the previous records\\n\\n    .. cpp:member:: PulsesCollection* pulsesInRecord\\n\\n        Collection of pulses found in the current record\\n\\n    .. cpp:member:: long nonpileupPulses\\n\\n        Number of non piled-up pulses\\n\\n    .. cpp:member:: gsl_vector* nonpileup\\n\\n        GSL vector containing info about all the pulses informing if they are piled-up or not\\n\\n    .. cpp:member:: gsl_vector** pulseaverage\\n\\n        GSL vector with the pulseaverage (= template = model) of the non piled-up pulses\\n\\n    .. cpp:member:: gsl_matrix** covariance\\n\\n        GSL matrix with covariance matrix\\n\\n    .. cpp:member:: gsl_matrix** weight\\n\\n        GSL matrix with weight matrix\\n\\n\"}, {\"line\": 7243, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int weightMatrixNoise (gsl_matrix *intervalMatrix, gsl_matrix **weight)\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function calculates the weight matrix of the noise\\n\\n        :math:`D_i`: Pulse free interval\\n        :math:`V`: Covariance matrix\\n\\n            :math:`V_{ij} = E[DiDj]-E[Di]E[Dj]`\\n\\n        :math:`Di^p`: Value of the pth-sample of the pulse-free interval i\\n        :math:`N`: Number of samples\\n\\n        .. math::\\n\\n            & V_{ij} =  <D_iD_j> = E[D_iD_j] = (1/N)sum_{p=1}^{N}(Di^p)(Dj^p) \\\\\\\\\\n            & V = \\\\left[\\\\begin{matrix} <D_1D_1> & <D_1D_2> & ... & <D_1D_n> \\\\\\\\\\n            <D_2D_1> & <D_2D_2> & ... & <D_2D_n> \\\\\\\\\\n            ....  &  ....  & ... &  ....  \\\\\\\\\\n            <D_nD_1> & <D_nD_2> & ... & <D_nD_n>\\\\end{matrix}\\\\right]\\n\\n        where *n* is the :option:`OFLength` and thus :math:`V = [n \\\\times n]`.\\n\\n        The weight matrix :math:`W = 1/V`.\\n\\n    Steps:\\n\\n    - Calculate the elements of the diagonal of the covariance matrix\\n    - Calculate the elements out of the diagonal of the covariance matrix\\n    - Calculate the weight matrix\\n\\n    **Members/Variables**\\n\\n    gsl_matrix* **intervalMatrix**\\n\\n        GSL matrix containing pulse-free intervals whose baseline is 0 (baseline previously subtracted) [nintervals x intervalMinSamples]\\n\\n    gsl_matrix** **weight**\\n\\n        GSL matrix with weight matrix\\n\\n    .. cpp:member:: gsl_matrix* intervalMatrix\\n\\n        GSL matrix containing pulse-free intervals whose baseline is 0 (baseline previously subtracted) [nintervals x intervalMinSamples]\\n\\n    .. cpp:member:: gsl_matrix** weight\\n\\n        GSL matrix with weight matrix\\n\\n\"}, {\"line\": 7294, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writeFilterHDU(ReconstructInitSIRENA **reconstruct_init, int pulse_index, double energy, gsl_vector *optimalfilter, fitsfile **dtcObject)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function runs in RECONSTRUCTION mode and writes the optimal filter info (in the *FILTER* HDU) for each pulse\\n    if :option:`intermediate` = 1 and either *reconstruct_init->OFLib* = 0 or *reconstruct_init->OFLib* = 1, :option:`filtEeV` = 0 and the the number of energies in the library FITS file is greater than 1.\\n\\n    - Declare variables\\n    - Open intermediate FITS file\\n    - If (*reconstruct_init->OFLib* = 0) or (*reconstruct_init->OFLib* = 1, :option:`filtEeV` = 0 and the the number of energies in the library FITS file is greater than 1):\\n        - Create the *FILTER* HDU if it is the first pulse\\n        - Write data:\\n            - **OPTIMALF** or **OPTIMALFF** column (in time or frequency domain)\\n            - **OFLENGTH** column\\n    - Write **ENERGY** column in *PULSES* HDU\\n    - Close intermediate output FITS file if it is necessary\\n    - Free memory\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    int **pulse_index**\\n\\n        Index of the pulse whose info is going to be written (to know if it is the first pulse)\\n\\n    double **energy**\\n\\n        Estimated energy (eV)\\n\\n    gsl_vector* **optimalfilter**\\n\\n        Optimal filter (in time or frequency domain)\\n\\n    fitsfile** **dtcObject**\\n\\n        Fitsfile object for intermeadiate file name\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: int pulse_index\\n\\n        Index of the pulse whose info is going to be written (to know if it is the first pulse)\\n\\n    .. cpp:member:: double energy\\n\\n        Estimated energy (eV)\\n\\n    .. cpp:member:: gsl_vector* optimalfilter\\n\\n        Optimal filter (in time or frequency domain)\\n\\n    .. cpp:member:: fitsfile** dtcObject\\n\\n        Fitsfile object for intermeadiate file name\\n\\n\"}, {\"line\": 7355, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writeFitsComplex(IOData obj, gsl_matrix *matrix)\\n\\n    Located in file: *inoututils.cpp*\\n\\n    This function reads values of a GSL matrix. After that, the function puts them into a complex column of the output FITS file.\\n\\n    **Members/Variables**\\n\\n    IOData **obj**\\n\\n        Object for FITS column to be written\\n\\n    gsl_matrix* **matrix**\\n\\n        Input GSL matrix with data\\n\\n    .. cpp:member:: IOData obj\\n\\n        Object for FITS column to be written\\n\\n    .. cpp:member:: gsl_matrix* matrix\\n\\n        Input GSL matrix with data\\n\\n\"}, {\"line\": 7380, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writeFitsSimple(IOData obj, gsl_vector *vector)\\n\\n    Located  in file: *inoututils.cpp*\\n\\n    This function reads values of a GSL vector. After that, the function puts them into a column of the output FITS file.\\n\\n    **Members/Variables**\\n\\n    IOData **obj**\\n\\n        Object for FITS column to be written\\n\\n    gsl_vector* **vector**\\n\\n        Input GSL vector with data\\n\\n    .. cpp:member:: IOData obj\\n\\n        Object for FITS column to be written\\n\\n    .. cpp:member:: gsl_vector* vector\\n\\n        Input GSL vector with data\\n\\n\"}, {\"line\": 7405, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writeLibrary(ReconstructInitSIRENA *reconstruct_init, double samprate, double estenergy, gsl_vector *pulsetemplate, gsl_vector *pulsetemplate_B0, gsl_matrix *covariance, gsl_matrix *weight, bool appendToLibrary, fitsfile **inLibObject, gsl_vector *pulsetemplateMaxLengthFixedFilter, gsl_vector *pulsetemplateMaxLengthFixedFilter_B0)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function writes the library (reordering if it is necesary and calculating some intermediate parameters)\\n\\n        - Adding a new row to the library if *appendToLibrary = true* (:cpp:func:`readAddSortParams`)\\n        - Write the first row of the library if *appendToLibrary = false* (:cpp:func:`addFirstRow`)\\n\\n        - In both cases, the keywords ``CREADATE`` and ``SIRENAV`` with the date and SIRENA version are written\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    double **samprate**\\n\\n        Sampling rate\\n\\n    double **estenergy**\\n\\n        Pulse height of the template whose energy is going to be added to the library\\n\\n    gsl_vector* **pulsetemplate**\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library\\n\\n    gsl_vector* **pulsetemplate_B0**\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\\n\\n    gsl_matrix** **covariance**\\n\\n        GSL matrix with covariance matrix\\n\\n    gsl_matrix** **weight**\\n\\n        GSL matrix with weight matrix\\n\\n    bool **appendToLibrary**\\n\\n        *true* if adding a new row to the library and *false* if it is the first row to be added\\n\\n    fitsfile** **inLibObject**\\n\\n        FITS object containing information of the library FITS file\\n\\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter**\\n\\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library\\n\\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter_B0**\\n\\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library (without baseline)\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate\\n\\n    .. cpp:member:: double estenergy\\n\\n        Pulse height of the template whose energy is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplate\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplate_B0\\n\\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\\n\\n    .. cpp:member:: gsl_matrix** covariance\\n\\n        GSL matrix with covariance matrix\\n\\n    .. cpp:member:: gsl_matrix** weight\\n\\n        GSL matrix with weight matrix\\n\\n    .. cpp:member:: bool appendToLibrary\\n\\n        *true* if adding a new row to the library and *false* if it is the first row to be added\\n\\n    .. cpp:member:: fitsfile** inLibObject\\n\\n        FITS object containing information of the library FITS file\\n\\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter\\n\\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library\\n\\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter_B0\\n\\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library (without baseline)\\n\\n\"}, {\"line\": 7507, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: void writeLog(FILE *fileRef, string type, int verbosity, string message)\\n\\n    Located  in file: *inoututils.cpp*\\n\\n    This function includes the processing of the each level of message in the log file and the output screen:\\n\\n      - Verbosity = 0 => The log file and the output screen include Errors\\n      - Verbosity = 1 => The log file and the output screen include Errors and Warnings\\n      - Verbosity = 2 => The log file and the output screen include Errors, Warnings and Alerts\\n      - Verbosity = 3 => The log file and the output screen include Errors, Warnings, Alerts and Log messages\\n\\n    **Members/Variables**\\n\\n    FILE* **fileRef**\\n\\n        File reference to log file\\n\\n    string **type**\\n\\n        String to indicate error type \\\"Error\\\", \\\"Warning\\\", \\\"Alert\\\",\\\"Log\\\" or \\\"OK\\\"\\n\\n     int **verbosity**\\n\\n        Integer value for verbosity\\n\\n     string **message**\\n\\n        String message to print\\n\\n    .. cpp:member:: FILE* fileRef\\n\\n        File reference to log file\\n\\n    .. cpp:member:: string type\\n\\n        String to indicate error type \\\"Error\\\", \\\"Warning\\\", \\\"Alert\\\",\\\"Log\\\" or \\\"OK\\\"\\n\\n    .. cpp:member::  int verbosity\\n\\n        Integer value for verbosity\\n\\n    .. cpp:member::  string message\\n\\n        String message to print\\n\\n\"}, {\"line\": 7553, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writePulses(ReconstructInitSIRENA** reconstruct_init, double samprate, double initialtime, gsl_vector *invectorNOTFIL, int numPulsesRecord, gsl_vector *tstart, gsl_vector *tend, gsl_vector *quality, gsl_vector *taurise, gsl_vector *taufall, fitsfile *dtcObject)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function writes the data of the pulses found in the record in the intermediate FITS file (in the *PULSES* HDU). The pulses info given is: **TSTART**, **I0** (the pulse itself), **TEND**, **TAURISE**, **TAUFALL** and **QUALITY**.\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    double **samprate**\\n\\n        Sampling rate (to convert samples to seconds)\\n\\n    double **initialtime**\\n\\n        Starting time of the record (in order to calculate absolute times)\\n\\n    gsl_vector* **invectorNOTFIL**\\n\\n        GSL vector with the original record (neither low-pass filtered nor differentiated)\\n\\n    int **numPulsesRecord**\\n\\n        Number of pulses found in the record\\n\\n    gsl_vector* **tstart**\\n\\n        GSL vector with the start times of the found pulses\\n\\n    gsl_vector* **tend**\\n\\n        GSL vector with the end times of the found pulses\\n\\n    gsl_vector* **quality**\\n\\n        GSL vector with the quality of the found pulses\\n\\n        0 => Standard (good) pulses\\n\\n        1 => Truncated pulses at the beginning\\n\\n        2 => Truncated pulses at the end\\n\\n        10 => Saturated pulses\\n\\n        11 => Truncated and saturated pulses\\n\\n    gsl_vector* **taurise**\\n\\n        GSL vector with the rise time constants of the found pulses (to be done)\\n\\n    gsl_vector* **taufall**\\n\\n        GSL vector with the fall time constants of the found pulses (to be done)\\n\\n    fitsfile* **dtcObject**\\n\\n        Object which contains information of the intermediate FITS file\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\\n\\n    .. cpp:member:: double samprate\\n\\n        Sampling rate (to convert samples to seconds)\\n\\n    .. cpp:member:: double initialtime\\n\\n        Starting time of the record (in order to calculate absolute times)\\n\\n    .. cpp:member:: gsl_vector* invectorNOTFIL\\n\\n        GSL vector with the original record (neither low-pass filtered nor differentiated)\\n\\n    .. cpp:member:: int numPulsesRecord\\n\\n        Number of pulses found in the record\\n\\n    .. cpp:member:: gsl_vector* tstart\\n\\n        GSL vector with the start times of the found pulses\\n\\n    .. cpp:member:: gsl_vector* tend\\n\\n        GSL vector with the end times of the found pulses\\n\\n    .. cpp:member:: gsl_vector* quality\\n\\n        GSL vector with the quality of the found pulses\\n\\n        0 => Standard (good) pulses\\n\\n        1 => Truncated pulses at the beginning\\n\\n        2 => Truncated pulses at the end\\n\\n        10 => Saturated pulses\\n\\n        11 => Truncated and saturated pulses\\n\\n    .. cpp:member:: gsl_vector* taurise\\n\\n        GSL vector with the rise time constants of the found pulses (to be done)\\n\\n    .. cpp:member:: gsl_vector* taufall\\n\\n        GSL vector with the fall time constants of the found pulses (to be done)\\n\\n    .. cpp:member:: fitsfile* dtcObject\\n\\n        Object which contains information of the intermediate FITS file\\n\\n\"}, {\"line\": 7670, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writeTestInfo(ReconstructInitSIRENA* reconstruct_init, gsl_vector *recordDERIVATIVE, double threshold, fitsfile *dtcObject)\\n\\n    Located in file: *tasksSIRENA.cpp*\\n\\n    This function writes the *TESTINFO* HDU in the intermediate FITS file. The written columns are **FILDER** (low-pass filtered and differentiated record) and **THRESHOLD**.\\n\\n    **Members/Variables**\\n\\n    ReconstructInitSIRENA** **reconstruct_init**\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    gsl_vector* **recordDERIVATIVE**\\n\\n        GSL vector with input record (low-pass filtered and) differentiated\\n\\n    double **threshold**\\n\\n        Threshold value used to find pulses\\n\\n    fitsfile **dtcObject**\\n\\n        Object which contains information of the intermediate FITS file\\n\\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\\n\\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\\n\\n    .. cpp:member:: gsl_vector* recordDERIVATIVE\\n\\n        GSL vector with input record (low-pass filtered and) differentiated\\n\\n    .. cpp:member:: double threshold\\n\\n        Threshold value used to find pulses\\n\\n    .. cpp:member:: fitsfile dtcObject\\n\\n        Object which contains information of the intermediate FITS file\\n\\n\"}, {\"line\": 7711, \"source\": \"./doc/SIRENAfunctions.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"cpp:function\\\".\", \"full_message\": \"Unknown directive type \\\"cpp:function\\\".\\n\\n.. cpp:function:: int writeTPSreprExten ()\\n\\n    Located in file: *gennoisespec.cpp*\\n\\n    This function writes the noisespec output FITS file.\\n\\n    Steps:\\n\\n    - Allocate GSL vectors\\n    - Write the data in the output FITS file (print only half of FFT to prevent aliasing)\\n    - *NOISE* HDU only contains positive frequencies (=> Multiply by 2 the amplitude)\\n    - *NOISEALL* HDU contains negative and positive frequencies => It is the HDU read to build the optimal filters\\n    - *WEIGHTMS* HDU\\n\\n\"}, {\"line\": 22, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 29, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: inFile=<str>\\n\\n        Name of the input FITS file (stream splitted into records).\\n\\n        Default: *a.fits*\\n\"}, {\"line\": 35, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: outFile=<str>\\n\\n        Name of the output FITS file.\\n\\n        Default: *a_noisespec.fits*\\n\"}, {\"line\": 41, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: intervalMinSamples=<int>\\n\\n        Minimum length of a pulse-free interval to use (in samples).\\n\\n        Default: 8192\\n\"}, {\"line\": 47, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: nplPF=<real>\\n\\n        Number of pulse lengths after the end of the pulse to start the pulse-free interval searching (only relevant if pulse detection in the stream has to be performed).\\n\\n        Default: 0\\n\"}, {\"line\": 53, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: nintervals=<int>\\n\\n        Number of pulse-free intervals to use for the noise average.\\n\\n        Default: 1000\\n\"}, {\"line\": 61, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: scaleFactor=<real>\\n\\n        Scale factor to apply to make possible a variable cut-off frequency of the low-pass filter. In fact, the cut-off frequency of the filter is :math:`1/(\\\\pi \\\\cdot sF)` and therefore, the box-car length is :math:`\\\\pi \\\\cdot sF \\\\cdot samprate` (see :ref:`Low-Pass filtering <lpf>`).\\n\\n        If the :option:`scaleFactor` makes the box-car length :math:`\\\\leq 1` is equivalent to not filter (cut-off frequency of the low-pass filter is too high). If the :option:`scaleFactor` is too large, the low-pass filter band is too narrow, and not only noise is rejected during the filtering, but also the signal.\\n\\n        Default: 0\\n\"}, {\"line\": 71, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: samplesUp=<int>\\n\\n        Consecutive samples that the signal must cross over the threshold to trigger a pulse detection (only relevant if pulse detection in the stream has to be performed).\\n\\n        Default: 3\\n\"}, {\"line\": 79, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: nSgms=<real>\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the *kappa-clipping* algorithm (only relevant if pulse detection in the stream has to be performed).\\n\\n        Default: 3.5\\n\"}, {\"line\": 85, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: pulse_length=<int>\\n\\n        Pulse length in samples (to establish which part of the record is rejected due to a found pulse).\\n\\n        Default: 8192\\n\"}, {\"line\": 91, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: weightMS=<yes|no>\\n\\n        Calculate and write the weight matrices if *yes*.\\n\\n        Default: *no*\\n\"}, {\"line\": 99, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: EnergyMethod=<OPTFILT|I2R|I2RFITTED>\\n\\n        Transform to resistance space (I2R or I2RFITTED) or not (OPTFILT).\\n\\n        Default: *OPTFILT*\\n\"}, {\"line\": 105, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: Ifit=<adu>\\n\\n        Constant to apply the I2RFITTED conversion.\\n\\n        Default: 7000.0\\n\"}, {\"line\": 113, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: clobber=<yes|no>\\n\\n        Overwrite output files if they exist.\\n\\n        Default: *no*\\n\"}, {\"line\": 119, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: matrixSize=<int>\\n\\n        Size of noise matrix if only one to be calculated, in samples.\\n\\n        Default: 0\\n\"}, {\"line\": 125, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: rmNoiseInterval=<yes|no>\\n\\n        Remove some noise intervals before calculating the noise spectrum if *yes*.\\n\\n        Default: *no*\\n\"}, {\"line\": 159, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 159, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 159, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 159, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 169, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 169, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 176, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: RecordFile=<str>\\n\\n        Input record FITS file.\\n\\n        Default: *record.fits*\\n\"}, {\"line\": 182, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: TesEventFile=<str>\\n\\n        Output event list FITS file.\\n\\n        Default: *event.fits*\\n\"}, {\"line\": 188, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  LibraryFile=<str>\\n\\n        FITS file with calibration library.\\n\\n        Default: *library.fits*\\n\"}, {\"line\": 194, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  NoiseFile=<str>\\n\\n        Noise FITS file with noise spectrum.\\n\\n        Default: *noise.fits*\\n\"}, {\"line\": 200, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  XMLFile=<str>\\n\\n        XML input file with instrument definition.\\n\\n        Default: *xifu_pipeline.xml*\\n\"}, {\"line\": 206, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  preBuffer=<yes|no>\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file).\\n\\n        Default: no\\n\"}, {\"line\": 212, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  EventListSize=<str>\\n\\n        Default size of the event list per record.\\n\\n        Default: 1000\\n\"}, {\"line\": 218, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  clobber=<yes|no>\\n\\n        Overwrite or not output files if they exist.\\n\\n        Default: *no*\\n\"}, {\"line\": 224, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  history=<yes|no>\\n\\n        Write or not program parameters into output FITS file.\\n\\n        Default: *yes*\\n\"}, {\"line\": 232, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  scaleFactor=<real>\\n\\n        Scale factor to apply to make possible a variable cut-off frequency of the low-pass filter. In fact, the cut-off frequency of the filter is :math:`1/(\\\\pi \\\\cdot sF)` and therefore, the box-car length is :math:`\\\\pi \\\\cdot sF \\\\cdot samprate` (see :ref:`Low-Pass filtering <lpf>`).\\n\\n        If the :option:`scaleFactor` makes the box-car length :math:`\\\\leq 1` is equivalent to not filter (cut-off frequency of the low-pass filter is too high). If the :option:`scaleFactor` is too large, the low-pass filter band is too narrow, and not only noise is rejected during the filtering, but also the signal.\\n\\n        Default: 0\\n\"}, {\"line\": 242, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  samplesUp=<int>\\n\\n        Number of consecutive samples up for threshold trespassing.\\n\\n        Default: 3\\n\"}, {\"line\": 250, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  nSgms=<real>\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm.\\n\\n        Default: 3.5\\n\"}, {\"line\": 256, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  LrsT=<secs>\\n\\n        Running sum (RS) length for the RS raw energy estimation, in seconds.\\n\\n        Default: 30E-6\\n\"}, {\"line\": 262, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  LbT=<secs>\\n\\n        Baseline averaging length, in seconds.\\n\\n        Default: 6.4E-3\\n\"}, {\"line\": 268, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  monoenergy=<eV>\\n\\n        Monochromatic energy of the pulses in the input FITS file in eV.\\n\\n        Default: 6000.0\\n\"}, {\"line\": 274, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  addCOVAR=<yes|no>\\n\\n        Add or not pre-calculated values  in the library file related to COVAR reconstruction method.\\n\\n        Default: *no*\\n\"}, {\"line\": 280, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  addINTCOVAR=<yes|no>\\n\\n        Add or not pre-calculated values  in the library file related to INTCOVAR reconstruction method.\\n\\n        Default: *no*\\n\"}, {\"line\": 286, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  addOFWN=<yes|no>\\n\\n        Add or not pre-calculated values  in the library file related to Optimal Filtering by using Weight Noise matrix.\\n\\n        Default: *no*\\n\"}, {\"line\": 292, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  largeFilter=<int>\\n\\n        Length (in samples) of the longest fixed filter.\\n\\n        Default: 8192\\n\"}, {\"line\": 300, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  EnergyMethod=<OPTFILT | I2R | IRFITTED>\\n\\n        :ref:`reconMethods` Energy calculation Method: OPTFILT (Optimal filtering), I2R and I2RFITTED (Linear Transformations).\\n\\n        Default: *OPTFILT*\\n\"}, {\"line\": 308, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  Ifit=<adu>\\n\\n        Constant to apply the I2RFITTED conversion.\\n\\n        Default: 0.0\\n\\n        Used if :option:`EnergyMethod` = I2RFITTED.\\n\"}, {\"line\": 316, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  FilterMethod=<F0 | B0>\\n\\n        Filtering Method: *F0* (deleting the zero frequency bin) or *B0* (deleting the baseline).\\n\\n        Default: *F0*\\n\"}, {\"line\": 322, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  intermediate=<0|1>\\n\\n        Write intermediate files: yes(1), no(0)?\\n\\n        Default: 0\\n\"}, {\"line\": 328, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  detectFile=<str>\\n\\n        Intermediate detections FITS file (if :option:`intermediate` = 1).\\n\\n        Default: *detections.fits*\\n\"}, {\"line\": 334, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  tstartPulse1=<str>\\n\\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse. For development purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 340, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  tstartPulse2=<int>\\n\\n        Start time (in samples) of the second pulse in the record (0 if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 346, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  tstartPulse3=<int>\\n\\n        Start time (in samples) of the third pulse in the record (0  if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\\n\\n        Default: 0\\n\\n\"}, {\"line\": 355, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 368, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 368, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 370, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 375, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  RecordFile=<str>\\n\\n        Input record FITS file.\\n\\n        Default: *record.fits*\\n\"}, {\"line\": 381, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  TesEventFile=<str>\\n\\n        Output event list FITS file.\\n\\n        Default: *event.fits*\\n\"}, {\"line\": 387, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  LibraryFile=<str>\\n\\n        FITS file with calibration library.\\n\\n        Default: *library.fits*\\n\"}, {\"line\": 393, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  XMLFile=<str>\\n\\n        XML input FITS file with instrument definition.\\n\\n        Default: *xifu_pipeline.xml*\\n\"}, {\"line\": 399, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  preBuffer=<yes|no>\\n\\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file).\\n\\n        Default: no\\n\"}, {\"line\": 405, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  EventListSize=<str>\\n\\n        Default size of the event list per record.\\n\\n        Default: 1000\\n\"}, {\"line\": 411, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  clobber=<yes|no>\\n\\n        Overwrite output files if they exist.\\n\\n        Default: *no*\\n\"}, {\"line\": 417, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  history=<yes|no>\\n\\n        Write program parameters into output FITS file.\\n\\n        Default: *yes*\\n\"}, {\"line\": 425, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  scaleFactor=<real>\\n\\n        Scale factor to apply to make possible a variable cut-off frequency of the low-pass filter. In fact, the cut-off frequency of the filter is :math:`1/(\\\\pi \\\\cdot sF)` and therefore, the box-car length is :math:`\\\\pi \\\\cdot sF \\\\cdot samprate` (see :ref:`Low-Pass filtering <lpf>`).\\n\\n        If the :option:`scaleFactor` makes the box-car length :math:`\\\\leq 1` is equivalent to not filter (cut-off frequency of the low-pass filter is too high). If the :option:`scaleFactor` is too large, the low-pass filter band is too narrow, and not only noise is rejected during the filtering, but also the signal.\\n\\n        Default: 0\\n\"}, {\"line\": 435, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  samplesUp=<int>\\n\\n        Number of consecutive samples up for threshold trespassing.\\n\\n        Default: 3\\n\"}, {\"line\": 443, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  samplesDown=<int>\\n\\n        Number of consecutive samples below the threshold to look for other pulse (only used if :option:`detectionMode` = STC).\\n\\n        Default: 4\\n\"}, {\"line\": 451, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  nSgms=<real>\\n\\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm.\\n\\n        Default: 3.5\\n\"}, {\"line\": 457, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: detectionMode=<AD | STC>\\n\\n        Adjusted Derivative (AD) or Single Threshold Crossing (STC).\\n\\n        Default: *STC*\\n\"}, {\"line\": 463, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  detectSP=<0|1>\\n\\n        Detect secondary pulses (1) or not (0).\\n\\n        Default: 1\\n\"}, {\"line\": 469, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  LbT=<secs>\\n\\n        Baseline averaging length, in seconds.\\n\\n        Default: 6.4E-3\\n\"}, {\"line\": 475, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  intermediate=<0|1>\\n\\n        Write intermediate files: yes(1), no(0)?\\n\\n        Default: 0\\n\"}, {\"line\": 481, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  detectFile=<str>\\n\\n        Intermediate detections FITS file (if :option:`intermediate` = 1).\\n\\n        Default: *detections.fits*\\n\"}, {\"line\": 487, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  FilterDomain=<T | F>\\n\\n        Filtering Domain: Time(T) or Frequency(F).\\n\\n        Default: *T*\\n\"}, {\"line\": 493, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  FilterMethod=<F0 | B0>\\n\\n        Filtering Method: *F0* (deleting the zero frequency bin) or *B0* (deleting the baseline).\\n\\n        Default: *F0*\\n\"}, {\"line\": 499, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  EnergyMethod=<OPTFILT | 0PAD | INTCOVAR | COVAR | I2R | IRFITTED>\\n\\n        :ref:`reconMethods` Energy calculation Method: OPTFILT (Optimal filtering), 0PAD (0-padding), INTCOVAR (Covariance matrices), COVAR (Covariance matrices, first order) or I2R and I2RFITTED (Linear Transformations).\\n\\n        Default: *OPTFILT*\\n\"}, {\"line\": 505, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  filtEeV=<eV>\\n\\n        Energy of the filters of the library to be used to calculate energy (only for OPTFILT, 0PAD, I2R and I2RFITTED).\\n\\n        Default: 6000\\n\"}, {\"line\": 511, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  Ifit=<adu>\\n\\n        Constant to apply the I2RFITTED conversion.\\n\\n        Default: 0.0\\n\\n        Used if :option:`EnergyMethod` = I2RFITTED.\\n\"}, {\"line\": 519, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  OFNoise=<NSD | WEIGHTN>\\n\\n        It has only sense if :option:`EnergyMethod` = OPTFILT and it means to use the noise spectrum density (NSD) or the noise weight matrix (WEIGHTN).\\n\\n        Default: *NSD*\\n\"}, {\"line\": 525, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  LagsOrNot=<0|1>\\n\\n        Use LAGS == 1 or NOLAGS == 0 to indicate whether subsampling pulse arrival time is required. Currently only implemented for :option:`EnergyMethod` = OPTFILT, and :option:`EnergyMethod` = COVAR combined with :option:`OFLib` = yes.\\n\\n        Default: 1\\n\"}, {\"line\": 531, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  nLags=<int>\\n\\n        Number of lags (samples) to be used if :option:`LagsOrNot` = 1. It has to be a positive odd number.\\n\\n        Default: 9\\n\"}, {\"line\": 537, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  Fitting35=<3|5>\\n\\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5).\\n\\n        Default: 3\\n\"}, {\"line\": 543, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  OFIter=<0|1>\\n\\n        Iterate (1) or not iterate (0) to look for the closest energy interval. When iterations are activated, there will be more iterations if the calculated energy is out of the interval [Ealpha, Ebeta] straddling the predicted energy according the pulse shape.\\n\\n        Default: 0\\n\"}, {\"line\": 549, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option:: OFLib=<yes|no>\\n\\n        Work with a library with optimal filters (:option:`OFLib` = yes) or instead do Optimal Filter calculation on-the-fly (:option:`OFLib` = no).\\n\\n        Default: *yes*\\n\"}, {\"line\": 555, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  OFStrategy=<FREE | BYGRADE | FIXED>\\n\\n        Optimal Filter length Strategy: FREE (no length restriction), BYGRADE (length according to event grading) or FIXED (fixed length). These last 2 options are only for checking and development purposes; a normal run with *on-the-fly* calculations will be done with :option:`OFStrategy` = *FREE*. If :option:`OFStrategy` = *FREE*, :option:`OFLib` = no. If :option:`OFStrategy` = *FIXED* or :option:`OFStrategy` = *BYGRADE*, :option:`OFLib` = yes.\\n\\n        Default: *BYGRADE*\\n\"}, {\"line\": 561, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  OFLength=<int>\\n\\n        Fixed Optimal Filter length.\\n\\n        Default: 8192\\n\\n        Only used when :option:`OFStrategy` = **FIXED**.\\n\"}, {\"line\": 569, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  prebuff_0pad=<int>\\n\\n        0-padding preBuffer (only necessary when reconstructing with 0-padding)\\n\\n        Default: 1000\\n\"}, {\"line\": 575, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  flength_0pad=<int>\\n\\n        0-padding filter length (only necessary when reconstructing with 0-padding)\\n\\n        Default: 8192\\n\"}, {\"line\": 581, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  errorT=<int>\\n\\n        Additional error (in samples) added to the detected time. Logically, it changes the reconstructed energies. For deveplopment purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 587, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  Sum0Filt=<0|1>\\n\\n        If 0-padding, subtract (1) or not subtract (0) the sum of the filter. For deveplopment purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 593, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  tstartPulse1=<str>\\n\\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse. For development purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 599, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  tstartPulse2=<int>\\n\\n        Start time (in samples) of the second pulse in the record (0 if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 605, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown directive type \\\"option\\\".\", \"full_message\": \"Unknown directive type \\\"option\\\".\\n\\n.. option::  tstartPulse3=<int>\\n\\n        Start time (in samples) of the third pulse in the record (0  if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\\n\\n        Default: 0\\n\"}, {\"line\": 631, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 633, \"source\": \"./doc/SIRENAcommandline.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 16, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 16, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 16, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 16, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 32, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 39, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 39, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 45, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 66, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 75, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 95, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 95, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 95, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 95, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 95, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 97, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 99, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 112, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 114, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 114, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 124, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 132, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 134, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 136, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 136, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 136, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 220, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 221, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 222, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 223, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 224, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 224, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 225, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 226, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 227, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 227, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 227, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 228, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 228, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 229, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 230, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 231, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 232, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 233, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 233, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 234, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 234, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 234, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 235, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 236, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 237, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 237, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 238, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 238, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 238, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 244, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 244, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 250, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 257, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 257, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 261, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 262, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 262, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 263, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 267, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 267, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 267, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 268, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 268, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 268, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 269, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 269, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 270, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 271, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 272, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 273, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 274, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 275, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 280, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 282, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 282, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 282, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 282, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 284, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 284, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 284, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 284, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 286, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 286, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 288, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 288, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 315, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 333, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 335, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 365, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 365, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 365, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 365, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 393, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 393, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 402, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 440, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 455, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 466, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 470, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 472, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 472, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 472, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 472, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 472, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 472, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 474, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 483, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 497, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 497, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 497, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 504, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 504, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 537, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 537, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 541, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 541, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 541, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 541, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 541, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 543, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 576, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 576, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 584, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 584, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 586, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 586, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 593, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 593, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 593, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 608, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 612, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 623, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 623, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 637, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 637, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 639, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 639, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 667, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 673, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 715, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 841, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 843, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"cite\\\".\", \"full_message\": \"Unknown interpreted text role \\\"cite\\\".\"}, {\"line\": 849, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}, {\"line\": 851, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 888, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 888, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"option\\\".\", \"full_message\": \"Unknown interpreted text role \\\"option\\\".\"}, {\"line\": 888, \"source\": \"./doc/SIRENA.rst\", \"level\": 3, \"type\": \"ERROR\", \"message\": \"Unknown interpreted text role \\\"ref\\\".\", \"full_message\": \"Unknown interpreted text role \\\"ref\\\".\"}]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/70/log?consoleFull"
                                },
                                "level": "RECOMMENDED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": [
                                {
                                    "line": 7,
                                    "source": "./doc/zreferences.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"bibliography\".",
                                    "full_message": "Unknown directive type \"bibliography\".\n\n.. bibliography:: references.bib"
                                },
                                {
                                    "line": 13,
                                    "source": "./doc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"toctree\".",
                                    "full_message": "Unknown directive type \"toctree\".\n\n.. toctree::\n   :maxdepth: 3\n\n   SIRENA\n   SIRENAcommandline\n   SIRENAfunctions\n   zreferences\n"
                                },
                                {
                                    "line": 24,
                                    "source": "./doc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 25,
                                    "source": "./doc/index.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 26,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 30,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 32,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 37,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int addFirstRow(ReconstructInitSIRENA *reconstruct_init, fitsfile **inLibObject, double samprate, int runF0orB0val, gsl_vector *E, gsl_vector *PHEIGHT, gsl_matrix *PULSE, gsl_matrix *PULSEB0, gsl_matrix *MF, gsl_matrix *MFB0, gsl_matrix *COVAR, gsl_matrix *WEIGHT, gsl_matrix *PULSEMaxLengthFixedFilter, gsl_matrix *PULSEMaxLengthFixedFilter_B0)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function writes the first row of the library (without intermediate AB-related values, because it would be necessary to have at least two rows=energies in the library). It also writes the *FIXFILTT* and *FIXFILTF* HDUs with the optimal filters in the time and frequency domain with fixed legnths (base-2 values) and the *PRCLOFWN HDU with the precalculated values for optimal filtering and :option:`OFNoise` = **WEIGHTN*.\n\n    - Declare variables\n    - Write in the first row of the library FITS file some columns **ENERGY**, **PHEIGHT**, **PULSE**, **PULSEB0**, **MF**, **MFB0** with the info provided by the input GSL vectors :cpp:member:`E`, :cpp:member:`PHEIGHT`, :cpp:member:`PULSE`, :cpp:member:`PULSEB0`, :cpp:member:`MF` and :cpp:member:`MFB0`.\n    - Write in the first row of the library FITS file **PLSMXLFF** column if option:`largeFilter` > :option:`OFLength` with the info provided by the input GSL vector :cpp:member:`PULSEMaxLengthFixedFilter`\n    - Write in the first row of the library FITS file **COVARM** and **WEIGHTM** columns if :option:`addCOVAR`/:option:`addINTCOVAR` = yes with the info provided by the input GSL vectors :cpp:member:`COVAR` and :cpp:member:`WEIGHT`\n    - Writing HDUs with fixed filters in time (*FIXFILTT*) and frequency (*FIXFILTF*), **Tx** and **Fx** columns respectively (calculating the optimal filters, :cpp:func:`calculus_optimalFilter`).\n      In time domain **Tx** columns are real numbers but in frequency domain **Fx** columns are complex numbers (so real parts are written in the first half of the column and imaginary parts in the second one)\n    - Calculate and write the pre-calculated values by using the noise weight matrix from noise intervals (M'WM)^{-1}M'W for different lengths, **OFWNx** columns in *PRCLOFWN*\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    fitsfile** **inLibObject**\n\n        FITS object containing information of the library FITS file\n\n    double **samprate**\n\n        Sampling rate\n\n    int **runF0orB0val**\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\n\n    gsl_vector* **E**\n\n        First energy to be included in the library\n\n    gsl_vector* **PHEIGHT**\n\n        Pulse height associated to the first energy to be included in the library\n\n    gsl_matrix* **PULSE**\n\n        Pulse template associated to the first energy to be included in the library\n\n    gsl_matrix* **PULSEB0**\n\n        Pulse template without baseline associated to the first energy to be included in the library\n\n    gsl_matrix* **MF**\n\n        Matched filter associated to the first energy to be included in the library\n\n    gsl_matrix* **MFB0**\n\n        Matched filter (baseline subtracted) associated to the first energy to be included in the library\n\n    gsl_matrix* **COVAR**\n\n        Covariance matrix associated to the first energy to be included in the library\n\n    gsl_matrix* **WEIGHT**\n\n        Weight matrix associated to the first energy to be included in the library\n\n    gsl_matrix* **PULSEMaxLengthFixedFilter**\n\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library\n\n    gsl_matrix* **PULSEMaxLengthFixedFilter_B0**\n\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library (baseline subtracted)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: fitsfile** inLibObject\n\n        FITS object containing information of the library FITS file\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: int runF0orB0val\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\n\n    .. cpp:member:: gsl_vector* E\n\n        First energy to be included in the library\n\n    .. cpp:member:: gsl_vector* PHEIGHT\n\n        Pulse height associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* PULSE\n\n        Pulse template associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* PULSEB0\n\n        Pulse template without baseline associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* MF\n\n        Matched filter associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* MFB0\n\n        Matched filter (baseline subtracted) associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* COVAR\n\n        Covariance matrix associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* WEIGHT\n\n        Weight matrix associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* PULSEMaxLengthFixedFilter\n\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library\n\n    .. cpp:member:: gsl_matrix* PULSEMaxLengthFixedFilter_B0\n\n        Pulse template whose length is :option:`largeFilter` associated to the first energy to be included in the library (baseline subtracted)\n\n"
                                },
                                {
                                    "line": 166,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int align(double samprate, gsl_vector **vector1, gsl_vector **vector2)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    Based on :cite:`GilPita2005`\n\n    This function aligns :cpp:member:`vector1` with :cpp:member:`vector2` (by delaying or moving forward :cpp:member:`vector2`) assuming that :cpp:member:`vector1` and :cpp:member:`vector2` are shifted replicas of the same function.\n\n    From the discrete function :math:`x[n] (n=0,...,N-1,N)` and according to the time shifting property of the Fourier transform:\n\n    .. math::\n\n        & x[n]    <------> X[f]\\\\\n        & x[n-m]  <------> X[f] exp(-j2\\cdot\\pi\\cdot m/N)\n\n    If :math:`\\mathit{Shift} = m` then :math:`\\mathit{PhaseDueToTheShift}= 2\\pi m/N` and thus, :math:`m = \\mathit{PhaseDueToTheShift}\\cdot N/(2\\pi)`\n\n    1) Declare variables\n\n    2) FFT of :cpp:member:`vector1`\n\n    3) FFT of :cpp:member:`vector2`\n\n    4) (Phases of the *FFT_vector1* and *FFT_vector2*) :math:`*size/(2\\pi)`\n\n    5) Shift between the input vectors\n\n    6) *shiftdouble* into *shiftint* (because we are working with samples)\n\n    7) Move forward or delay :cpp:member:`vector1` depending on positive or negative shift\n\n    **Members/Variables**\n\n    double **samprate**\n\n        Sampling rate\n\n    gsl_vector** **vector1**\n\n        GSL vector with input vector\n\n    gsl_vector** **vector2**\n\n        GSL with input vector which is delayed or moved forward to be aligned with :cpp:member:`vector1`\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: gsl_vector** vector1\n\n        GSL vector with input vector\n\n    .. cpp:member:: gsl_vector** vector2\n\n        GSL with input vector which is delayed or moved forward to be aligned with :cpp:member:`vector1`\n\n"
                                },
                                {
                                    "line": 228,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int calculateEnergy(gsl_vector *vector, gsl_vector *filter, gsl_vector_complex *filterFFT, int indexEalpha, int indexEbeta, ReconstructInitSIRENA *reconstruct_init, double samprate, gsl_vector *Dab, gsl_matrix *PRCLCOV, gsl_matrix *PRCLOFWN, double *calculatedEnergy, double *tstartNewDev, int *lagsShift, int LowRes, int productSize, int tooshortPulse_NoLags)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function calculates the energy of a pulse (:cpp:member:`vector`) basically depending on the :option:`EnergyMethod`, :option:`OFNoise`, and the :option:`FilterDomain` selected from input parameters.\n\n    a) **OPTFILT**/**0PAD** and **NSD** (= **I2R** or **I2RFITTED**): Optimal filter = Wiener filter  (see :ref:`optimalFilter_NSD`)\n\n    Once the filter template has been created (:cpp:member:`filter` or :cpp:member:`filterFFT`), pulse height analysis is performed by aligning the template with a pulse and multiplying each point in the template by the corresponding point in the pulse. The sum of these products is the energy.\n\n    In the practice, the alignment of the pulse relative to the trigger is not completely accurate, so a number of *n* lags could be used in order to find the peak value of the energy. The *n* peak values are fitted to a parabola to find the most accurate energy (:option:`LagsOrNot`) and a corrected starting time.\n\n    a) **OPTFILT** and **WEIGHTN** (= **I2R** or **I2RFITTED**) (see :ref:`optimalFilter_WEIGHTN`)\n\n    c) **INTCOVAR** and **COVAR** (see :ref:`INTCOVAR` and :ref:`COVAR`)\n\n\n    **Members/Variables**\n\n    gsl_vector* **vector**\n\n        Pulse whose energy has to be determined\n\n    gsl_vector* **filter**\n\n        Optimal filter in time domain\n\n    gsl_vector_complex* **filterFFT**\n\n        Optimal filter in frequency domain\n\n    int **indexEalpha**\n\n        Index of the energy lower than the energy of the pulse which is being analyzed\n\n    int **indexEbeta**\n\n        Index of the energy higher than the energy of the pulse which is being analyzed\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    double **samprate**\n\n        Sampling rate in Hz\n\n    gsl_vector* **Dab**\n\n        **DAB** column in the library\n\n    gsl_vector* **PRCLCOV**\n\n        **PCOVx** column in the library\n\n    gsl_vector* **PRCLOFWN**\n\n        **OFWNx** column in the library\n\n    double* **calculatedEnergy**\n\n        Calculated energy in eV.\n\n    double **tstartNewDev**\n\n        Addional deviation of the starting time (if :option:`LagsOrNot` = 1)\n\n    int **lagsShift**\n\n        Number of samples shifted to find the maximum of the parabola\n\n    int **LowREs**\n\n        1 if the low resolution energy estimator (without lags) is going to be calculated\n\n    int **productSize**\n\n        Size of the scalar product to be calculated\n\n    int **tooshortPulse_NoLags**\n\n        Pulse too short to apply lags (1) or not (0)\n\n    .. cpp:member:: gsl_vector* vector\n\n        Pulse whose energy has to be determined\n\n    .. cpp:member:: gsl_vector* filter\n\n        Optimal filter in time domain\n\n    .. cpp:member:: gsl_vector_complex* filterFFT\n\n        Optimal filter in frequency domain\n\n    .. cpp:member:: int indexEalpha\n\n        Index of the energy lower than the energy of the pulse which is being analyzed\n\n    .. cpp:member:: int indexEbeta\n\n        Index of the energy higher than the energy of the pulse which is being analyzed\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: double samprate\n\n        Sampling rate in Hz\n\n    .. cpp:member:: gsl_vector* Dab\n\n        **DAB** column in the library\n\n    .. cpp:member:: gsl_vector* PRCLCOV\n\n        **PCOVx** column in the library\n\n    .. cpp:member:: gsl_vector* PRCLOFWN\n\n        **OFWNx** column in the library\n\n    .. cpp:member:: double* calculatedEnergy\n\n        Calculated energy in eV.\n\n    .. cpp:member:: double tstartNewDev\n\n        Addional deviation of the starting time (if :option:`LagsOrNot` = 1)\n\n    .. cpp:member:: int lagsShift\n\n        Number of samples shifted to find the maximum of the parabola\n\n    .. cpp:member:: int LowRes\n\n        1 if the low resolution energy estimator (without lags) is going to be calculated\n\n    .. cpp:member:: int productSize\n\n        Size of the scalar product to be calculated\n\n    .. cpp:member:: int tooshortPulse_NoLags\n\n        Pulse too short to apply lags (1) or not (0)\n\n"
                                },
                                {
                                    "line": 376,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int calculateIntParams(ReconstructInitSIRENA *reconstruct_init, int indexa, int indexb, double samprate, int runF0orB0val, gsl_matrix *modelsaux, gsl_matrix *covarianceaux, gsl_matrix *weightaux, gsl_vector *energycolumn, gsl_matrix **Wabaux, gsl_matrix **TVaux, gsl_vector **tEcolumn, gsl_matrix **XMaux, gsl_matrix **YVaux, gsl_matrix **ZVaux, gsl_vector **rEcolumn, gsl_matrix **Dabaux, gsl_matrix **Sabaux, gsl_matrix **PrecalCOVaux, gsl_matrix **optimalfiltersabFREQaux, gsl_matrix **optimalfiltersabTIMEaux, gsl_matrix *modelsMaxLengthFixedFilteraux, gsl_matrix **DabMaxLengthFixedFilteraux)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function calculates some intermediate scalars, vectors and matrices (WAB, TV, tE, XM, YV, ZV, rE, PAB and DAB) for the interpolation and covariance methods. See :ref:`INTCOVAR` reconstruction method. It is used in :cpp:func:`readAddSortParams` .\n\n    - Declare variables and allocate GSL vectors and matrices\n    - Calculate intermediate scalars, vectors and matrices\n    - Free allocated GSL vectors and matrices\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    int **indexa**\n\n        Lower index of the library to calculate the intermediate params (:math:`\\alpha`)\n\n    int **indexb**\n\n        Higher index of the library to calculate the intermediate params (:math:`\\beta`)\n\n    double **samprate**\n\n        Sampling rate\n\n    int **runF0orB0val**\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\n\n    gsl_matrix* **modelsaux**\n\n        GSL input matrix with model template\n\n    gsl_matrix* **covarianceaux**\n\n        GSL input matrix with covariance matrix\n\n    gsl_matrix* **weightaux**\n\n        GSL input matrix with weight matrix\n\n    gsl_vector* **energycolumn**\n\n        GSL input vector with list of energies\n\n    gsl_matrix** **WAB**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **TVaux**\n\n        Input/output intermediate parameter\n\n    gsl_vector** **tEcolumn**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **XMaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **YVaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **ZVaux**\n\n        Input/output intermediate parameter\n\n    gsl_vector** **rEcolumn**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **Dabaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **Sabaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **PrecalCOVaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **optimalfiltersabFREQaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **optimalfiltersabTIMEaux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix* **modelsMaxLengthFixedFilteraux**\n\n        Input/output intermediate parameter\n\n    gsl_matrix** **PabMaxLengthFixedFilteraux**\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: int indexa\n\n        Lower index of the library to calculate the intermediate params (:math:`\\alpha`)\n\n    .. cpp:member:: int indexb\n\n        Higher index of the library to calculate the intermediate params (:math:`\\beta`)\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: int runF0orB0val\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\n\n    .. cpp:member:: gsl_matrix* modelsaux\n\n        GSL input matrix with model template\n\n    .. cpp:member:: gsl_matrix* covarianceaux\n\n        GSL input matrix with covariance matrix\n\n    .. cpp:member:: gsl_matrix* weightaux\n\n        GSL input matrix with weight matrix\n\n    .. cpp:member:: gsl_vector* energycolumn\n\n        GSL input vector with list of energies\n\n    .. cpp:member:: gsl_matrix** WAB\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix** TVaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_vector** tEcolumn\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **XMaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **YVaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **ZVaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_vector **rEcolumn\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **Dabaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **Sabaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **PrecalCOVaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **optimalfiltersabFREQaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **optimalfiltersabTIMEaux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix* modelsMaxLengthFixedFilteraux\n\n        Input/output intermediate parameter\n\n    .. cpp:member:: gsl_matrix **PabMaxLengthFixedFilteraux\n\n        Input/output intermediate parameter\n\n"
                                },
                                {
                                    "line": 573,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int calculateTemplate(ReconstructInitSIRENA *reconstruct_init, PulsesCollection *pulsesAll, PulsesCollection *pulsesInRecord, double samprate, gsl_vector **pulseaverage, gsl_vector **pulseaverage_B0, double *pulseaverageHeight, gsl_matrix **covariance, gsl_matrix **weight, gsl_vector **pulseaverageMaxLengthFixedFilter, gsl_vector **pulseaverageMaxLengthFixedFilter_B0)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function calculates the template (**PULSE** column in the library) of non piled-up pulses.\n    Just in case in the detection process some piled-up pulses have not been distinguished as different pulses, a pulseheights histogram is built. This function uses the pulseheights histogram (built by using the **PHEIGHT** column of the library), **Tstart** and **quality** to select the non piled-up pulses.\n\n    1) Declare and initialize variables\n\n    2) Before building the histogram, select the pulseheights of the pulses well separated from other pulses whose *quality* = 0\n\n    3) Create the pulseheights histogram\n\n    4) Calculate the pulseaverage only taking into account the valid pulses:\n\n        * Check if the pulse is piled-up or not\n\n        * Non piled-up pulses => Average them\n\n    5) Calculate covariance and weight matrices\n\n    6) Free allocated GSL vectors\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    PulsesCollection* **pulsesAll**\n\n        Collection of pulses found in the previous records\n\n    PulsesCollection* **pulsesInRecord**\n\n        Collection of pulses found in the current record\n\n    double **samprate**\n\n        Sampling rate\n\n    gsl_vector** **pulseaverage**\n\n        GSL vector with the pulseaverage (template) of the non piled-up pulses\n\n    gsl_vector** **pulseaverage_B0**\n\n        GSL vector with the pulseaverage (template) of the non piled-up pulses (baseline subtracted)\n\n    double* **pulseaverageHeight**\n\n        Height value of the pulseaverage\n\n    gsl_matrix** **covariance**\n\n        GSL matrix with covariance matrix\n\n    gsl_matrix** **weight**\n\n        GSL matrix with weight matrix (inverse of covariance matrix)\n\n    gsl_vector** **pulseaverageMaxLengthFixedFilter**\n\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses\n\n     gsl_vector** **pulseaverageMaxLengthFixedFilter_B0**\n\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses (baseline subtracted)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: PulsesCollection* pulsesAll\n\n        Collection of pulses found in the previous records\n\n    .. cpp:member:: PulsesCollection* pulsesInRecord\n\n        Collection of pulses found in the current record\n\n    .. cpp:member: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: gsl_vector** pulseaverage\n\n        GSL vector with the pulseaverage (template) of the non piled-up pulses\n\n    .. cpp:member:: gsl_vector** pulseaverage_B0\n\n        GSL vector with the pulseaverage (template) of the non piled-up pulses (baseline subtracted)\n\n    .. cpp:member:: double* pulseaverageHeight\n\n        Height value of the pulseaverage\n\n    .. cpp:member:: gsl_matrix** covariance\n\n        GSL matrix with covariance matrix\n\n    .. cpp:member:: gsl_matrix** weight\n\n        GSL matrix with weight matrix (inverse of covariance matrix)\n\n    .. cpp:member:: gsl_vector** pulseaverageMaxLengthFixedFilter\n\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses\n\n    .. cpp:member:: gsl_vector** pulseaverageMaxLengthFixedFilter_B0\n\n        GSL vector with the pulseaverage (template) whose length is :option:`largeFilter` of the non piled-up pulses (baseline subtracted)\n\n"
                                },
                                {
                                    "line": 687,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function::  int calculus_optimalFilter(int TorF, int intermediate, int opmode, gsl_vector *matchedfiltergsl, long mf_size, double samprate, int runF0orB0val, gsl_vector *freqgsl, gsl_vector *csdgsl, gsl_vector **optimal_filtergsl, gsl_vector **of_f, gsl_vector **of_FFT, gsl_vector_complex **of_FFT_complex)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    See description also at :ref:`optimal filter chapter <optimalFilter_NSD>`\n\n    This function calculates the optimal filter for a pulse whose matched filter (normalized template) is provided as input\n    parameter, :cpp:member:`matchedfiltergsl`. An optimal filter is just a matched filter that has been adjusted based on the\n    noise spectrum of the system.\n\n    It is assumed that all pulses are scaled versions of a template. In the frequency domain (as noise can be frequency dependent), the raw data\n    can be expressed as :math:`D(f)=E\\cdot S(f)+N(f)`, where :math:`S(f)` is the normalized model pulse shape in the frequency domain,\n    :math:`N(f)` is the power spectrum of the noise and :math:`E` is the scalar amplitude for the photon energy.\n\n    The second assumption is that the noise is stationary, i.e., it does not vary with time. The amplitude of each pulse can then be estimated by\n    minimizing (weighted least-squares sense) the difference between the noisy data and the model pulse shape, being the :math:`\\chi^2` condition\n    to be minimized:\n\n    .. math::\n\n        \\chi^2 = \\int \\frac{(D(f)-E \\cdot S(f))^2}{\\langle\\lvert N(f)\\lvert ^2\\rangle} df\n\n    In the time domain, the amplitude is the best weighted (optimally filtered) sum of the values in the pulse\n\n    .. math::\n\n       E = k \\int d(t)\\cdot of(t)\n\n    where :math:`of(t)` is the time domain expression of optimal filter which in frequency domain\n\n    .. math::\n\n        OF(f) = \\frac{S^*(f)}{\\langle\\lvert N(f)\\lvert ^2\\rangle}\n\n    and :math:`k` is the normalization factor to give :math:`E` in units of energy\n\n    .. math::\n\n        k = \\int \\frac{S(f)\\cdot S^{*}(f)}{\\langle\\lvert N(f)\\lvert ^2\\rangle} df\n\n    Steps:\n\n    - FFT calculus of the matched filter (filter template)\n\n        - Declare variables\n        - Complex FFT values for positive and negative frequencies\n        - FFT calculus\n        - Generation of the frequencies (positive and negative)\n        - Magnitude and argument for positive and negative frequencies\n        - Free allocated GSL vectors\n\n    - :math:`N(f)`\n    - To divide :math:`MatchedFilter(f)/N^2(f)` => :math:`MatchedFilter(f)` and :math:`N(f)` must have the same number of points\n\n        - *if* (:cpp:member:`mf_size` < *freqgsl->size*)\n\n            - *if* ((*freqgsl->size)%mf_size* == 0) => Decimate noise samples\n            - *else* => It is necessary to work only with the positive frequencies so as not to handle the :math:`f=0` => :math:`N(f)` interpolation (:cpp:func:`interpolatePOS`)\n\n        - *else if* (:cpp:member:`mf_size` > *freqgsl->size*) => Error: Noise spectrum must have more samples than pulse spectrum\n        - *else if* (:cpp:member:`mf_size` == *freqgsl->size*) => It is not necessary to do anything\n    - :math:`OptimalFilter = MatchedFilter'(f)/N^2(f)`\n    - Calculus of the normalization factor\n    - Apply the normalization factor\n    - Inverse FFT (to get the expression of the optimal filter in time domain)\n\n        - Complex :math:`OptimalFilter(f)` => Taking into account magnitude :math:`MatchedFilter(f)/N^2(f)` and phase given by :math:`MatchedFilter(f)`\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    int **TorF**\n\n        If :option:`FilterDomain` = **T** => :cpp:member:`TorF` = 0; If :option:`FilterDomain` = **F** => :cpp:member:`TorF` = 1\n\n    int **intermediate**\n\n        If :option:`intermediate` = 0 => Do not write an intermediate file; If :option:`intermediate` = 1 => Write an intermediate file\n\n    int **opmode**\n\n        If 0 => CALIBRATION run (library creation); if 1 => RECONSTRUCTION run (energy determination)\n\n    gsl_vector* **matchedfiltergsl**\n\n        Matched filter associated to the pulse (in general, from the interpolation between two matched filters of the library)\n\n    long **mf_size**\n\n        Matched filter size (samples)\n\n    double **samprate**\n\n        Sampling rate\n\n    int **runF0orB0val**\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0.\n\n    gsl_vector* **freqgsl**\n\n        Frequency axis of the current noise spectral density (input)\n\n    gsl_vector* **csdgsl**\n\n        Current noise spectral density (input)\n\n    gsl_vector* * **optimal_filtergsl**\n\n        Optimal filter in time domain (output)\n\n    gsl_vector** **of_f**\n\n        Frequency axis of the optimal filter spectrum (output)\n\n    gsl_vector** **of_FFT**\n\n        Optimal filter spectrum (absolute values) (output)\n\n    gsl_vector_complex** **of_FFT_complex**\n\n        Optimal filter spectrum (complex values) (output)\n\n    .. cpp:member:: int TorF\n\n        If :option:`FilterDomain` = **T** => :cpp:member:`TorF` = 0; If :option:`FilterDomain` = **F** => :cpp:member:`TorF` = 1\n\n    .. cpp:member:: int intermediate\n\n        If :option:`intermediate` = 0 => Do not write an intermediate file; If :option:`intermediate` = 1 => Write an intermediate file\n\n    .. cpp:member:: int opmode\n\n        If :option:`opmode` = 0 => CALIBRATION run (library creation); If :option:`opmode` = 1 => RECONSTRUCTION run (energy determination)\n\n    .. cpp:member:: gsl_vector* matchedfiltergsl\n\n        Matched filter associated to the pulse (in general, from the interpolation between two matched filters of the library)\n\n    .. cpp:member:: long mf_size\n\n        Matched filter size (samples)\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: int runF0orB0val\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0.\n\n    .. cpp:member:: gsl_vector* freqgsl\n\n        Frequency axis of the current noise spectral density (input)\n\n    .. cpp:member:: gsl_vector* csdgsl\n\n        Current noise spectral density (input)\n\n    .. cpp:member:: gsl_vector* * optimal_filtergsl\n\n        Optimal filter in time domain (output)\n\n    .. cpp:member:: gsl_vector** of_f\n\n        Frequency axis of the optimal filter spectrum (output)\n\n    .. cpp:member:: gsl_vector** of_FFT\n\n        Optimal filter spectrum (absolute values) (output)\n\n    .. cpp:member:: gsl_vector_complex** of_FFT_complex\n\n        Optimal filter spectrum (complex values) (output)\n\n"
                                },
                                {
                                    "line": 863,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int callSIRENA_Filei(char* inputFile, SixtStdKeywords* keywords, ReconstructInitSIRENA* reconstruct_init_sirena,struct Parameters par, double sampling_rate, int *trig_reclength, PulsesCollection* pulsesAll, TesEventFile * outfile)\n\n    Located in file: *initSIRENA.c*\n\n    This function calls SIRENA to build a library or reconstruct energies.\n\n    Steps:\n\n    - Open record file\n    - *initializeReconstructionSIRENA*\n    - Build up *TesRecord* to read the file\n    - Iterate of records and run SIRENA:\n        - *reconstructRecordSIRENA*\n        - Save events to the event_list\n        - Copy trigger keywords to event file\n        - Close file\n\n    **Members/Variables**\n\n    char* **inputFile**\n\n        Input file name\n\n    SixtStdKeywords* **keywords**\n\n        Sixt standard keywords structure\n\n    ReconstructInitSIRENA* **reconstruct_init_sirena**\n\n        Parameters to run SIRENA\n\n    struct Parameters **par**\n\n        Input parameters\n\n    double **sampling_rate**\n\n        Sampling rate\n\n    int* **trig_reclength**\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n    PulsesCollection* **pulsesAll**\n\n        Structure containing the detected pulses\n\n    TesEventFile* **outfile**\n\n        Output events FITS file\n\n    .. cpp:member:: char* inputFile\n\n        Input file name\n\n    .. cpp:member:: SixtStdKeywords* keywords\n\n        Sixt standard keywords structure\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init_sirena\n\n        Parameters to run SIRENA\n\n    .. cpp:member:: struct Parameters par\n\n        Input parameters\n\n    .. cpp:member:: double sampling_rate\n\n        Sampling rate\n\n    .. cpp:member:: int* trig_reclength\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n    .. cpp:member:: PulsesCollection* pulsesAll\n\n        Structure containing the detected pulses\n\n    .. cpp:member:: TesEventFile* outfile\n\n        Output events FITS file\n\n"
                                },
                                {
                                    "line": 947,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int callSIRENA(char* inputFile, SixtStdKeywords* keywords, ReconstructInitSIRENA* reconstruct_init_sirena,struct Parameters par, double sampling_rate, int *trig_reclength, PulsesCollection* pulsesAll, TesEventFile * outfile)\n\n    Located in file: *initSIRENA.c*\n\n    This function calls SIRENA to build a library or reconstruct energies no matter if :cpp:member:`inputFile` is only a FITS file or more (inputFile can start with '@' or not).\n\n    **Members/Variables**\n\n    char* **inputFile**\n\n        Input file name\n\n    SixtStdKeywords* **keywords**\n\n        Sixt standard keywords structure\n\n    ReconstructInitSIRENA* **reconstruct_init_sirena**\n\n        Parameters to run SIRENA\n\n    struct Parameters **par**\n\n        Input parameters\n\n    double **sampling_rate**\n\n        Sampling rate\n\n    int* **trig_reclength**\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n    PulsesCollection* **pulsesAll**\n\n        Structure containing the detected pulses\n\n    TesEventFile* **outfile**\n\n        Output events FITS file\n\n    .. cpp:member:: char* inputFile\n\n        Input file name\n\n    .. cpp:member:: SixtStdKeywords* keywords\n\n        Sixt standard keywords structure\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init_sirena\n\n        Parameters to run SIRENA\n\n    .. cpp:member:: struct Parameters par\n\n        Input parameters\n\n    .. cpp:member:: double sampling_rate\n\n        Sampling rate\n\n    .. cpp:member:: int* trig_reclength\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n    .. cpp:member:: PulsesCollection* pulsesAll\n\n        Structure containing the detected pulses\n\n    .. cpp:member:: TesEventFile* outfile\n\n        Output events FITS file\n\n"
                                },
                                {
                                    "line": 1020,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int checkXmls(struct Parameters* const par)\n\n    Located in file: *initSIRENA.c*\n\n    This function checks if the XML file used to build the library is the same to be used to recconstruct (by checking the checksums)\n\n    **Members/Variables**\n\n    struct Parameters* const **par**\n\n        Structure containing the input parameters specified in *teslib.par* or *tesrecons.par*\n\n    .. cpp:member:: struct Parameters* const par\n\n        Structure containing the input parameters specified in *teslib.par* or *tesrecons.par*\n\n"
                                },
                                {
                                    "line": 1037,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int convertI2R (char* EnergyMethod, double Ibias, double Imin, double Imax, double ADU_CNV, double ADU_BIAS, double I_BIAS, double Ifit, double V0, double RL, double L, gsl_vector **invector, int real_data)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This funcion converts the current space into a quasi-resistance space (see :ref:`rSpace` for **I2R** and **I2RFITTED** modes). The input :cpp:member:`invector` filled in with current values is filled in here with **I2R** or **I2RFITTED** quasi-resistances at the output.\n\n    If the ``ADU_CNV`` keyword is in the input FITS file and :cpp:member:`invector` contains the **ADC** column data from the input FITS file:\n\n        :math:`I(A) = I\\_BIAS+ADU\\_CNV*(ADC-ADU\\_BIAS)` being :math:`ADC=I(adu)` and ``ADU_CNV``, ``ADU_BIAS`` and ``I_BIAS`` are keywords in the input FITS file\n\n        - Conversion according to :option:`EnergyMethod` = **I2R**:\n\n            :math:`DeltaI = I`\n\n            :math:`R/R0 = [1 - (abs(DeltaI)/I\\_BIAS)/(1+abs(DeltaI)/I\\_BIAS)]\\cdot10^5`\n\n        - Conversion according to :option:`EnergyMethod` = **I2RFITTED**:\n\n            :math:`R/V0 = -10^5/(I_{fit}+ADC)` being :math:`I_{fit}` value an input parameter\n\n\n    If the ``ADU_CNV`` keyword is NOT in the input FITS file and :cpp:member:`invector` contains the **ADC** column data from the input FITS file:\n\n        :math:`aducnv = (IMAX-IMIN)/65534` (``IMIN`` and ``IMAX`` are keywords in the input FITS file and 65534 the number of quantification leves)\n\n        :math:`I(A) = ADC*aducnv+IMIN` being :math:`ADC=I(adu)`\n\n        - Conversion according to :option:`EnergyMethod` = **I2R**:\n\n            :math:`DeltaI = I`\n\n            :math:`R/R0 = [1 - (abs(DeltaI)/I0\\_START)/(1+abs(DeltaI)/I0\\_START)]\\cdot10^5`\n\n        - Conversion according to :option:`EnergyMethod` = **I2RFITTED**\n\n            :math:`R/V0 = -10^5/(I_{fit}+ADC)` being :math:`I_{fit}` value an input parameter\n\n    Conversion **I2RDER** is also available:\n\n        :math:`R = (V0-I \\cdot R_L-L \\cdot dI/dt)/I`\n\n    The :math:`10^5` scaling factor has been included in the quasi resistance space (both **I2R** and **I2RFITTED** transformations) to avoid rounding errors when working with very small numbers.\n\n    **Members/Variables**\n\n    char* **EnergyMethod**\n\n        Quasi-resistance energy calculation method: **I2R** or **I2RFITTED**, :option:`EnergyMethod`\n\n    double **Ibias**\n\n        Initial bias current (**I0_START** column)\n\n    double **Imin**\n\n        Current corresponding to 0 ADU (``IMIN`` keyword)\n\n    double **Imax**\n\n        Current corresponding to maximum ADU (``IMAX`` keyword)\n\n    double **ADU_CNV**\n\n        Conversion factor (A/adu) (``ADU_CNV`` keyword)\n\n    double **ADU_BIAS**\n\n        Bias current (adu) (``ADU_BIAS`` keyword)\n\n    double **I_BIAS**\n\n        Bias current (A) (``I_BIAS`` keyword)\n\n    double **Ifit**\n\n        Constant to apply the I2RFITTED conversion (adu)\n\n    double **V0**\n\n        Constant voltage bias\n\n    double **RL**\n\n        Effective load resistor\n\n     double **L**\n\n        Effective inductance\n\n    gsl_vector* **invector**\n\n        GSL vector with input signal values (**ADC** column of the input FITS file)\n\n    .. cpp:member:: char* EnergyMethod\n\n        Quasi-resistance energy calculation method: **I2R** or **I2RFITTED**, :option:`EnergyMethod`\n\n    .. cpp:member:: double Ibias\n\n        Initial bias current (**I0_START** column)\n\n    .. cpp:member:: double Imin\n\n        Current corresponding to 0 ADU (``IMIN`` keyword)\n\n    .. cpp:member:: double Imax\n\n        Current corresponding to maximum ADU (``IMAX`` keyword)\n\n    .. cpp:member:: double ADU_CNV\n\n        Conversion factor (A/adu) (``ADU_CNV`` keyword)\n\n    .. cpp:member:: double ADU_BIAS\n\n        Bias current (adu) (``ADU_BIAS`` keyword)\n\n    .. cpp:member:: double I_BIAS\n\n        Bias current (A) (``I_BIAS`` keyword)\n\n    .. cpp:member:: double Ifit\n\n        Constant to apply the I2RFITTED conversion (adu)\n\n    .. cpp:member:: double V0\n\n        Constant voltage bias\n\n    .. cpp:member:: double RL\n\n        Effective load resistor\n\n    .. cpp:member:: double L\n\n        Effective inductance\n\n    .. cpp:member:: gsl_vector* invector\n\n        GSL vector with input signal values (**ADC** column of the input FITS file)\n\n"
                                },
                                {
                                    "line": 1179,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int createDetectFile(ReconstructInitSIRENA* reconstruct_init, double samprate, fitsfile **dtcObject, int inputPulselength)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function creates an intermediate FITS file with some useful info (during the development phase) if the :option:`intermediate` input parameter is set to 1.\n\n    The intermediate FITS file will contain 2 HDUs:\n\n        * *PULSES* HDU will contain some info about the found pulses: **TSTART**, **I0** (the pulse itself), **TEND**, **TAURISE**, **TAUFALL** and **QUALITY**\n\n        * *TESTINFO* HDU will contain columns **FILDER** (the low-pass filtered and differentiated records) and **THRESHOLD**\n\n    If file exists => Check :option:`clobber` for overwritting. If it does not, then create it.\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    double **samprate**\n\n        Sampling rate\n\n    fitsfile **dtcObject**\n\n        Object which contains information of the intermediate FITS file (used also by :cpp:func:`writeTestInfo` and :cpp:func:`writePulses`).\n\n    int **inputPulseLength**\n\n        :option:`OFLength` input parameter\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: fitsfile dtcObject\n\n        Object which contains information of the intermediate FITS file (used also by :cpp:func:`writeTestInfo` and :cpp:func:`writePulses`).\n\n    .. cpp:member:: int inputPulseLength\n\n        :option:`OFLength` input parameter\n\n"
                                },
                                {
                                    "line": 1228,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int createHisto(gsl_vector *invector, int nbins, gsl_vector **xhistogsl, gsl_vector **yhistogsl)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function builds the histogram of the input vector.\n\n      - Histogram x-axis values are the different input vector values (pulseheights)\n\n      - Histogram y-axis values are the the number of cases per unit of the variable on the horizontal axis\n\n    1) Declare variables\n\n    2) It will work with the positive elements of the input vector => *invectoraux2*\n\n    3) Check if all the values of :cpp:member:`invector` are the same => Histogram of only one bin\n\n    4) Obtain *invector_max* and *invector_min*\n\n    5) Obtain *binSize*\n\n    6) Create histogram axis\n\n    7) Free allocated GSL vectors\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        GSL input vector\n\n    int **nbins**\n\n        Number of bins to build the histogram\n\n    gsl_vector** **xhistogsl**\n\n        GSL vector with output histogram x-axis\n\n    gsl_vector** **yhistogsl**\n\n        GSL vector with output histogram y-axis\n\n    .. cpp:member:: gsl_vector* invector\n\n        GSL input vector\n\n    .. cpp:member:: int nbins\n\n        Number of bins to build the histogram\n\n    .. cpp:member:: gsl_vector** xhistogsl\n\n        GSL vector with output histogram x-axis\n\n    .. cpp:member:: gsl_vector** yhistogsl\n\n        GSL vector with output histogram y-axis\n\n"
                                },
                                {
                                    "line": 1287,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int createLibrary(ReconstructInitSIRENA* reconstruct_init, bool *appendToLibrary, fitsfile **inLibObject)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function creates the pulse templates library FITS file, if it does not exist yet. Otherwise, it opens it (to add a new row).\n\n        1) If it exists => Open it and set *appendToLibrary = true*\n\n        2) If it does not exist => Create it and set *appendToLibrary = false*\n\n            - Write keyword ``EVENTCNT`` = 1 in the *LIBRARY* extension\n            - Write the whole list of input parameters in ``HISTORY`` in the *Primary* extension (by usin 'HDpar_stamp')\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    bool **appendToLibrary**\n\n        Used by the function :cpp:func:`writeLibrary`\n\n    fitsfile** **inLibObject**\n\n        Object which contains information of the library FITS file (used also by :cpp:func:`writeLibrary`)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: bool appendToLibrary\n\n        Used by the function :cpp:func:`writeLibrary`\n\n    .. cpp:member:: fitsfile** inLibObject\n\n        Object which contains information of the library FITS file (used also by :cpp:func:`writeLibrary`)\n"
                                },
                                {
                                    "line": 1326,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int createTPSreprFile ()\n\n    Located in file: *gennoisespec.cpp*\n\n    This function creates the gennoisespec output FITS file.\n\n    Steps:\n\n    - Create the noise representation file (if it does not exist already)\n    - Create the extensions *NOISE*, *NOISEALL* and *WEIGHTMS*\n    - Write keywords\n\n"
                                },
                                {
                                    "line": 1341,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int differentiate(gsl_vector **invector, int szVct)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function applies the derivative method :math:`x_i-x_{i-1}` to the input vector.\n\n    The derivative method provides more sensitivity to handle with piled-up pulses.\n    Moreover, little variations of the baseline will not affect.\n\n    **Members/Variables**\n\n    gsl_vector** **invector**\n\n        Input/Ouput GSL vector (non-differentiate input vector/differentiate input vector)\n\n    int **szVct**\n\n        Size of :cpp:member:`invector`\n\n    .. cpp:member:: gsl_vector** invector\n\n        Input/Ouput GSL vector (non-differentiate input vector/differentiate input vector)\n\n    .. cpp:member:: int szVct\n\n        Size of :cpp:member:`invector`\n\n"
                                },
                                {
                                    "line": 1371,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int eigenVV (gsl_matrix *matrixin, gsl_matrix **eigenvectors, gsl_vector **eigenvalues)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This funcion provides the principal eigenvectors and eigenvalues of the input matrix (at the moment, the first two eigenvalues and eigenvectors). The eigenvalues and eigenvectors are sorted in descending order and only the principal components are provided.\n\n    - Calculate the eigenvectors and the eigenvalues\n    - Sort the eigenvectors and the eigenvalues in descending order\n    - Choose the main eigenvectors and eigenvalues (the principal components analysis). At the moment, the first two eigenvectors and eigenvalues\n\n    **Members/Variables**\n\n    gsl_matrix* **matrixin**\n\n        Input GSL matrix\n\n    gsl_matrix** **eigenvectors**\n\n        Subset of eigenvectors of 'matrixin' chosen by PCA (the first two ones)\n\n    gsl_vector** **eigenvalues**\n\n        Subset of eigenvalues of 'matrixin' chosen by PCA (the first two ones)\n\n    .. cpp:member:: gsl_matrix* matrixin\n\n        Input GSL matrix\n\n    .. cpp:member:: gsl_matrix** eigenvectors\n\n        Subset of eigenvectors of 'matrixin' chosen by PCA (the first two ones)\n\n    .. cpp:member:: gsl_vector** eigenvalues\n\n        Subset of eigenvalues of 'matrixin' chosen by PCA (the first two ones)\n\n"
                                },
                                {
                                    "line": 1408,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void exit_error(const char* const func, string msg, int status)\n\n    Located in file: *genutils.cpp*\n\n    This function prints out error messages and exits program.\n\n    **Members/Variables**\n\n    const char* const **func**\n\n        Function name whose error is printed\n\n    string **msg**\n\n        Error message to be printed\n\n    int **status**\n\n        Status\n\n    .. cpp:member:: const char* const func\n\n        Function name whose error is printed\n\n    .. cpp:member:: string msg\n\n        Error message to be printed\n\n    .. cpp:member::  int status\n\n        Status\n\n"
                                },
                                {
                                    "line": 1443,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int FFT(gsl_vector *invector, gsl_vector_complex *outvector, double STD)\n\n    Located in file: *genutils.cpp*\n\n    This function calculates the FFT of the elements of a vector.\n\n    GSL library (overview of FFTs):\n\n    For physical applications it is important to remember that the index appearing in the DFT does not correspond directly to a physical frequency. If the time-step of the\n    DFT is :math:`\\Delta` then the frequency domain includes both positive and negative frequencies, ranging from :math:`-1/(2\\Delta)` through 0 to :math:`+1/(2\\Delta)`. The positive frequencies are stored from the beginning of the array up to the middle, and the negative frequencies are stored backwards from the end of the array.\n\n    Here is a table which shows the layout of the array data, and the correspondence between the time domain data z, and the frequency domain data x.\n\n    =======   ==================   =========================================\n     index         z                        x = FFT(z)\n    =======   ==================   =========================================\n     0        :math:`z(t = 0)`     :math:`x(f = 0)`\n     1        :math:`z(t = 1)`     :math:`x(f = 1/(n\\Delta))`\n     2        :math:`z(t = 2)`     :math:`x(f = 2/(n\\Delta))`\n     [...]        [........]             [..................]\n     n/2      :math:`z(t = n/2)`   :math:`x(f = +1/(2\\Delta),-1/(2\\Delta))`\n     [...]        [........]             [..................]\n     n-3      :math:`z(t = n-3)`   :math:`x(f = -3/(n\\Delta))`\n     n-2      :math:`z(t = n-2)`   :math:`x(f = -2/(n\\Delta))`\n     n-1      :math:`z(t = n-1)`   :math:`x(f = -1/(n\\Delta))`\n    =======   ==================   =========================================\n\n    The frequency axis will be built as *f = i/STD = i/(size/samprate)* with *i* varying from 0 to *size/2-1* (*n=size* and :math:`\\Delta=1/samprate`  sec/sample).\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        Input GSL vector\n\n    gsl_vector_complex* **outvector**\n\n        Output GSL complex vector with the FFT of :cpp:member:`invector`\n\n    double **STD**\n\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\n\n    .. cpp:member:: gsl_vector* invector\n\n        Input GSL vector\n\n    .. cpp:member:: gsl_vector_complex* outvector\n\n        Output GSL complex vector with the FFT of :cpp:member:`invector`\n\n    .. cpp:member::  double STD\n\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\n\n"
                                },
                                {
                                    "line": 1499,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int FFTinverse(gsl_vector_complex *invector, gsl_vector *outvector, double STD)\n\n    Located in file: *genutils.cpp*\n\n    This function calculates the inverse FFT of the elements of a vector.\n\n    **Members/Variables**\n\n    gsl_vector_complex* **invector**\n\n        Input GSL complex vector\n\n    gsl_vector* **outvector**\n\n        Output GSL vector with the inverse FFT of :cpp:member:`invector`\n\n    double **STD**\n\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\n\n    .. cpp:member:: gsl_vector_complex* invector\n\n        Input GSL complex vector\n\n    .. cpp:member:: gsl_vector* outvector\n\n        Output GSL vector with the inverse FFT of :cpp:member:`invector`\n\n    .. cpp:member:: double STD\n\n        SelectedTimeDuration = (Size of :cpp:member:`invector`)/*samprate*\n\n"
                                },
                                {
                                    "line": 1532,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int filderLibrary (ReconstructInitSIRENA** reconstruct_init, double samprate)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function calculates the (low-pass filter and) derivative of the models (*pulse_templates*) in the library (only necessary if first record),\n    and it stores the *pulse_templates_filder* and the *maxDERs* and *samp1DERs* in the :cpp:member:`reconstruct_init` structure.\n\n    The maximum of the (low-pass filtered and) differentiated pulse has to be compared to the *maxDERs* to select the appropriate model. Or, the 1st sample out of the differentiated pulse has to be compared to the *samp1DERs* to select the appropriate model.\n\n    1) Check if it is the first record\n\n    2) (Low-pass filter and) differentiate the models (*pulse_templates*) of the library\n\n    3) Store the (low-pass filtered) derivatives in *pulse_templates_filder*\n\n    4) Calculate the maximum of the (low-pass filtered and) differentiated models (*maxDERs*)\n\n    5) Locate the 1st sample of the (low-pass filtered and) differentiated models (*samp1DERs*)\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    double **samprate**\n\n        Sampling rate\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n"
                                },
                                {
                                    "line": 1570,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: bool fileExists(const std::string& name)\n\n    Located in file: *genutils.cpp*\n\n    This function checks for file existence returning a boolean value.\n\n    **Members/Variables**\n\n    const std::string& **name**\n\n        File name\n\n    .. cpp:member:: const std::string& name\n\n        File name\n\n"
                                },
                                {
                                    "line": 1587,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int fillReconstructInitSIRENAGrading (struct Parameters par, AdvDet *det, ReconstructInitSIRENA** reconstruct_init_sirena)\n\n    Located in file: *initSIRENA.c*\n\n    This function reads the grading data from the XML file and store it in the member *grading* of the :cpp:member:`reconstruct_init_sirena`.\n\n    It also checks if :option:`prebuff_0pad` input parameter value (preBuffer when **0PAD**) is possible depending on the prebuffer values in the XML file.\n\n    :cpp:member:`reconstruct_init_sirena->grading` number of rows = Number of grades in the XML file\n    :cpp:member:`reconstruct_init_sirena->grading` number of columns = 3 (0->pre, 1->filter length inlcuding prebuffer, 2->prebuffer values)\n\n    **Members/Variables**\n\n    struct Parameters **par**\n\n        Input parameters\n\n    AdvDet* **det**\n\n        Pixel detector\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: struct Parameters par\n\n        Input parameters\n\n    .. cpp:member:: AdvDet* det\n\n        Pixel detector\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n"
                                },
                                {
                                    "line": 1625,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int filterByWavelets (ReconstructInitSIRENA* reconstruct_init, gsl_vector **invector, int length, int *onlyOnce)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function filters the input/output signal :cpp:member:`invector`, reducing the noise level.\n\n    Steps:\n\n    - It is only going to work with *n* elements of :cpp:member:'invector'\n    - Discrete Wavelet Transform\n    - Sorting coefficients\n    - Hard thresholding: *n-nc* coefficients are deleted (those with low energy)\n    - Inverse DWT\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    gsl_vector** **invector**\n\n        Input/output signal\n\n    int **length**\n\n        Length of the wavelet transform\n\n    int* **onlyOnce**\n\n        In order to control the times to be executed\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: gsl_vector** invector\n\n        Input/output signal\n\n    .. cpp:member:: int length\n\n        Length of the wavelet transform\n\n    .. cpp:member:: int *onlyOnce\n\n        In order to control the times to be executed\n\n"
                                },
                                {
                                    "line": 1674,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findInterval(int tail_duration, gsl_vector *invector, gsl_vector *startpulse, int npin, int pulse_length, int nPF, int interval, int *ni, gsl_vector **startinterval)\n\n    Located in file: *gennoisespec.cpp*\n\n    This function finds the pulse-free intervals when the input vector has pulses.\n    The pulse-free intervals must have a minimum length (*intervalMinBins*).\n    The interval with pulse is :math:`Tstart,Tend+nPF*pulse \\_ length` (being :math:`Tend=n*pulse \\_ length`).\n\n    Steps:\n\n    - Declare variables\n    - Processing if the input vector has more pulses\n        - It looks for pulse-free intervals between pulses\n    - Processing if there are no more pulses in the input vector\n        - It looks for pulse-free intervals at the end of the event and the search for more pulse-free intervals is finished\n\n    **Members/Variables**\n\n    int **tail_duration**\n\n        Length of the tail of a previous pulse\n\n    gsl_vector* **invector**\n\n        Input vector WITH pulses\n\n    gsl_vector* **startpulse**\n\n        Vector with the Tstart of all the pulses of the input vector (samples)\n\n    int **npin**\n\n        Number of pulses in the input vector\n\n    int **pulse_length**\n\n        Pulse length (samples)\n\n    int **nPF**\n\n        Number of pulse lengths after ending the pulse to start the pulse-free interval\n\n    int **interval**\n\n        Minimum length of the interval (samples)\n\n    int **ni**\n\n        Number of pulse-free intervals in the input vector\n\n    gsl_vector** **startinterval**\n\n        Vector with the starting time of each pulse-free interval (samples)\n\n    .. cpp:member:: int tail_duration\n\n        Length of the tail of a previous pulse\n\n    .. cpp:member:: gsl_vector* invector\n\n        Input vector WITH pulses\n\n    .. cpp:member:: gsl_vector* startpulse\n\n        Vector with the Tstart of all the pulses of the input vector (samples)\n\n    .. cpp:member:: int npin\n\n        Number of pulses in the input vector\n\n    .. cpp:member:: int pulse_length\n\n        Pulse length (samples)\n\n    .. cpp:member:: int nPF\n\n        Number of pulse lengths after ending the pulse to start the pulse-free interval\n\n    .. cpp:member:: int interval\n\n        Minimum length of the interval (samples)\n\n    .. cpp:member:: int ni\n\n        Number of pulse-free intervals in the input vector\n\n    .. cpp:member:: gsl_vector** startinterval\n\n        Vector with the starting time of each pulse-free interval (samples)\n"
                                },
                                {
                                    "line": 1764,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findIntervalN (gsl_vector *invector, int interval, int *ni, gsl_vector **startinterval)\n\n    Located in file: *gennoisespec.cpp*\n\n    This function finds the pulse-free intervals when the input vector has NO pulses.\n    The pulse-free intervals must have a minimum length (*intervalMinBins*).\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        Input vector WITHOUT pulses\n\n    int **interval**\n\n        Minimum length of the interval (samples)\n\n    int* **ni**\n\n        Number of pulse-free intervals in the input vector\n\n    gsl_vector** **startinterval**\n\n        Vector with the starting time of each pulse-free interval (samples)\n\n    .. cpp:member:: gsl_vector* invector\n\n        Input vector WITHOUT pulses\n\n    .. cpp:member:: int interval\n\n        Minimum length of the interval (samples)\n\n    .. cpp:member:: int* ni\n\n        Number of pulse-free intervals in the input vector\n\n    .. cpp:member:: gsl_vector** startinterval\n\n        Vector with the starting time of each pulse-free interval (samples)\n\n"
                                },
                                {
                                    "line": 1806,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findMeanSigma(gsl_vector *invector, double *mean, double *sigma)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function calculates the mean and the standard deviation of the input vector.\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        Input GSL vector\n\n    double* **mean**\n\n        Mean of the elements of :cpp:member:`invector`\n\n    double* **sigma**\n\n        Standard deviation of the elements of :cpp:member:`invector`\n\n    .. cpp:member:: gsl_vector* invector\n\n        Input GSL vector\n\n    .. cpp:member:: double* mean\n\n        Mean of the elements of :cpp:member:`invector`\n\n    .. cpp:member:: double* sigma\n\n        Standard deviation of the elements of :cpp:member:`invector`\n\n"
                                },
                                {
                                    "line": 1839,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findPulsesCAL(gsl_vector *vectorin, gsl_vector *vectorinDER, gsl_vector **tstart, gsl_vector **quality, gsl_vector **pulseheight, gsl_vector **maxDERgsl, int *nPulses, double *threshold, double scalefactor, double samplingRate, int samplesup, double nsgms, double lb, double lrs, ReconstructInitSIRENA *reconstruct_init, double stopcriteriamkc, double kappamkc)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function is going to find the pulses in a record (in the *CALibration* mode) by using the function :cpp:func:`findTstartCAL`.\n\n    Steps:\n\n    - Declare variables\n    - Establish the threshold (call :cpp:func:`medianKappaClipping`)\n    - Find pulses (call :cpp:func:`findTstartCAL`)\n    - If at least a pulse is found\n\n      - Get :cpp:member:`pulseheight` of each found pulse (in order to be used to build the pulse templates library)\n\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    gsl_vector* **vectorin**\n\n        Not filtered record\n\n    gsl_vector* **vectorinDER**\n\n        Derivative of the (low-pass filtered) :cpp:member:`vectorin`\n\n    gsl_vector** **tstart**\n\n        Starting time of the found pulses into the record (in samples)\n\n    gsl_vector** **quality**\n\n        Quality of the found pulses into the record\n\n    gsl_vector** **pulseheight**\n\n        Pulse height of the found pulses into the record\n\n    gsl_vector** **maxDERgsl**\n\n        Maximum of the derivative of the found (low-pass filtered) pulses into the record\n\n    int* **nPulses**\n\n        Number of found pulses\n\n    double* **threshold**\n\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\n\n    double **scalefactor**\n\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\n\n    double **samplingRate**\n\n        Sampling rate\n\n    int **samplesup**\n\n        Number of consecutive samples over the threshold to locate a pulse (:option:`samplesUp`)\n\n    double **nsgms**\n\n        Number of Sigmas to establish the threshold (:option:`nSgms`)\n\n    double **lb**\n\n        Vector containing the baseline averaging length used for each pulse\n\n    double **lrs**\n\n        Running sum length (:option:`LrsT` in samples)\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    double **stopcriteriamkc**\n\n        Used in :cpp:func:`medianKappaClipping` (%)\n\n    double **kappamkc**\n\n        Used in :cpp:func:`medianKappaClipping`\n\n    .. cpp:member:: gsl_vector* vectorin\n\n        Not filtered record\n\n    .. cpp:member:: gsl_vector* vectorinDER\n\n        Derivative of the (low-pass filtered) :cpp:member:`vectorin`\n\n    .. cpp:member:: gsl_vector** tstart\n\n        Starting time of the found pulses into the record (in samples)\n\n    .. cpp:member:: gsl_vector** quality\n\n        Quality of the found pulses into the record\n\n    .. cpp:member:: gsl_vector** pulseheight\n\n        Pulse height of the found pulses into the record\n\n    .. cpp:member:: gsl_vector** maxDERgsl\n\n        Maximum of the derivative of the found (low-pass filtered) pulses into the record\n\n    .. cpp:member:: int* nPulses\n\n        Number of found pulses\n\n    .. cpp:member:: double* threshold\n\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\n\n    .. cpp:member:: double scalefactor\n\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\n\n    .. cpp:member:: double samplingRate\n\n        Sampling rate\n\n    .. cpp:member:: int samplesup\n\n        Number of consecutive samples over the threshold to locate a pulse (:option:`samplesUp`)\n\n    .. cpp:member:: double nsgms\n\n        Number of Sigmas to establish the threshold (:option:`nSgms`)\n\n    .. cpp:member:: double lb\n\n        Vector containing the baseline averaging length used for each pulse\n\n    .. cpp:member:: double lrs\n\n        Running sum length (:option:`LrsT` in samples)\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: double stopcriteriamkc\n\n        Used in :cpp:func:`medianKappaClipping` (%)\n\n    .. cpp:member:: double kappamkc\n\n        Used in :cpp:func:`medianKappaClipping`\n\n"
                                },
                                {
                                    "line": 1995,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findPulsesNoise(gsl_vector *vectorin, gsl_vector *vectorinDER, gsl_vector **tstart, gsl_vector **quality, int *nPulses, double *threshold, double scalefactor, int sizepulsebins, double samplingRate, int samplesup, double nsgms, double stopcriteriamkc, double kappamkc)\n\n    Located in file: *gennoisespec.cpp*\n\n    This function is going to find the pulses in a record by using the function :cpp:func:`findTstartNoise`\n\n    Steps:\n\n    - Declare variables\n    - Establish the threshold (call :cpp:func:`medianKappaClipping`)\n    - Find pulses (call :cpp:func:`findTstartNoise`)\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    gsl_vector* **vectorin**\n\n        Not filtered record\n\n    gsl_vector* **vectorinDER**\n\n        Derivative of the low-pass filtered :cpp:member:`vectorin`\n\n    gsl_vector** **tstart**\n\n        Starting time of the found pulses into the record (samples)\n\n    gsl_vector** **quality**\n\n        Quality of the found pulses into the record\n\n    int* **nPulses**\n\n        Number of found pulses\n\n    double* **threshold**\n\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\n\n    double **scalefactor**\n\n        Scale factor to calculate the LPF box-car length\n\n    int **sizepulsebins**\n\n        Size of the pulse (samples)\n\n    double **samplingRate**\n\n        Sampling rate\n\n    int **samplesup**\n\n        Number of consecutive samples over the threshold to locate a pulse\n\n    double **nsgms**\n\n        Number of Sigmas to establish the threshold\n\n    double **stopCriteriamkc**\n\n        Used in :cpp:func:`medianKappaClipping_noiseSigma` (%)\n\n    double **kappamkc**\n\n        Used in :cpp:func:`medianKappaClipping_noiseSigma`\n\n    .. cpp:member:: gsl_vector* vectorin\n\n        Not filtered record\n\n    .. cpp:member:: gsl_vector* vectorinDER\n\n        Derivative of the low-pass filtered 'vectorin'\n\n    .. cpp:member:: gsl_vector** tstart\n\n        Starting time of the found pulses into the record (samples)\n\n    .. cpp:member:: gsl_vector** quality\n\n        Quality of the found pulses into the record\n\n    .. cpp:member:: int* nPulses\n\n        Number of found pulses\n\n    .. cpp:member:: double* threshold\n\n        Threshold used to find the pulses (output parameter because it is necessary out of the function)\n\n    .. cpp:member:: double scalefactor\n\n        Scale factor to calculate the LPF box-car length\n\n    .. cpp:member:: int sizepulsebins\n\n        Size of the pulse (samples)\n\n    .. cpp:member:: double samplingRate\n\n        Sampling rate\n\n    .. cpp:member:: int samplesup\n\n        Number of consecutive samples over the threshold to locate a pulse (*samplesUp*)\n\n    .. cpp:member:: double nsgms\n\n        Number of Sigmas to establish the threshold\n\n    .. cpp:member:: double stopCriteriamkc\n\n        Used in :cpp:func:`medianKappaClipping_noiseSigma` (%)\n\n    .. cpp:member:: double kappamkc\n\n        Used in :cpp:func:`medianKappaClipping_noiseSigma`\n\n"
                                },
                                {
                                    "line": 2115,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int FindSecondaries(int maxPulsesPerRecord, gsl_vector *adjustedDerivative, double adaptativethreshold, ReconstructInitSIRENA *reconstruct_init, int tstartFirstEvent, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl, gsl_vector **lagsgsl)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function runs after :cpp:func:`InitialTriggering` to find all the events (except the first one) in the first derivative of the (low-pass filtered) record by using the Adjusted Derivative detection method.\n\n    Steps:\n\n    - Declare variables\n    - Establishing the criteria of the slope of the derivative depending on the sampling rate\n    - It is necessary to find the tstarts...\n\n      It looks for an event and if a pulse is found, it looks for another event\n\n        - It looks for an event since the beginning (or the previous event) to the end of the record.\n          The first condition to detect an event is that the :cpp:member:`adjustedDerivative` was over the :cpp:member:`threshold`\n\n            - Select the model of the found pulse from the libary by using the 1st sample of the derivative (*samp1DER*)\n            - Dot product between the detected pulse and the pulse template in 3 different lags\n\n                - If maximum of the dot product found => Stop calculating dot products in more lags\n                - If maximum of the dot product not found => Calculate dot products in more lags (number of lags is limited to 5)\n\n            - If maximum of the dot product not found => tstart is the first sample crossing above the threshold (without jitter)\n\n                - Average of the first 4 samples of the derivative\n                - Find model in order to subtract\n\n            - If maximum of the dot product found => Parabola analytically defined => Locate the maximum => New tstart (with jitter)\n\n                - Iterative process in order to extract the best template from the library:\n                    - *samp1DER* correction\n                    - Find the model from the libary by using the corrected *samp1DER*\n                    - Dot product in 3 lags\n                    - Locate the maximum of the parabola\n                - *samp1DER* correction\n                - Find model in order to subtract\n                - Template correction\n                - Average of the first 4 samples of the derivative\n\n            - The second condition to detect an event is meeting the criteria of the slope of the derivative\n\n        - Subtract the model from the adjusted derivative\n\n            - Select the model of the found event from the libary by using the first sample of the derivative\n            - Subtract\n\n    - ... Or to use the tstart provided as input parameters\n\n        - Obtain the *maxDERs* of the events whose tstarts have been provided (by using the maximum of the derivative to find the model)\n\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    int **maxPulsesPerRecord**\n\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\n\n    gsl_vector* **adjustedDerivative**\n\n        First derivative of the (low-pass filtered) record\n\n    double **adaptativethreshold**\n\n        Threshold\n\n    double **samprate**\n\n        Sampling rate\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    int **tstartFirstEvent**\n\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\n\n    int* **numberPulses**\n\n        Number of found events\n\n    gsl_vector** **tstartgsl**\n\n        Starting time of the found events (in samples)\n\n    gsl_vector** **flagTruncated**\n\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\n\n    gsl_vector** **maxDERgsl**\n\n        Maximum of the derivative of the event\n\n    gsl_vector** **samp1DERgsl**\n\n        Average of the first 4 samples of the derivative of the event\n\n    gsl_vector** **lagsgsl**\n\n        Number of necessary lags to establish the tstart (currently limited to 5)\n\n    .. cpp:member:: int maxPulsesPerRecord\n\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\n\n    .. cpp:member:: gsl_vector* adjustedDerivative\n\n        First derivative of the (low-pass filtered) record\n\n    .. cpp:member:: double adaptativethreshold\n\n        Threshold\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: int tstartFirstEvent\n\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\n\n    .. cpp:member:: int* numberPulses\n\n        Number of found events\n\n    .. cpp:member:: gsl_vector** tstartgsl\n\n        Starting time of the found events (in samples)\n\n    .. cpp:member:: gsl_vector** flagTruncated\n\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\n\n    .. cpp:member:: gsl_vector** maxDERgsl\n\n        Maximum of the derivative of the event\n\n    .. cpp:member:: gsl_vector** samp1DERgsl\n\n        Average of the first 4 samples of the derivative of the event\n\n    .. cpp:member:: gsl_vector** lagsgsl\n\n        Number of necessary lags to establish the tstart (currently limited to 5)\n\n"
                                },
                                {
                                    "line": 2267,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int FindSecondariesSTC(int maxPulsesPerRecord, gsl_vector *adjustedDerivative, double adaptativethreshold, ReconstructInitSIRENA *reconstruct_init, int tstartFirstEvent, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl, gsl_vector **lagsgsl)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function runs after :cpp:func:`InitialTriggering` to find all the events (except the first one) in the first derivative of the (low-pass filtered) record by using the Single Threshold Crossing method.\n\n    Steps:\n\n    - Declare variables\n    - It is necessary to find the tstarts...\n\n      It looks for an event and if a pulse is found, it looks for another event\n\n        - It looks for an event since the beginning (or the previous event) to the end of the record.\n          The condition to detect an event is that the :cpp:member:`adjustedDerivative` was over the :cpp:member:`threshold` at least :option:`samplesUp` consecutive samples\n\n    - ... Or to use the tstart provided as input parameters\n\n        - Obtain the *maxDERs* of the events whose tstarts have been provided\n\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    int **maxPulsesPerRecord**\n\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\n\n    gsl_vector* **adjustedDerivative**\n\n        First derivative of the (low-pass filtered) record\n\n    double **adaptativethreshold**\n\n        Threshold\n\n    double **samprate**\n\n        Sampling rate\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    int **tstartFirstEvent**\n\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\n\n    int* **numberPulses**\n\n        Number of found events\n\n    gsl_vector** **tstartgsl**\n\n        Starting time of the found events (in samples)\n\n    gsl_vector** **flagTruncated**\n\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\n\n    gsl_vector** **maxDERgsl**\n\n        Maximum of the derivative of the event\n\n    gsl_vector** **samp1DERgsl**\n\n        Average of the first 4 samples of the derivative of the event\n\n    .. cpp:member:: int maxPulsesPerRecord\n\n        Expected maximum number of events per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\n\n    .. cpp:member:: gsl_vector* adjustedDerivative\n\n        First derivative of the (low-pass filtered) record\n\n    .. cpp:member:: double adaptativethreshold\n\n        Threshold\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: int tstartFirstEvent\n\n        Tstart of the first event of the record (in samples) found by :cpp:func:`InitialTriggering`\n\n    .. cpp:member:: int* numberPulses\n\n        Number of found events\n\n    .. cpp:member:: gsl_vector** tstartgsl\n\n        Starting time of the found events (in samples)\n\n    .. cpp:member:: gsl_vector** flagTruncated\n\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\n\n    .. cpp:member:: gsl_vector** maxDERgsl\n\n        Maximum of the derivative of the event\n\n    .. cpp:member:: gsl_vector** samp1DERgsl\n\n        Average of the first 4 samples of the derivative of the event\n\n"
                                },
                                {
                                    "line": 2380,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findTstartCAL(int maxPulsesPerRecord, gsl_vector *der, double adaptativethreshold, int nSamplesUp, ReconstructInitSIRENA *reconstruct_init, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function scans all the values of the derivative of the (low-pass filtered) record until it finds :cpp:member:`nSamplesUp` consecutive\n    values (due to the noise more than 1 value is required) over the threshold. To look for more pulses, it finds :cpp:member:`nSamplesUp` consecutive values\n    (due to the noise) under the threshold and then, it starts to scan again.\n\n    Steps:\n\n    - Declare variables\n\n    - Allocate GSL vectors\n\n    - It is possible to find the tstarts...\n\n      - Obtain tstart of each pulse in the derivative:\n\n        - If :math:`der_i>threshold` and *foundPulse=false*, it looks for :cpp:member:`nSamplesUp` consecutive samples over the threshold\n\n          - If not, it looks again for a pulse crossing over the threshold\n\n          - If yes, a pulse is found (truncated if it is at the beginning)\n\n        - If :math:`der_i>threshold` and *foundPulse=true*, it looks for a sample under the threshold\n\n          - If not, it looks again for a sample under the threshold\n\n          - If yes, it looks for :cpp:member:`nSamplesUp` consecutive samples under the threshold and again it starts to look for a pulse\n\n\n    - ... Or to use the tstart provided as input parameters\n\n      Obtain the *maxDERs* of the pulses whose tstarts have been provided\n\n    **Members/Variables**\n\n    int **maxPulsesPerRecord**\n\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\n\n    gsl_vector* **der**\n\n        First derivative of the (low-pass filtered) record\n\n    double **adaptativethreshold**\n\n        Threshold\n\n    int **nSamplesUp**\n\n        Number of consecutive samples over the threshold to 'find' a pulse (:option:`samplesUp`)\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    int* **numberPulses**\n\n        Number of found pulses\n\n    gsl_vector** **tstartgsl**\n\n        Pulses tstart (in samples)\n\n    gsl_vector** **flagTruncated**\n\n        Flag indicating if the pulse is truncated\n\n    gsl_vector** **maxDERgsl**\n\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\n\n    .. cpp:member:: int maxPulsesPerRecord\n\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector (:option:`EventListSize`)\n\n    .. cpp:member:: gsl_vector* der\n\n        First derivative of the (low-pass filtered) record\n\n    .. cpp:member:: double adaptativethreshold\n\n        Threshold\n\n    .. cpp:member:: int nSamplesUp\n\n        Number of consecutive samples over the threshold to 'find' a pulse (:option:`samplesUp`)\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: int* numberPulses\n\n        Number of found pulses\n\n    .. cpp:member:: gsl_vector** tstartgsl\n\n        Pulses tstart (in samples)\n\n    .. cpp:member:: gsl_vector** flagTruncated\n\n        Flag indicating if the pulse is truncated\n\n    .. cpp:member:: gsl_vector** maxDERgsl\n\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\n\n"
                                },
                                {
                                    "line": 2490,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int findTstartNoise(int maxPulsesPerRecord, gsl_vector *der, double adaptativethreshold, int nSamplesUp, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl)\n\n    Located in file: *gennoisespec.cpp*.\n\n    This function finds the pulses tstarts in the input vector (first derivative of the filtered record).\n\n    This function scans all values the derivative of the (low-pass filtered) record until it finds *nSamplesUp* consecutive values (due to the noise more than 1 value is\n    required) over the threshold. To look for more pulses, it finds *nSamplesUp* consecutive values (due to the noise) under the threshold and then, it starts to scan again.\n\n    Steps:\n\n    - Declare variables\n    - Allocate GSL vectors\n    - Obtain tstart of each pulse in the derivative:\n        - If :math:`der_i > threshold` and *foundPulse=false*, it looks for *nSamplesUp* consecutive samples over the threshold\n            - If not, it looks again for a pulse crossing over the threshold\n            - If yes, a pulse is found (truncated if it is at the beginning)\n        - If :math:`der_i > threshold` and *foundPulse=true*, it looks for a sample under the threshold\n            - If not, it looks again for a sample under the threshold\n            - If yes, it looks for *nSamplesUp* consecutive samples under the threshold and again it starts to look for a pulse\n\n    **Members/Variables**\n\n    int **maxPulsesPerRecord**\n\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector\n\n    gsl_vector* **der**\n\n        First derivative of the (low-pass filtered) record\n\n    double **adaptativethreshold**\n\n        Threshold\n\n    int **nSamplesUp**\n\n        Number of consecutive samples over the threshold to 'find' a pulse\n\n    int* **numberPulses**\n\n        Number of found pulses\n\n    gsl_vector** **tstartgsl**\n\n        Pulses tstart (samples)\n\n    gsl_vector** **flagTruncated**\n\n        Flag indicating if the pulse is truncated (inside this function only initial truncated pulses are classified)\n\n    gsl_vector** **maxDERgsl**\n\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\n\n    .. cpp:member:: int maxPulsesPerRecord\n\n        Expected maximum number of pulses per record in order to not allocate the GSL variables with the size of the input vector\n\n    .. cpp:member:: gsl_vector* der\n\n        First derivative of the (low-pass filtered) record\n\n    .. cpp:member:: double adaptativethreshold\n\n        Threshold\n\n    .. cpp:member:: int nSamplesUp\n\n        Number of consecutive samples over the threshold to 'find' a pulse\n\n    .. cpp:member:: int* numberPulses\n\n        Number of found pulses\n\n    .. cpp:member:: gsl_vector** tstartgsl\n\n        Pulses tstart (samples)\n\n    .. cpp:member:: gsl_vector** flagTruncated\n\n        Flag indicating if the pulse is truncated (inside this function only initial truncated pulses are classified)\n\n    .. cpp:member:: gsl_vector** maxDERgsl\n\n        Maximum of the first derivative of the (low-pass filtered) record inside each found pulse\n\n"
                                },
                                {
                                    "line": 2578,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_Esboundary(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, int *indexEalpha, int *indexEbeta, double *Ealpha, double *Ebeta, double margin)\n\n    Located in file: *tasksSIRENA.cpp*.\n\n    This function provides the indexes of the two energies which straddle the pulse energy, by  comparing the maximum value of the pulse derivative\n    (:cpp:member:`maxDER`) to the list of maximums in the library  (:cpp:member:`maxDERs`).\n\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\n\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => :cpp:member:`indexEalpha` = :cpp:member:`indexEbeta` = 0\n\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => :cpp:member:`indexEalpha` = :cpp:member:`indexEbeta` = Number of templates-1\n\n    **Members/Variables**\n\n    double **maxDER**\n\n        Max value of the derivative of the (filtered) pulse whose embracing energies are being sought\n\n    gsl_vector* **maxDERs**\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info in the library about the energies\n\n    int* **indexEalpha**\n\n        Index of the energy lower than the energy of the pulse which is being analyzed\n\n    int* **indexEbeta**\n\n        Index of the energy higher than the energy of the pulse which is being analyzed\n\n    double* **Ealpha**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    double* **Ebeta**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    double **margin**\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n    .. cpp:member:: double maxDER\n\n        Max value of the derivative of the (filtered) pulse whose embracing energies are being sought\n\n    .. cpp:member:: gsl_vector* maxDERs\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info in the library about the energies\n\n    .. cpp:member:: int* indexEalpha\n\n        Index of the energy lower than the energy of the pulse which is being analyzed\n\n    .. cpp:member:: int* indexEbeta\n\n        Index of the energy higher than the energy of the pulse which is being analyzed\n\n    .. cpp:member:: double* Ealpha\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    .. cpp:member:: double* Ebeta\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    .. cpp:member:: double margin\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n"
                                },
                                {
                                    "line": 2658,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_matchedfilterSAB(double maxDER, gsl_vector *maxDERs, int preBuffer, ReconstructInitSIRENA *reconstruct_init, gsl_vector **matchedfilterFound, gsl_vector **DabFound, double *Ealpha, double *Ebeta, double margin)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function selects the proper matched filter (normalized template) from the calibration library from column **SAB** (or from column **MF** if only one energy included in                                                the library) by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library  (:cpp:member:`maxDERs`) for the *SAB* interpolation method (see :ref:`optimal filter chapter <optimalFilter_NSD>`). It also selects the proper row from the column **DAB**.\n\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\n\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\n\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\n\n    **Members/Variables**\n\n    int **runF0orB0val**\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\n\n    double **maxDER**\n\n        Max value of the derivative of the (filtered) pulse whose matched filter is being sought\n\n    gsl_vector* **maxDERs**\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    int **preBuffer**\n\n        preBuffer to work with in the particular pulse\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    gsl_vector** **matchedfilterFound**\n\n        GSL vector with the matched filter selected\n\n    gsl_vector** **DabFound**\n\n        **DAB** column from the library\n\n    double* **Ealpha**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    double* **Ebeta**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    double **margin**\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n    .. cpp:member:: int runF0orB0val\n\n        If :option:`FilterMethod` = **F0** => :cpp:member:`runF0orB0val` = 1. If :option:`FilterMethod` = **B0** => :cpp:member:`runF0orB0val` = 0\n\n    .. cpp:member:: double maxDER\n\n        Max value of the derivative of the (filtered) pulse whose matched filter is being sought\n\n    .. cpp:member:: gsl_vector* maxDERs\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    .. cpp:member:: int preBuffer\n\n        preBuffer to work with in the particular pulse\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: gsl_vector** matchedfilterFound\n\n        GSL vector with the matched filter selected\n\n    .. cpp:member:: gsl_vector** DabFound\n\n        **DAB** column from the library\n\n    .. cpp:member:: double* Ealpha\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    .. cpp:member:: double* Ebeta\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    .. cpp:member:: double margin\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n"
                                },
                                {
                                    "line": 2753,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_model_energies(double energy, ReconstructInitSIRENA *reconstruct_init, gsl_vector **modelFound)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function uses :cpp:member:`energy` in order to choose the proper pulse template (*pulse_templates_B0*) of the calibration library.\n\n    In general, it finds the two energies wich straddle :cpp:member:`energy` in the calibration library and interpolates (:cpp:func:`interpolate_model`):\n\n      - If :cpp:member:`energy` is lower than the lowest energy in the library => The model with the lowest energy in the library is chosen\n      - If :cpp:member:`energy` is higher than the highest energy in the library => The model with the highest energy in the library is chosen\n\n    **Members/Variables**\n\n    double **energy**\n\n        Energy of the pulse whose pulse template is being sought\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the energies of the models (*energies*)\n        and their templates (*pulse_templates*), the number of templates in the library (*ntemplates*), the template duration (*template_duration*) and\n        the *pulse_templates_B0*.\n\n    gsl_vector** **modelFound**\n\n        Found template of the pulse whose energy is :cpp:member:`energy`\n\n    .. cpp:member:: double energy\n\n        Energy of the pulse whose pulse template is being sought\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the energies of the models (*energies*)\n        and their templates (*pulse_templates*), the number of templates in the library (*ntemplates*), the template duration (*template_duration*) and\n        the *pulse_templates_B0*.\n\n    .. cpp:member:: gsl_vector** modelFound\n\n        Found template of the pulse whose energy is :cpp:member:`energy`\n\n"
                                },
                                {
                                    "line": 2795,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_model_maxDERs(double maxDER, ReconstructInitSIRENA *reconstruct_init, gsl_vector **modelFound)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function uses the maximum of the derivative of the (filtered) pulse (:cpp:member:`maxDER`) in order to choose the proper\n    pulse template (*pulse_templates_filder*) of the calibration library.\n\n    In general, it finds the two *maxDER* which straddle :cpp:member:`maxDER` in the calibration library and interpolates (:cpp:func:`interpolate_model`):\n\n      - If :cpp:member:`maxDER` is lower than the lowest *maxDERs* in the library => The model with\n        the lowest *maxDERs* in the library is chosen\n      - If :cpp:member:`maxDER` is higher than the highest *maxDERs* in the library => The model with\n        the highest *maxDERs* in the library is chosen\n\n    **Members/Variables**\n\n    double **maxDER**\n\n        Maximum of the derivative of the (filtered) pulse whose pulse template is being sought\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the number of templates in\n        the library (*ntemplates*), the template duration (*template_duration*), the filtered and differentiated templates (*pulse_templates_filder*)\n        and the *maxDERs* of the templates\n\n    gsl_vector** **modelFound**\n\n        Found template of the pulse whose maximum of the derivative of the filtered version is :cpp:member:`maxDER`\n\n    .. cpp:member:: double maxDER\n\n        Maximum of the derivative of the (filtered) pulse whose pulse template is being sought\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the number of templates in\n        the library (*ntemplates*), the template duration (*template_duration*), the filtered and differentiated templates (*pulse_templates_filder*)\n        and the *maxDERs* of the templates\n\n    .. cpp:member:: gsl_vector** modelFound\n\n        Found template of the pulse whose maximum of the derivative of the filtered version is :cpp:member:`maxDER`\n\n"
                                },
                                {
                                    "line": 2840,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_model_samp1DERs(double samp1DER, ReconstructInitSIRENA *reconstruct_init, gsl_vector **modelFound)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function uses the 1st sample of the derivative of the filtered pulse (:cpp:member:`samp1DER`) in order to choose the proper pulse template (*pulse_templates_filder*) of the calibration library.\n\n    It finds the two :cpp:member:`samp1DER` closer in the calibration library and interpolates (:cpp:func:`interpolate_model`)\n\n      - If :cpp:member:`samp1DER` is lower than the lowest samp1DER in the library => The model with the lowest samp1DER in the library is chosen\n      - If :cpp:member:`samp1DER` is higher than the highest samp1DER in the library => The model with the highest samp1DER in the library is chosen\n\n    **Members/Variables**\n\n    double **samp1DER**\n\n        1st sample of the derivative of the filtered pulse whose pulse template is being sought\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the 1st samples of the derivative of the models (*samp1DERs*) and their derived templates (*pulse_templates_filder*), the number of templates in the library (*ntemplates*) and the template duration (*template_duration*).\n\n    gsl_vector** **modelFound**\n\n        Found template of the pulse whose 1st sample of the derivative of the filtered pulse is :cpp:member:`samp1DER`\n\n    .. cpp:member:: double samp1DER\n\n        1st sample of the derivative of the filtered pulse whose pulse template is being sought\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the 1st samples of the derivative of the models (*samp1DERs*) and their derived templates (*pulse_templates_filder*), the number of templates in the library (*ntemplates*) and the template duration (*template_duration*).\n\n    .. cpp:member:: gsl_vector** modelFound\n\n        Found template of the pulse whose 1st sample of the derivative of the filtered pulse is :cpp:member:`samp1DER`\n\n"
                                },
                                {
                                    "line": 2878,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_optimalfilterSAB(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, gsl_vector **optimalfilterFound, gsl_vector **DabFound, double *Ealpha, double *Ebeta, double margin)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function selects the proper optimal filter from the calibration library columns **ABTx** or **ABFx** (or from **Tx** or **Fx**columns if only one energy included in                              the library) by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library  (:cpp:member:`maxDERs`). It also selects the proper row from the column **DAB**.\n\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\n\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\n\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\n\n    **Members/Variables**\n\n    double **maxDER**\n\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\n\n    gsl_vector* **maxDERs**\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info\n        in the library (*optimal_filters*)\n\n    gsl_vector** **optimalfilterFound**\n\n        GSL vector with the optimal filter selected\n\n    gsl_vector** **DabFound**\n\n        **DAB** column from the library\n\n    double* **Ealpha**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    double* **Ebeta**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    double **margin**\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n    .. cpp:member:: double maxDER\n\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\n\n    .. cpp:member:: gsl_vector* maxDERs\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values). In particular, this function uses the info\n        in the library (*optimal_filters*)\n\n    .. cpp:member:: gsl_vector** optimalfilterFound\n\n        GSL vector with the optimal filter selected\n\n    .. cpp:member:: gsl_vector** DabFound\n\n        **DAB** column from the library\n\n    .. cpp:member:: double* Ealpha\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    .. cpp:member:: double* Ebeta\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    .. cpp:member:: double margin\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n"
                                },
                                {
                                    "line": 2959,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_prclofwn(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, gsl_vector **PRCLOFWNFound, double *Ealpha, double *Ebeta, double margin)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    When :option:`EnergyMethod` = **OPTFILT** and :option:`OFNoise` = **WEIGHTN** this function selects the proper precalculated values (**OFWNx**) from the calibration *PRCLOFWN* HDU of the library by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library (:cpp:member:`maxDERs`) for *reconstruct_init->OFLib* = 1.\n\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\n\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\n\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\n\n    **Members/Variables**\n\n    double **maxDER**\n\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\n\n    gsl_vector* **maxDERs**\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    gsl_vector** **PRCLOFWNFound**\n\n        GSL vector with some precalculated selected\n\n    double* **Ealpha**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    double* **Ebeta**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    double **margin**\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n    .. cpp:member:: double maxDER\n\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\n\n    .. cpp:member:: gsl_vector* maxDERs\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: gsl_vector** PRCLOFWNFound\n\n        GSL vector with some precalculated selected\n\n    .. cpp:member:: double* Ealpha\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    .. cpp:member:: double* Ebeta\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    .. cpp:member:: double margin\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n"
                                },
                                {
                                    "line": 3030,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int find_prclcov(double maxDER, gsl_vector *maxDERs, ReconstructInitSIRENA *reconstruct_init, gsl_vector **PRCLCOVFound, gsl_vector **DabFound, double *Ealpha, double *Ebeta, double margin)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    When :option:`EnergyMethod` = **COVAR** this function selects the proper precalculated values (**PCOVx**) from the *PRCLCOV* HDU of the  calibration library by comparing the maximum value of the pulse derivative (:cpp:member:`maxDER`) to the list of maximums in the library (:cpp:member:`maxDERs`) for the *reconstruct_init->OFLib* = 1. It also selects the proper row from the column **PAB**.\n\n    It finds the two embracing :cpp:member:`maxDERs` in the calibration library:\n\n        - If :cpp:member:`maxDER` is lower than the lowest :cpp:member:`maxDERs` in the library => The data with the lowest :cpp:member:`maxDERs` (first row) in the library are chosen\n\n        - If :cpp:member:`maxDER` is higher than the highest :cpp:member:`maxDERs` in the library => The data of the penultimate row in the library are chosen\n\n    **Members/Variables**\n\n    double **maxDER**\n\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\n\n    gsl_vector* **maxDERs**\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    gsl_vector** **PRCLCOVFound**\n\n        GSL vector with the precalculated values selected\n\n    gsl_vector** **DabFound**\n\n        **DAB** column from the library\n\n    double* **Ealpha**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    double* **Ebeta**\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    double **margin**\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n    .. cpp:member:: double maxDER\n\n        Max value of the derivative of the (filtered) pulse whose optimal filter is being sought\n\n    .. cpp:member:: gsl_vector* maxDERs\n\n        GSL vector with the maximum values of the derivatives of the templates in the library to be compared with the pulse being analysed\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: gsl_vector** PRCLCOVFound\n\n        GSL vector with the precalculated values selected\n\n    .. cpp:member:: gsl_vector** DabFound\n\n        **DAB** column from the library\n\n    .. cpp:member:: double* Ealpha\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the lower limit\n\n    .. cpp:member:: double* Ebeta\n\n        Energy (in eV) which straddle the :cpp:member:`maxDER` in the higher limit\n\n    .. cpp:member:: double margin\n\n        Margin to be applied when several energies in the library to choose the proper filter (hardcoded in *LibraryCollection* in *integraSIRENA.cpp*)\n\n"
                                },
                                {
                                    "line": 3109,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_void freeOptimalFilterSIRENA(OptimalFilterSIRENA* OFilterColl)\n\n    Located in file: *integraSIRENA.cpp*\n\n    Destructor of *OptimalFilterSIRENA* structure.\n\n    **Members/Variables**\n\n    OptimalFilterSIRENA* **OFilterColl**\n\n        Instance of *OptimalFilterSIRENA* structure\n\n    .. cpp:member:: OptimalFilterSIRENA* OFilterColl\n\n        Instance of *OptimalFilterSIRENA* structure\n\n"
                                },
                                {
                                    "line": 3126,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_void freeReconstructInitSIRENA(ReconstructInitSIRENA* reconstruct_init)\n\n    Located in file: *integraSIRENA.cpp*\n\n    Destructor of *ReconstructInitSIRENA* structure.\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Instance of *ReconstructInitSIRENA* structure\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Instance of *ReconstructInitSIRENA* structure\n\n"
                                },
                                {
                                    "line": 3143,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_void freePulsesCollection(PulsesCollection* PulsesColl)\n\n    Located in file: *integraSIRENA.cpp*\n\n    Destructor of *PulsesCollection* structure.\n\n    **Members/Variables**\n\n    PulsesCollection* **PulsesColl**\n\n        Instance of *PulsesCollection* structure\n\n    .. cpp:member:: PulsesCollection* PulsesColl\n\n        Instance of *PulsesCollection* structure\n\n"
                                },
                                {
                                    "line": 3160,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int fromGslMatrix(void **buffer, gsl_matrix **matrix, int type)\n\n    Located in file: *inoututils.cpp*\n\n    The function puts the values of the input GSL matrix into an output buffer.\n\n    **Members/Variables**\n\n    void** **buffer**\n\n        Output buffer\n\n    gsl_matrix** **matrix**\n\n        Input GSL matrix\n\n    int **type**\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n    .. cpp:member:: void** buffer\n\n        Output buffer\n\n    .. cpp:member:: gsl_matrix** matrix\n\n        Input GSL matrix\n\n    .. cpp:member:: int type\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n"
                                },
                                {
                                    "line": 3193,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int fromGslVector(void **buffer, gsl_vector **array, int type)\n\n    Located in file: *inoututils.cpp*\n\n    The function puts the values of the input GSL vector into an output buffer.\n\n    **Members/Variables**\n\n    void** **buffer**\n\n        Output buffer\n\n    gsl_vector** **array**\n\n        Input GSL vector\n\n    int **type**\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n    .. cpp:member:: void** buffer\n\n        Output buffer\n\n    .. cpp:member:: gsl_vector** array\n\n        Input GSL vector\n\n    .. cpp:member:: int type\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n"
                                },
                                {
                                    "line": 3228,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int gennoisespec_main()\n\n    Located in file: *gennoisespec.cpp*\n\n    This function calculates the current noise spectral density.\n    If there are pulses in a record, the pulses are rejected and it is going to look for pulse-free intervals of a given size (*intervalMinBins*).\n    If there are no pulses in a record, the event is divided into pulse-free intervals of a given size (*intervalMinBins*).\n    It is going to look for pulse-free intervals, calculate their FFT(not filtered data) and average them.\n\n    Another feature is calculate the weight matrix of the noise (in fact, weight matrices of noise of different lengths).\n\n    The output FITS file (_noisespec) contains three columns in two extensions, *NOISE* and *NOISEALL*:\n        - **FREQ**: Frequency\n        - **CSD**: Current noise spectral density: Amount of current per unit (density) of frequency (spectral), as a function of the frequency\n        - **SIGMACSD**: Standard error of the mean (filled out with 0's at the moment)\n\n    There is also other extension, *WEIGHTMS*, where the weight matrices of the noise are stored.\n\n    Steps:\n\n    - Reading all programm parameters by using PIL\n    - Open input FITS file\n    - Check if input FITS file have been simulated with TESSIM or XIFUSIM\n    - To calculate *aducnv* (conversion factor between arbitrary units and A)...\n    - ...or read ``ADU_CNV``, ``I_BIAS`` and ``ADU_BIAS``\n    - Get structure of input FITS file columns\n    - Read info to transform to resistance space (if it is necessary)\n    - Read and check other input keywords\n    - Read other necessary keywords from ANY HDU\n    - Calculate the sampling rate\n        - By using keywords in input FITS file (from ``DELTAT`` or ``TCLOCK``+``DEC_FAC`` or ``NUMROW``+``P_ROW``)\n        - If necessary read the sampling rate from input FITS file (from the ``HISTORY`` in the *Primary* HDU)\n        - If not possible, provide an error message to include DELTAT (inverse of sampling rate) in the input FITS file\n    - Initialize variables and transform from seconds to samples\n    - Declare variables\n    - Create structure to run Iteration\n        - Read columns (**TIME** and **ADC**)\n    - Called iteration function: :cpp:func:`inDataIterator`\n    - Close input FITS file\n    - Generate CSD representation\n        - Applying :cpp:func:`medianKappaClipping_noiseSigma` in order to remove the noise intervals with a high sigma (if :option:`rmNoiseInterval` = yes)\n        - FFT calculus (EventSamplesFFT)\n        - Add to mean FFT samples\n        - Current noise spectral density\n        - Extra normalization (further than the FFT normalization factor,1/n) in order to get the apropriate noise level provided by Peille (54 pA/rHz)\n    - Load in noiseIntervals only those intervals with a proper sigma (if :option:`rmNoiseInterval` = yes) and NumMeanSamples = cnt (in order not to change excesively the code when weightMS)\n    - Generate WEIGHT representation\n    - Create output FITS File: GENNOISESPEC representation file\n    - Write extensions *NOISE*, *NOISEALL* and *WEIGHTMS* (call :cpp:func:`writeTPSreprExten`)\n    - Free allocated GSL vectors\n    - Close output FITS file\n    - Free memory\n    - Finalize the task\n\n    The parameters (*struct Parameters* **par**) read by :cpp:func:`getpar_noiseSpec` are:\n\n    char **inFile**\n\n        Name of the input FITS file\n\n    char **outFile**\n\n        Name of the output FITS file\n\n    int **intervalMinSamples**\n\n        Length of a pulse-free interval to use (samples) = *intervalMinBins*\n\n    int **nplPF**\n\n        Number of pulse lengths after ending the pulse (Tend) to start the pulse-free interval\n\n    int **nintervals**\n\n        Number of pulse-free intervals to use to calculate the Noise Spectral Density\n\n    double **scaleFactor**\n\n        Scale factor to apply in order to calculate the LPF box-car length\n\n    int **samplesUp**\n\n        Consecutive samples over the threshold to locate a pulse\n\n    double **nSgms**\n\n        Number of Sigmas to establish the threshold\n\n    int **pulse_length**\n\n        Pulse length (samples)\n\n    double **LrsT**\n\n        Running sum length (seconds)\n\n    double **LbT**\n\n        Baseline averaging length (seconds)\n\n    char **weightMS**\n\n        Calculate and write the weight matrices if *weightMS=yes*\n\n    char **EnergyMethod**\n\n        Transform to resistance space (I2R, I2RFITTED) or not (OPTFILT)\n\n    double **Ifit**\n\n        Constant to apply the I2RFITTED conversion (adu)\n\n    char **clobber**\n\n        Re-write output files if *clobber=yes*\n\n    int **matrixSize**\n\n        Size of noise matrix if only one to be created\n\n    char **rmNoiseIntervals**\n\n        Remove some noise intervals before calculating the noise spectrum if *rmNoiseIntervals=yes*\n\n    .. cpp:member:: char **inFile**\n\n        Name of the input FITS file\n\n    .. cpp:member:: char **outFile**\n\n        Name of the output FITS file\n\n    .. cpp:member:: int **intervalMinSamples**\n\n        Length of a pulse-free interval to use (samples) = *intervalMinBins*\n\n    .. cpp:member:: int **nplPF**\n\n        Number of pulse lengths after ending the pulse (Tend) to start the pulse-free interval\n\n    .. cpp:member:: int **nintervals**\n\n        Number of pulse-free intervals to use to calculate the Noise Spectral Density\n\n    .. cpp:member:: double **scaleFactor**\n\n        Scale factor to apply in order to calculate the LPF box-car length\n\n    .. cpp:member:: int **samplesUp**\n\n        Consecutive samples over the threshold to locate a pulse\n\n    .. cpp:member:: double **nSgms**\n\n        Number of Sigmas to establish the threshold\n\n    .. cpp:member:: int **pulse_length**\n\n        Pulse length (samples)\n\n    .. cpp:member:: double **LrsT**\n\n        Running sum length (seconds)\n\n    .. cpp:member:: double **LbT**\n\n        Baseline averaging length (seconds)\n\n    .. cpp:member:: char **weightMS**\n\n        Calculate and write the weight matrices if *weightMS=yes*\n\n    .. cpp:member:: char **EnergyMethod**\n\n        Transform to resistance space (I2R, I2RFITTED) or not (OPTFILT)\n\n    .. cpp:member:: double **Ifit**\n\n        Constant to apply the I2RFITTED conversion (adu)\n\n    .. cpp:member:: char **clobber**\n\n        Re-write output files if *clobber=yes*\n\n    .. cpp:member:: int **matrixSize**\n\n        Size of noise matrix if only one to be created\n\n    .. cpp:member:: char **rmNoiseIntervals**\n\n        Remove some noise intervals before calculating the noise spectrum if *rmNoiseIntervals=yes*\n"
                                },
                                {
                                    "line": 3420,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getB(gsl_vector *vectorin, gsl_vector *tstart, int nPulses, gsl_vector **lb, int sizepulse, gsl_vector **B, gsl_vector **rmsB)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function calculates the sum, :cpp:member:`B`, of :cpp:member:`lb` digitized data samples of a pulse-free interval immediately\n    before each pulse. If the pulse-free interval before the current pulse is lower than :cpp:member:`lb`, :cpp:member:`B` is calculated with the available\n    number of samples. If there is not a pulse-free interval before the pulse, it is looked for it after the current pulse.\n    The number of samples of the pulse-free interval used to calculate :cpp:member:`B` is stored in the :cpp:member:`lb` vector.\n\n    Steps:\n\n    First of all, the auxiliary variable *Baux* is initialized to -999 and all the elements of the :cpp:member:`lb` vector are equal to the :option:`LbT` input parameter in samples.\n    Then, the code is divided into 2 *if* statements:\n\n    - When the current pulse is the first pulse into the record:\n\n      - :math:`tstart \\geq lb` => Sum *lb* samples\n      - :math:`0<tstart<lb` => Sum the available number of samples (although the available number of samples was lower than *lb*)\n      - :math:`tstart=0` => If there is not a pulse-free interval before the pulse, it is looked for it after the current pulse\n\n    - When the current pulse is not the first pulse into the record:\n\n      - :math:`tstart_i-tend_{i-1} \\geq lb` => Sum lb samples\n      - :math:`0<tstart_i-tend{i-1}<lb` => Sum the available number of samples (although the available number of samples was lower than *lb*)\n      - If there is not a pulse-free interval before the pulse, it is looked for it after the current pulse\n\n    If *Baux* is still -999, a pulse-free interval can not be found to apply the running sum filter. This has to be taken into account,\n    out of the function, to try to get a usable :cpp:member:`B`.\n\n    **Members/Variables**\n\n    gsl_vector* **vectorin**\n\n        Input record\n\n    gsl_vector* **tstart**\n\n        Starting time of the pulses into the record\n\n    int **nPulses**\n\n        Number of pulses into the record\n\n    gsl_vector** **lb**\n\n        Vector containing the baseline averaging length used for each pulse\n\n    int **sizepulse**\n\n        Size of the pulse in samples\n\n    gsl_vector** **B**\n\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\n\n    gsl_vector** **rmsB**\n\n        In general, rms of the baseline related to a pulse-free interval immediately before the current pulse\n\n    .. cpp:member:: gsl_vector* vectorin\n\n        Input record\n\n    .. cpp:member:: gsl_vector* tstart\n\n        Starting time of the pulses into the record\n\n    .. cpp:member:: int nPulses\n\n        Number of pulses into the record\n\n    .. cpp:member:: gsl_vector** lb\n\n        Vector containing the baseline averaging length used for each pulse\n\n    .. cpp:member:: int sizepulse\n\n        Size of the pulse in samples\n\n    .. cpp:member:: gsl_vector** B\n\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\n\n    .. cpp:member:: gsl_vector** rmsB\n\n        In general, rms of the baseline related to a pulse-free interval immediately before the current pulse\n"
                                },
                                {
                                    "line": 3507,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: LibraryCollection* getLibraryCollection(ReconstructInitSIRENA* reconstruct_init, gsl_vector *pBi, gsl_vector *posti, int* const status)\n\n    Located in file: *integraSIRENA.cpp*\n\n    This function creates and retrieves a *LibraryCollection* from a file.\n\n    - Create *LibraryCollection* structure\n    - Open FITS file in READONLY mode (move to the first HDU) and get number of templates (rows)\n    - Allocate library structure\n    - Get **PULSE** and **MF** column numbers (depending the different options)\n    - Get template duration\n    - Allocate library structure (cont.)\n    - Get matched filter duration\n    - Read different columns and populate the *LibraryCollection* structure\n    - Added new code to handle the new HDUs *FIXFILTF*, *FIXFILTT*, *PRCLCOV* and *PRCLOFWN*\n    - Free allocated GSL vectors and matrices\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Instance of *ReconstructInitSIRENA* structure\n\n    gsl_vector **posti**\n\n        Vector with the post values read from the XML file\n\n    int* const **status**\n\n        Input/output status\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Instance of *ReconstructInitSIRENA* structure\n\n    .. cpp:member:: gsl_vector pBi\n\n        Vector with the preBuffer values read from the XML file\n\n     .. cpp:member:: gsl_vector posti\n\n        Vector with the post values read from the XML file\n\n    .. cpp:member:: int* const status\n\n        Input/output status\n\n"
                                },
                                {
                                    "line": 3555,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: NoiseSpec* getNoiseSpec(ReconstructInitSIRENA* reconstruct_init, int* const status)\n\n    Located  in file: *integraSIRENA.cpp*\n\n    This function creates and retrieves a *NoiseSpec* from a file.\n\n    - Create *NoiseSpec* structure\n    - Open FITS file, move to the *NOISE*, *NOISEALL* and *WEIGHTMS* HDUs and get necessary keywords\n    - Allocate *NoiseSpec* structure\n    - Get noise spectrum (**CSD**), and noise frequencies (**FREQ**) column numbers\n    - Read column **CSD** and save it into the structure\n    - Read column **FREQ** and save it into the structure\n    - Read columns **Wx** with the noise weight matrix from noise intervals and save them into the structure\n    - Return noise spectrum\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Instance of *ReconstructInitSIRENA* structure\n\n    int* const **status**\n\n        Input/Output status\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Instance of *ReconstructInitSIRENA* structure\n\n    .. cpp:member:: int* const status\n\n        Input/Output status\n\n"
                                },
                                {
                                    "line": 3589,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getpar_noiseSpec(struct Parameters* const par)\n\n    Located in file: *gennoisespec.cpp*\n\n    This function gets the input parameter from the command line or their default values from the *gennoisespec.par* file\n\n    **Members/Variables**\n\n    struct Parameters* const **par**\n\n        Structure containing the input parameters specified in *gennoisespec.par*\n\n    .. cpp:member:: struct Parameters* const par\n\n        Structure containing the input parameters specified in *gennoisespec.par*\n\n"
                                },
                                {
                                    "line": 3606,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getpar_teslib(struct Parameters* const par)\n\n    Located in file: *teslib.c*\n\n    This function gets the input parameter from the command line or their default values from the *teslib.par* file\n\n    **Members/Variables**\n\n    struct Parameters* const **par**\n\n        Structure containing the input parameters specified in *teslib.par*\n\n    .. cpp:member:: struct Parameters* const par\n\n        Structure containing the input parameters specified in *teslib.par*\n\n"
                                },
                                {
                                    "line": 3623,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getpar_tesrecons(struct Parameters* const par)\n\n    Located in file: *tesrecons.c*\n\n    This function gets the input parameter from the command line or their default values from the *tesrecons.par* file\n\n    **Members/Variables**\n\n    struct Parameters* const **par**\n\n        Structure containing the input parameters specified in *tesrecons.par*\n\n    .. cpp:member:: struct Parameters* const par\n\n        Structure containing the input parameters specified in *tesrecons.par*\n\n"
                                },
                                {
                                    "line": 3640,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getPulseHeight(gsl_vector *vectorin, double tstart, double tstartnext, int lastPulse, double lrs, double lb, double B, int sizepulse, double *pulseheight)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function estimates the pulse height of a pulse by using a running sum filter. It extracts from the record, :cpp:member:`vectorin`, the pulse whose\n    pulse height is going to be estimated by using :cpp:func:`RS_filter`.\n\n    Steps:\n\n    - Declare variables\n    - Extracting from the record the pulse whose pulse height is going to be estimated\n    - Apply the running sum filter\n\n    **Members/Variables**\n\n    gsl_vector* **vectorin**\n\n        Not filtered record\n\n    double **tstart**\n\n        Starting time of the pulse whose pulse height is going to be estimated\n\n    double **tstartnext**\n\n        Starting time of the next pulse whose pulse height is going to be estimated\n\n    int **lastPulse**\n\n        It is 1 if the pulse is the last one into the record or the only one\n\n    double **lrs**\n\n        Running sum length (equal to the :option:`LrsT` input parameter in samples)\n\n    double **lb**\n\n        Baseline averaging length used for the pulse whose pulse height is going to be estimated\n\n    double **B**\n\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\n\n    int **sizepulse**\n\n        Size of the pulse in samples\n\n    double* **pulseheight**\n\n        Estimated pulse height of the pulse\n\n    .. cpp:member:: gsl_vector* vectorin\n\n        Not filtered record\n\n    .. cpp:member:: double tstart\n\n        Starting time of the pulse whose pulse height is going to be estimated\n\n    .. cpp:member:: double tstartnext\n\n        Starting time of the next pulse whose pulse height is going to be estimated\n\n    .. cpp:member:: int lastPulse\n\n        It is 1 if the pulse is the last one into the record or the only one\n\n    .. cpp:member:: double lrs\n\n        Running sum length (equal to the :option:`LrsT` input parameter in samples)\n\n    .. cpp:member:: double lb\n\n        Baseline averaging length used for the pulse whose pulse height is going to be estimated\n\n    .. cpp:member:: double B\n\n        In general, sum of the *Lb* digitized data samples (:option:`LbT` input parameters in samples) of a pulse-free interval immediately before the current pulse\n\n    .. cpp:member:: int sizepulse\n\n        Size of the pulse in samples\n\n    .. cpp:member:: double* pulseheight\n\n        Estimated pulse height of the pulse\n\n"
                                },
                                {
                                    "line": 3728,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getSamplingrate_trigreclength_Filei (char* inputFile, struct Parameters par, double* samplingrate, int* trigreclength)\n\n    Located in file: *initSIRENA.c*\n\n    This function gets the *sampling rate* and the *trig_reclength* from an inputs FITS file :cpp:member:`inputFile`.\n\n    Steps:\n\n     - Open FITS file\n     - Check if input FITS file have been simulated with TESSIM or XIFUSIM\n     - Check if input XML file and XMl file to build the library to be used to reconstruct are the same\n     - Get the sampling rate from the HISTORY keyword from the input FITS file and check with sampling rate from XML file\n     - If xifusim file => Get 'trig_reclength' from the HISTORY keyword from the input FITS file 'trig_reclength' is necessary if SIRENA is going to run in THREADING mode\n     - Close FITS file\n     - Free memory\n\n    **Members/Variables**\n\n    char* **inputFile**\n\n        Input file name\n\n    struct Parameters **par**\n\n        Input parameters\n\n    double* **samplingrate**\n\n        (In) Sampling rate from XML file => (Out) Sampling rate\n\n    int* **trigreclength**\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n   .. cpp:member:: char* inputFile\n\n        Input file name\n\n   .. cpp:member:: struct Parameters par\n\n        Input parameters\n\n   .. cpp:member:: double* samplingrate\n\n        (In) Sampling rate from XML file => (Out) Sampling rate\n\n   .. cpp:member:: int* trigreclength\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n"
                                },
                                {
                                    "line": 3779,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int getSamplingrate_trigreclength (char* inputFile, struct Parameters par, double* samplingrate, int* trigreclength, int* numfits)\n\n    Located in file: *initSIRENA.c*\n\n    This function gets the *sampling rate* and the *trig_reclength* no matter if :cpp:member:`inputFile` is only a FITS file or more (inputFile can start with '@' or not, input file or files can have been simulated with TESSIM or XIFUSIM).\n\n    **Members/Variables**\n\n    char* **inputFile**\n\n        Input file name\n\n    struct Parameters **par**\n\n        Input parameters\n\n    double* **samplingrate**\n\n        (In) Sampling rate from XML file => (Out) Sampling rate\n\n    int* **trigreclength**\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n    int* **numfits**\n\n        Number of FITS files to work with\n\n   .. cpp:member:: char* inputFile\n\n        Input file name\n\n   .. cpp:member:: struct Parameters par\n\n        Input parameters\n\n   .. cpp:member:: double* samplingrate\n\n        (In) Sampling rate from XML file => (Out) Sampling rate\n\n   .. cpp:member:: int* trigreclength\n\n        Necessary if SIRENA is going to run in THREADING mode\n\n   .. cpp:member:: int* numfits\n\n        Number of FITS files to work with\n\n"
                                },
                                {
                                    "line": 3828,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void gsl_vector_complex_absIFCA(gsl_vector *cvnew,gsl_vector_complex *cv)\n\n    Located in file: *genutils.cpp*\n\n    This function calculates the magnitude of the complex elements of a vector (real part).\n\n    **Members/Variables**\n\n    gsl_vector_complex* **cv**\n\n        Input GSL complex vector\n\n    gsl_vector* **cvnew**\n\n        Output GSL vector with the absolute values of the elements of :cpp:member:`cv`\n\n    .. cpp:member:: gsl_vector_complex* cv\n\n        Input GSL complex vector\n\n    .. cpp:member:: gsl_vector* cvnew\n\n        Output GSL vector with the absolute values of the elements of :cpp:member:`cv`\n\n"
                                },
                                {
                                    "line": 3853,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void gsl_vector_complex_argIFCA(gsl_vector *varg, gsl_vector_complex *vin)\n\n    Located in file: *genutils.cpp*\n\n    This function calculates the arguments of the complex elements of a vector.\n\n    **Members/Variables**\n\n    gsl_vector_complex* **vin**\n\n        Input GSL complex vector\n\n    gsl_vector* **varg**\n\n        Output GSL vector with the arguments of the elements of :cpp:member:`vin`\n\n    .. cpp:member:: gsl_vector_complex* vin\n\n        Input GSL complex vector\n\n    .. cpp:member:: gsl_vector* varg\n\n        Output GSL vector with the arguments of the elements of :cpp:member:`vin`\n\n"
                                },
                                {
                                    "line": 3878,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void gsl_vector_complex_scaleIFCA(gsl_vector_complex *cv,gsl_complex z)\n\n    Located in file: *genutils.cpp*\n\n    This function multiplies the complex elements of a vector by a complex number.\n\n    **Members/Variables**\n\n    gsl_vector_complex* **cv**\n\n        Input/Output (scaled) GSL complex vector\n\n    gsl_complex **z**\n\n        Input GSL complex number\n\n    .. cpp:member:: gsl_vector_complex* cv\n\n        Input/Output (scaled) GSL complex vector\n\n    .. cpp:member:: gsl_complex z\n\n        Input GSL complex number\n\n"
                                },
                                {
                                    "line": 3903,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void gsl_vector_sqrtIFCA(gsl_vector *cvnew, gsl_vector *cv)\n\n    Located in file: *genutils.cpp*\n\n    This function calculates the square root of the elements of a vector.\n\n    **Members/Variables**\n\n    gsl_vector* **cv**\n\n        Input GSL complex vector\n\n    gsl_vector* **cvnew**\n\n        Output GSL vector with the square root values of the elements of :cpp:member:`cv`\n\n    .. cpp:member:: gsl_vector* cv\n\n        Input GSL complex vector\n\n    .. cpp:member:: gsl_vector* cvnew\n\n        Output GSL vector with the square root values of the elements of :cpp:member:`cv`\n\n"
                                },
                                {
                                    "line": 3928,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int gsl_vector_Sumsubvector(gsl_vector *invector, long offset, long n, double *sum)\n\n    Located in file: *genutils.cpp*\n\n    This function returns the sum of some elements of the input vector.\n\n    The starting element of the sum is :cpp:member:`offset` from the start of the input vector. It will sum up :cpp:member:`n` elements.\n\n    :cpp:member:`offset` can take values from 0 to *invector->size*\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        Input GSL vector\n\n    long **offset**\n\n        It is the first element to be summed\n\n    long **n**\n\n        Number of elements in the sum\n\n    double* **sum**\n\n        Calculated output value (sum of the corresponding elements)\n\n    .. cpp:member:: gsl_vector* invector\n\n        Input GSL vector\n\n    .. cpp:member:: long offset\n\n        It is the first element to be summed\n\n    .. cpp:member:: long n\n\n        Number of elements in the sum\n\n    .. cpp:member:: double* sum\n\n        Calculated output value (sum of the corresponding elements)\n\n"
                                },
                                {
                                    "line": 3977,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int inDataIterator(long totalrows, long offset, long firstrow, long nrows, int ncols, iteratorCol *cols, void *user_strct)\n\n    Located in file: *gennoisespec.cpp*\n\n    This function takes the optimum number of rows to read the input FITS file and works iteratively\n\n    Steps:\n\n    - Declare variables\n    - Allocate input GSL vectors\n    - Read iterator\n    - Processing each record\n        - Information has been read by blocks (with nrows per block)\n        - Just in case the last record has been filled out with 0's => Last record discarded\n        - Convert to the resistance space if necessary\n        - To avoid taking into account the pulse tails at the beginning of a record as part of a pulse-free interval\n        - Low-pass filtering\n        - Differentiate\n        - Finding the pulses: Pulses tstarts are found (call :cpp:func:`findPulsesNoise`)\n        - Finding the pulse-free intervals in each record\n            - If there are pulses => Call :cpp:func:`findInterval`\n            - No pulses => The whole event is going to be used (DIVIDING into intervals of intervalMinBins size) => Call :cpp:func:`findIntervalN`\n        - Calculating the mean and sigma of the intervals without pulses together => *BSLN0* and *NOISESTD*\n    - Preparing the CSD calculus (not filtered data)\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    long **totalrows**\n\n        Total number of rows processed\n\n    long **offset**\n\n        If positive, this number of rows at the beginning of the table (or pixels in the image) will be skipped and will not be passed to the work function\n\n    long **firstrow**\n\n        First row to read\n\n    long **nrows**\n\n        It specifies the number of table rows that are to be passed to the work function on each iteration. If *nrows = 0* then CFITSIO will calculate the optimum number for greatest efficiency. If *nrows* is negative, then all the rows or pixels will be passed at one time, and the work function will only be called once. If any variable length arrays are being processed, then the *nrows* value is ignored, and the iterator will always process one row of the table at a time\n\n    int **ncols**\n\n        Number of columns\n\n    iteratorCol* **cols**\n\n        Structure of iteration\n\n    void* **user_strct**\n\n        This is a user supplied pointer that can be used to pass ancillary information from the driver routine to the work function. It may point to a single number, an array, or to a structure containing an arbitrary set of parameters\n\n    .. cpp:member:: long totalrows\n\n        Total number of rows processed\n\n    .. cpp:member:: long offset\n\n        If positive, this number of rows at the beginning of the table (or pixels in the image) will be skipped and will not be passed to the work function\n\n    .. cpp:member:: long firstrow\n\n        First row to read\n\n    .. cpp:member:: long nrows\n\n        It specifies the number of table rows that are to be passed to the work function on each iteration. If *nrows = 0* then CFITSIO will calculate the optimum number for greatest efficiency. If *nrows* is negative, then all the rows or pixels will be passed at one time, and the work function will only be called once. If any variable length arrays are being processed, then the *nrows* value is ignored, and the iterator will always process one row of the table at a time\n\n    .. cpp:member:: int ncols\n\n        Number of columns\n\n    .. cpp:member:: iteratorCol* cols\n\n        Structure of iteration\n\n    .. cpp:member:: void* user_strct\n\n        This is a user supplied pointer that can be used to pass ancillary information from the driver routine to the work function. It may point to a single number, an array, or to a structure containing an arbitrary set of parameters\n"
                                },
                                {
                                    "line": 4061,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_void initializeReconstructionSIRENA(ReconstructInitSIRENA* reconstruct_init, char* const record_file, fitsfile *fptr, char* const library_file, char* const event_file, int flength_0pad, int prebuff_0pad, double scaleFactor, int samplesUp, int samplesDown, double nSgms, int detectSP, int opmode, char *detectionMode, double LrsT, double LbT, char* const noise_file, char* filter_domain, char* filter_method, char* energy_method, double filtEev, double Ifit, char *ofnoise, int lagsornot, int nLags, int Fitting35, int ofiter, char oflib, char *ofinterp, char* oflength_strategy, int oflength, char preBuffer, double monoenergy, char addCOVAR, char addINTCOVAR, char addOFWN, int largeFilter, int interm, char* const detectFile, int errorT, int Sum0Filt, char clobber, int maxPulsesPerRecord, double SaturationValue, char* const tstartPulse1, int tstartPulse2, int tstartPulse3, double energyPCA1, double energyPCA2, char * const XMLFile, int* const status)\n\n    Located in file: *integraSIRENA.cpp*\n\n    This function initializes the structure *ReconstructInitSIRENA* with the variables required for SIRENA reconstruction. The values are taken from the input parameters.\n\n    - Load *LibraryCollection* structure if library file exists\n    - Load *NoiseSpec* structure\n    - Fill in the matrix *tstartPulse1_i* if *tstartPulse1* = nameFile Start time (in samples) of the first pulse (0  if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse, :option:`tstartPulse1`\n    - Fill in *reconstruct_init*\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    char* const **record_file**\n\n        Filename of input data file with records, :option:`RecordFile`\n\n    fitsfile* **fptr**\n\n        FITS object with pointer to data file\n\n    char* const **library_file**\n\n        File name of calibration library, :option:`LibraryFile`\n\n    char* const **event_file**\n\n        File name of output events (with reconstructed energy), :option:`TesEventFile`\n\n    int **flength_0pad**\n\n        0-padding filter length, :option:`flength_0pad`\n\n    int **prebuff_0pad**\n\n        preBuffer used when 0-padding, :option:`prebuff_0pad`\n\n    double **scaleFactor**\n\n        Detection scale factor for initial filtering, :option:`scaleFactor`\n\n    int **samplesUp**\n\n        Number of samples for threshold trespassing, :option:`samplesUp`\n\n    int **samplesDown**\n\n        Number of samples below the threshold to look for other pulse, :option:`samplesDown`\n\n    double **nSgms**\n\n        Number of standard deviations in the kappa-clipping process for threshold estimation, :option:`nSgms`\n\n    int **detectSP**\n\n        Detect secondary pulses (1) or not (0), :option:`detectSP`\n\n    int **opmode**\n\n        Calibration run (0) or energy reconstruction run (1)\n\n    char* **detectionMode**\n\n        Adjusted Derivative (AD) or Single Threshold Crossing (STC), :option:`detectionMode`\n\n    double **LrsT**\n\n        Running sum length for the RS raw energy estimation (seconds), :option:`LrsT`\n\n    double **LbT**\n\n        Baseline averaging length (seconds), :option:`LbT`\n\n    char* const **noise_file**\n\n        Noise file, :option:`NoiseFile`\n\n    char* **filter_domain**\n\n        Filtering Domain: Time (**T**) or Frequency (**F**), :option:`FilterDomain`\n\n    char* **filter_method**\n\n        Filtering Method: **F0** (deleting the zero frequency bin) or **F0** (deleting the baseline), :option:`FilterMethod`\n\n    char* **energy_method**\n\n         Energy calculation Method: **OPTFILT**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**, :option:`EnergyMethod`\n\n    double **filtEev**\n\n         Energy of the filters of the library to be used to calculate energy (only for OPTFILT, I2R and I2RFITTED), :option:`filtEeV`\n\n    double **Ifit**\n\n         Constant to apply the I2RFITTED conversion\n\n    char* **ofnoise**\n\n         For optimal filtering:  **NSD** or **WEIGHTN**, :option:`OFNoise`\n\n    int **lagsornot**\n\n        Lags (1) or no lags (0), :option:`LagsOrNot`\n\n    int **nLags**\n\n        Number of lags (positive odd number)\n\n    int **Fitting35**\n\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\n\n    int **ofiter**\n\n        Iterate (1) or not iterate (0), :option:`OFIter`\n\n    char **oflib**\n\n        Work or not with a library with optimal filters (1/0)\n\n    char* **ofinterp**\n\n        Optimal Filter by using the Matched Filter or the DAB as matched filter (*MF*/*DAB*)\n        It has been fixed in :ref:`tesrecons` as *SAB*\n\n    char* **oflength_strategy**\n\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**, :option:`OFStrategy`\n\n    int **oflength**\n\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**), :option:`OFLength`\n\n    char **preBuffer**\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the xml file)\n\n    double **monoenergy**\n\n        Monochromatic energy of input file in eV (only for library creation), :option:`monoenergy`\n\n    int **addCOVAR**\n\n        Add or not pre-calculated values related to COVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addCOVAR`\n\n    int **addINTCOVAR**\n\n        Add or not pre-calculated values related to INTCOVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addINTCOVAR`\n\n    int **addOFWN**\n\n        Add or not pre-calculated values related to Optimal Filtering by using Weight Noise matrix in the library file (yes/no) (only for library creation), :option:`addOFWN`\n\n    int **largeFilter**\n\n        Length of the longest fixed filters (only for library creation), :option:`largeFilter`\n\n    int **interm**\n\n        Write or not intermediate files (1/0), :option:`intermediate`\n\n    char* const **detectFile**\n\n        Intermediate detections file (if :option:`intermediate` = 1), :option:`detectFile`\n\n    int **errorT**\n\n        Additional error (in samples) added to the detected time (logically, it changes the reconstructed energies)\n\n    int **Sum0Filt**\n\n        0-padding: Subtract the sum of the filter (1) or not (0)\n\n    char **clobber**\n\n        Overwrite or not output files if exist (yes/no), :option:`clobber`\n\n    int **maxPulsesPerRecord**\n\n        Default size of the event list, :option:`EventListSize`\n\n    double **SaturationValue**\n\n        Saturation level of the ADC curves\n\n    int **tstartPulse1**\n\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse, :option:`tstartPulse1`\n\n    int **tstartPulse2**\n\n        Tstart (samples) of the second pulse, :option:`tstartPulse2`\n\n    int **tstartPulse3**\n\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS), :option:`tstartPulse3`\n\n    double **energyPCA1**\n\n        First energy (only for :option:`EnergyMethod` = **PCA**)\n\n    double **energyPCA2**\n\n        Second energy (only for :option:`EnergyMethod` = **PCA**)\n\n    char * const **XMLFile**\n\n        File name of the XML input file with instrument definition\n\n    int* const **status**\n\n        Input/Output status\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: char* const record_file\n\n        Filename of input data file with records, :option:`RecordFile`\n\n    .. cpp:member:: fitsfile* fptr\n\n        FITS object with pointer to data file\n\n    .. cpp:member:: char* const library_file\n\n        File name of calibration library, :option:`LibraryFile`\n\n    .. cpp:member:: char* const event_file\n\n        File name of output events (with reconstructed energy), :option:`TesEventFile`\n\n    .. cpp:member:: int flength_0pad\n\n        0-padding filter length, :option:`flength_0pad`\n\n    .. cpp:member:: int prebuff_0pad\n\n        preBuffer used when 0-padding, :option:`prebuff_0pad`\n\n    .. cpp:member:: double scaleFactor\n\n        Detection scale factor for initial filtering, :option:`scaleFactor`\n\n    .. cpp:member:: int samplesUp\n\n        Number of samples for threshold trespassing, :option:`samplesUp`\n\n    .. cpp:member:: int samplesDown\n\n        Number of samples below the threshold to look for other pulse, :option:`samplesDown`\n\n    .. cpp:member:: double nSgms\n\n        Number of standard deviations in the kappa-clipping process for threshold estimation, :option:`nSgms`\n\n    .. cpp:member:: int detectSP\n\n        Detect secondary pulses (1) or not (0), :option:`detectSP`\n\n    .. cpp:member:: int opmode\n\n        Calibration run (0) or energy reconstruction run (1)\n\n    .. cpp:member:: char* detectionMode\n\n        Adjusted Derivative (AD) or Single Threshold Crossing (STC), :option:`detectionMode`\n\n    .. cpp:member:: double LrsT\n\n        Running sum length for the RS raw energy estimation (seconds), :option:`LrsT`\n\n    .. cpp:member:: double LbT\n\n        Baseline averaging length (seconds), :option:`LbT`\n\n    .. cpp:member:: char* const noise_file\n\n        Noise file, :option:`NoiseFile`\n\n    .. cpp:member:: char* filter_domain\n\n        Filtering Domain: Time (**T**) or Frequency (**F**), :option:`FilterDomain`\n\n    .. cpp:member:: char* filter_method\n\n        Filtering Method: **F0** (deleting the zero frequency bin) or **F0** (deleting the baseline), :option:`FilterMethod`\n\n    .. cpp:member:: char* energy_method\n\n         Energy calculation Method: **OPTFILT**, **0PAD**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**, :option:`EnergyMethod`\n\n    .. cpp:member:: double filtEev\n\n         Energy of the filters of the library to be used to calculate energy (only for OPTFILT, I2R and I2RFITTED), :option:`filtEeV`\n\n    .. cpp:member:: double Ifit\n\n         Constant to apply the I2RFITTED conversion\n\n    .. cpp:member:: char* ofnoise\n\n         For optimal filtering:  **NSD** or **WEIGHTN**, :option:`OFNoise`\n\n    .. cpp:member:: int lagsornot\n\n        Lags (1) or no lags (0), :option:`LagsOrNot`\n\n    .. cpp:member:: int nLags\n\n        Number of lags (positive odd number)\n\n    .. cpp:member:: int Fitting35\n\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\n\n    .. cpp:member:: int ofiter\n\n        Iterate (1) or not iterate (0), :option:`OFIter`\n\n    .. cpp:member:: char oflib\n\n        Work or not with a library with optimal filters (1/0)\n\n    .. cpp:member:: char* ofinterp\n\n        Optimal Filter by using the Matched Filter or the DAB as matched filter (*MF*/*SAB*)\n        It has been fixed in :ref:`tesrecons` as *SAB*\n\n    .. cpp:member:: char* oflength_strategy\n\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**, :option:`OFStrategy`\n\n    .. cpp:member:: int oflength\n\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**), :option:`OFLength`\n\n    .. cpp:member:: char preBuffer\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the xml file)\n\n    .. cpp:member:: double monoenergy\n\n        Monochromatic energy of input file in eV (only for library creation), :option:`monoenergy`\n\n    .. cpp:member:: int addCOVAR\n\n        Add or not pre-calculated values related to COVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addCOVAR`\n\n    .. cpp:member:: int addINTCOVAR\n\n        Add or not pre-calculated values related to INTCOVAR reconstruction method in the library file (yes/no) (only for library creation), :option:`addINTCOVAR`\n\n    .. cpp:member:: int addOFWN\n\n        Add or not pre-calculated values related to Optimal Filtering by using Weight Noise matrix in the library file (yes/no) (only for library creation), :option:`addOFWN`\n\n    .. cpp:member:: int largeFilter\n\n        Length of the longest fixed filters (only for library creation), :option:`largeFilter`\n\n    .. cpp:member:: int interm\n\n        Write or not intermediate files (1/0), :option:`intermediate`\n\n    .. cpp:member:: char* const detectFile\n\n        Intermediate detections file (if :option:`intermediate` = 1), :option:`detectFile`\n\n    .. cpp:member:: int errorT\n\n        Additional error (in samples) added to the detected time (logically, it changes the reconstructed energies)\n\n    .. cpp:member:: int Sum0Filt\n\n        0-padding: Subtract the sum of the filter (1) or not (0)\n\n    .. cpp:member:: char clobber\n\n        Overwrite or not output files if exist (yes/no), :option:`clobber`\n\n    .. cpp:member:: int maxPulsesPerRecord\n\n        Default size of the event list, :option:`EventListSize`\n\n    .. cpp:member:: double SaturationValue\n\n        Saturation level of the ADC curves\n\n    .. cpp:member:: int tstartPulse1\n\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse, :option:`tstartPulse1`\n\n    .. cpp:member:: int tstartPulse2\n\n        Tstart (samples) of the second pulse, :option:`tstartPulse2`\n\n    .. cpp:member:: int tstartPulse3\n\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS), :option:`tstartPulse3`\n\n    .. cpp:member:: double energyPCA1\n\n        First energy (only for :option:`EnergyMethod` = **PCA**)\n\n    .. cpp:member:: double energyPCA2\n\n        Second energy (only for :option:`EnergyMethod` = **PCA**)\n\n    .. cpp:member:: char * const XMLFile\n\n        File name of the XML input file with instrument definition\n\n    .. cpp:member:: int* const status\n\n        Input/Output status\n"
                                },
                                {
                                    "line": 4484,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int InitialTriggering(gsl_vector *derivative, double nSgms, double scalefactor, double samplingRate, double stopcriteriamkc, double kappamkc, bool *triggerCondition, int *tstart, int *flagTruncated, double *threshold, int tstartProvided)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function finds the first pulse in the input vector, first derivative of the (low-pass filtered) record.\n\n    Steps:\n\n    - Declare variables\n    - Stablish the :cpp:member:`threshold`\n    - It is necessary to find the tstart of the first pulse...\n\n      Obtain tstart of the first pulse in the derivative if :math:`derivative_i>threshold`\n\n    - ... Or to use the tstart provided as input parameter\n\n    **Members/Variables**\n\n    gsl_vector* **derivative**\n\n        First derivative of the (low-pass filtered) record\n\n    double **nSgms**\n\n        Number of *Sigmas* to establish the threshold (:option:`nSgms`)\n\n    double **scalefactor**\n\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\n\n    double **samplingRate**\n\n        Sampling rate\n\n    double **stopcriteriamkc**\n\n        Used in :cpp:func:`medianKappaClipping` (%)\n\n    double **kappamkc**\n\n        Used in :cpp:func:`medianKappaClipping`\n\n    bool* **triggerCondition**\n\n        True => The algorithm has found the first event\n\n        False => The algorithm has not found any event\n\n    int* **tstart**\n\n        First event tstart (in samples)\n\n    int* **flagTruncated**\n\n        Flag indicating if the event is truncated\n\n    double* **threshold**\n\n        Calculated threshold  (output parameter because it is necessary out of the function)\n\n    int **tstartProvided**\n\n        Tstart of the first pulse provided as input parameter\n\n    .. cpp:member:: gsl_vector* derivative\n\n        First derivative of the (low-pass filtered) record\n\n    .. cpp:member:: double nSgms\n\n        Number of *Sigmas* to establish the threshold (:option:`nSgms`)\n\n    .. cpp:member:: double scalefactor\n\n        Scale factor to calculate the LPF box-car length (:option:`scaleFactor`)\n\n    .. cpp:member:: double samplingRate\n\n        Sampling rate\n\n    .. cpp:member:: double stopcriteriamkc\n\n        Used in :cpp:func:`medianKappaClipping` (%)\n\n    .. cpp:member:: double kappamkc\n\n        Used in :cpp:func:`medianKappaClipping`\n\n    .. cpp:member:: bool* triggerCondition\n\n        True => The algorithm has found the first event\n\n        False => The algorithm has not found any event\n\n    .. cpp:member:: int* tstart\n\n        First event tstart (in samples)\n\n    .. cpp:member:: int* flagTruncated\n\n        Flag indicating if the event is truncated\n\n    .. cpp:member:: double* threshold\n\n        Calculated threshold  (output parameter because it is necessary out of the function)\n\n    .. cpp:member:: int tstartProvided\n\n        Tstart of the first pulse provided as input parameter\n\n"
                                },
                                {
                                    "line": 4595,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_void IntegrafreeTesEventListSIRENA(TesEventList* event_list)\n\n    Located in file *integraSIRENA.cpp*\n\n    This function frees the structure in the input parameter.\n\n    **Members/Variables**\n\n    TesEventList* **event_list**\n\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\n\n    .. cpp:member:: TesEventList* event_list\n\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\n\n"
                                },
                                {
                                    "line": 4612,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int interactivePars(inparam *taskPars, int np, string task)\n\n    Located in file *inoututils.cpp*\n\n    This function reads input parameters interactively (provided by the user or taken as default values).\n    Used in tool :ref:`gennoisespec`.\n\n    **Members/Variables**\n\n    inparam* **taskPars**\n\n        Instance of *inparam* structure storing input parameters\n\n    int **np**\n\n        Number of parameters\n\n    string **task**\n\n        Tool name\n\n    .. cpp:member:: inparam* taskPars\n\n        Instance of *inparam* structure storing input parameters\n\n    .. cpp:member:: int np\n\n        Number of parameters\n\n    .. cpp:member:: string task\n\n        Tool name\n"
                                },
                                {
                                    "line": 4645,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int interpolatePOS(gsl_vector *x_in, gsl_vector *y_in, long size, double step, gsl_vector **x_out, gsl_vector **y_out)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function interpolates an input vector (:cpp:member:`x_in`, :cpp:member:`y_in`), creating an output vector (:cpp:member:`x_out`, :cpp:member:`y_out`) with the size and frequency step given. *POS* comes from the fact that the input spectrum only has positive frequencies (in order to not handle the f=0 bin).\n\n    - Declare and initialize variables\n    - GSL method applied for interpolatation\n    - Generate the interpolated output vector\n    - Free memory\n\n    **Members/Variables**\n\n    gsl_vector* **x_in**\n\n        GSL input vector with the abscissas of the vector which is going to be interpolated\n\n    gsl_vector* **y_in**\n\n        GSL input vector with the ordinates of the vector which is going to be interpolated\n\n    long **size**\n\n        Size of the interpolated output vector\n\n    double **step**\n\n        Frequency step of the interpolated output vector\n\n    gsl_vector** **x_out**\n\n        GSL output vector with the abscissas of the interpolated vector\n\n    gsl_vector** **y_out**\n\n        GSL output vector with the ordinates of the interpolated vector\n\n    .. cpp:member:: gsl_vector* x_in\n\n        GSL input vector with the abscissas of the vector which is going to be interpolated\n\n    .. cpp:member:: gsl_vector* y_in\n\n        GSL input vector with the ordinates of the vector which is going to be interpolated\n\n    .. cpp:member:: long size\n\n        Size of the interpolated output vector\n\n    .. cpp:member:: double step\n\n        Frequency step of the interpolated output vector\n\n    .. cpp:member:: gsl_vector** x_out\n\n        GSL output vector with the abscissas of the interpolated vector\n\n    .. cpp:member:: gsl_vector** y_out\n\n        GSL output vector with the ordinates of the interpolated vector\n\n"
                                },
                                {
                                    "line": 4707,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int interpolate_model(gsl_vector **modelFound, double p_model, gsl_vector *modelIn1, double p_modelIn1, gsl_vector *modelIn2, double p_modelIn2)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function interpolates the pulse model, :math:`p(t,E)`, between two models of the pulse models library,\n    :math:`p(t,E_1)` and :math:`p(t,E_2)`, being :math:`E_1<E<E_2`.\n\n    According to the interpolation method:\n\n    .. math::\n\n        p(t,E)={\\frac{E_2-E}{E_2-E_1}}p(t,E_1)+{\\frac{E-E_1}{E_2-E_1}}p(t,E_2)\n\n\n    **Members/Variables**\n\n    gsl_vector** **modelFound**\n\n        Found model of the pulse whose *energy* or *maxDER* is :cpp:member:`p_model`\n\n    double **p_model**\n\n        Parameter (*energy* or *maxDER*) of the pulse whose model is being sought\n\n    gsl_vector* **modelIn1**\n\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately lower than :cpp:member:`p_model` in the library FITS file\n\n    double **p_modelIn1**\n\n        Parameter (*energy* or *maxDER*) immediately lower than :cpp:member:`p_model` in the library FITS file\n\n    gsl_vector* **modelIn2**\n\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately greater than :cpp:member:`p_model` in the library FITS file\n\n    double **p_modelIn2**\n\n        Parameter (*energy* or *maxDER*) immediately greater than :cpp:member:`p_model` in the library FITS file\n\n    .. cpp:member:: gsl_vector** modelFound\n\n        Found model of the pulse whose *energy* or *maxDER* is :cpp:member:`p_model`\n\n    .. cpp:member:: double p_model\n\n        Parameter (*energy* or *maxDER*) of the pulse whose model is being sought\n\n    .. cpp:member:: gsl_vector* modelIn1\n\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately lower than :cpp:member:`p_model` in the library FITS file\n\n    .. cpp:member:: double p_modelIn1\n\n        Parameter (*energy* or *maxDER*) immediately lower than :cpp:member:`p_model` in the library FITS file\n\n    .. cpp:member:: gsl_vector* modelIn2\n\n        Model of the pulse whose parameter (*energy* or *maxDER*) is immediately greater than :cpp:member:`p_model` in the library FITS file\n\n    .. cpp:member:: double p_modelIn2\n\n        Parameter (*energy* or *maxDER*) immediately greater than :cpp:member:`p_model` in the library FITS file\n\n"
                                },
                                {
                                    "line": 4772,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: bool isNumber(string s)\n\n    Located in file: *genutils.cpp*\n\n    This function returns TRUE if the input string is a number or FALSE if not.\n\n    **Members/Variables**\n\n    string **s**\n\n        Input string\n\n    .. cpp:member:: string s\n\n        Input string\n\n"
                                },
                                {
                                    "line": 4795,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int loadRecord(TesRecord* record, double *time_record, gsl_vector **adc_double)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This fucntion loads the structure :cpp:member:`record` into the :cpp:member:`adc_double` GSL vector.\n\n    It checks if the record has been filled out with 0's => It only loads the first values (which are different from 0).\n\n    **Members/Variables**\n\n    TesRecord* **record**\n\n        Member of *TesRecord* structure that contains the input record\n\n    double **time_record**\n\n        Starting time of the record (output)\n\n    gsl_vector** **adc_double**\n\n        Storage of the record to be processed (input/output)\n\n    .. cpp:member:: TesRecord* record\n\n        Member of *TesRecord* structure that contains the input record\n\n    .. cpp:member:: double time_record\n\n        Starting time of the record (output)\n\n    .. cpp:member:: gsl_vector** adc_double\n\n        Storage of the record to be processed (input/output)\n\n"
                                },
                                {
                                    "line": 4830,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int lpf_boxcar (gsl_vector **invector, int szVct, int sampleRate)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function implements a low pass filtering as a box-car function in time.\n\n    The box-car function is a temporal average window:\n\n    .. math::\n\n        x_{i-1}=\\sum_{0}^{n-1}\\frac{I_i}{n}\n\n    .. math::\n\n        x_i=\\sum_{1}^{n}\\frac{I_i}{n}\n\n    If the cut frequency of the filter is :math:`\\mathit{f_c}`, the box-car length (*n*) is\n\n    .. math::\n\n        \\frac{1}{f_c}samprate\n\n    Steps:\n\n    - Declare variables\n    - Define the LPF (frequency domain) and the box-car function (time domain)\n    - It is going to work with a longer vector to not have fake results for the last *boxLength* windows\n    - Apply the box-car window by shifting it along the (lengthened) input vector\n    - Free allocated GSL vectors\n\n    The function returns:\n\n      - 1: Function cannot run\n      - 3: Cut-off frequency too high => Equivalent to not filter\n      - 4: Cut-off frequency too low\n\n    **Members/Variables**\n\n    gsl_vector** **invector**\n\n        Input/Output GSL vector (non-filtered input vector/filtered input vector)\n\n    int **szVct**\n\n        Size of :cpp:member:`invector`\n\n    int **sampleRate**\n\n        Sampling rate (samples/s)\n\n    .. cpp:member:: gsl_vector** invector\n\n        Input/Output GSL vector (non-filtered input vector/filtered input vector)\n\n    .. cpp:member:: int szVct\n\n        Size of :cpp:member:`invector`\n\n    .. cpp:member:: int sampleRate\n\n        Sampling rate (samples/s)\n\n"
                                },
                                {
                                    "line": 4895,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int matrix2vector(gsl_matrix *matrixin, gsl_vector **vectorout)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function converts an input square matrix :math:`[n \\times n]` into an output :math:`n^2` vector. It puts the first row of the matrix (:math:`n` elements) in the first :math:`n` elements of the vector (from :math:`0` to :math:`n-1`), the second row of the matrix in the elements from :math:`n` to :math:`2n-1` of the vector and so on.\n\n    **Members/Variables**\n\n    gsl_matrix* **matrixin**\n\n        GSL input square matrix :math:`[n \\times n]`\n\n    gsl_vector** **vectorout**\n\n        GSL output vector whose length is :math:`n^2`\n\n    .. cpp:member:: gsl_matrix* matrixin\n\n        GSL input square matrix :math:`[n \\times n]`\n\n    .. cpp:member:: gsl_vector** vectorout\n\n        GSL output vector whose length is :math:`n^2`\n\n"
                                },
                                {
                                    "line": 4920,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int medianKappaClipping (gsl_vector *invector, double kappa, double stopCriteria, double nSigmas, int boxLPF, double *threshold)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function calculates a threshold in the first derivative of the record by using a Kappa-clipping method\n    (replacing points beyond :math:`mean\\pm kappa \\cdot sigma` with the median).\n\n    Mean and sigma are calculated and values of :cpp:member:`invector` out of :math:`(mean+kappa \\cdot sigma,mean-kappa \\cdot sigma)` are replaced\n    with the median (it is trying to look for the baseline). And this process is iteratively repeated until there are\n    no points beyond :math:`mean \\pm kappa \\cdot sigma`. Finally, the threshold is calculated as :math:`mean+nSigmas \\cdot sigma` ('+' is used because\n    `if there are pulses in the input invector they are always positive`).\n\n    Steps:\n\n    - Declare variables\n    - Calculate the median\n    - Iterate until there are no points out of the maximum excursion ( :math:`kappa \\cdot sigma`)\n    - Establish the threshold as mean+nSigmas*sigma\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        First derivative of the (filtered) record\n\n    double **kappa**\n\n        Value to establish the range around of the mean\n\n    double **stopCriteria**\n\n        It is given in %\n\n    double **nSigmas**\n\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\cdot sigma`\n\n    int **boxLPF**\n\n        Length of the low-pass filtering box-car\n\n    double* **threshold**\n\n        Calculated threshold\n\n    .. cpp:member:: gsl_vector* invector\n\n        First derivative of the (filtered) record\n\n    .. cpp:member:: double kappa\n\n        Value to establish the range around of the mean\n\n    .. cpp:member:: double stopCriteria\n\n        It is given in %\n\n    .. cpp:member:: double nSigmas\n\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\cdot sigma`\n\n    .. cpp:member:: int boxLPF\n\n        Length of the low-pass filtering box-car\n\n    .. cpp:member:: double* threshold\n\n        Calculated threshold\n\n"
                                },
                                {
                                    "line": 4990,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int medianKappaClipping_noiseSigma (gsl_vector *invector, double kappa, double stopCriteria, double nSigmas, double *mean, double *sigma)\n\n    Located in file: *gennoisespec.cpp*\n\n\n    This function provides the mean and the sigma of an input vector (with noise sigmas) by using a Kappa-clipping\n    method (replacing points beyond :math:`mean\\pm kappa \\cdot sigma` with the median).\n\n    First, mean and sigma are calculated and :cpp:member:`invector` values out of :math:`(mean+kappa \\cdot sigma,mean-kappa \\cdot sigma)` are replaced\n    with the median (it is trying to look for the baseline). And this process is iteratively repeated until there are\n    no points beyond :math:`mean \\pm kappa \\cdot sigma`. Finally, the mean and sigma of the resulting vector are provided.\n\n    Steps:\n\n    - Declare variables\n    - Calculate the median\n    - Iterate until there are no points out of the maximum excursion ( :math:`kappa \\cdot sigma`)\n    - Calculate mean and sigma\n\n    **Members/Variables**\n\n    gsl_vector* **invector**\n\n        First derivative of the (filtered) record\n\n    double **kappa**\n\n        Value to establish the range around of the mean\n\n    double **stopCriteria**\n\n        It is given in %\n\n    double **nSigmas**\n\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\cdot sigma`\n\n    double* **mean**\n\n        Mean value of the :cpp:member:`invector` (no points beyond :math:`mean \\pm kappa \\cdot sigma`)\n\n    double* **sigma**\n\n        Sigma value of the :cpp:member:`invector` (no points beyond :math:`mean \\pm kappa \\cdot sigma`)\n\n    .. cpp:member:: gsl_vector* invector\n\n        First derivative of the (filtered) record\n\n    .. cpp:member:: double kappa\n\n        Value to establish the range around of the mean\n\n    .. cpp:member:: double stopCriteria\n\n        It is given in %\n\n    .. cpp:member:: double nSigmas\n\n        Times sigma to calculate threshold as :math:`mean+nSigmas \\cdot sigma`\n\n    .. cpp:member:: int boxLPF\n\n        Length of the low-pass filtering box-car\n\n    .. cpp:member:: double* mean\n\n        Mean value of the :cpp:member:`invector` (no points beyond :math:`mean \\pm kappa \\cdot sigma`)\n\n    .. cpp:member:: double* sigma\n\n        Sigma value of the :cpp:member:`invector` (no points beyond :math:`mean \\pm kappa \\cdot sigma`)\n\n"
                                },
                                {
                                    "line": 5064,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void MyAssert(int expr, char* msg)\n\n    Located in file: *initSIRENA.c*\n\n    This function displays an error message if the condition in :cpp:member:`expr` is true.\n\n    **Members/Variables**\n\n    int **expr**\n\n        Condition to be true in order to display the error message\n\n    char* msg\n\n        Message to be displayed\n\n"
                                },
                                {
                                    "line": 5083,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_OptimalFilterSIRENA* newOptimalFilterSIRENA(int* const status)\n\n    Located in file: *integraSIRENA.cpp*\n\n    Constructor. It returns a pointer to an empty *OptimalFilterSIRENA* data structure.\n\n    **Members/Variables**\n\n    int* const **status**\n\n        Input/output status\n\n    .. cpp:member:: int* const status\n\n        Input/output status\n\n"
                                },
                                {
                                    "line": 5100,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_PulsesCollection* newPulsesCollection(int* const status)\n\n    Located in file: *integraSIRENA.cpp*\n\n    Constructor. It returns a pointer to an empty *PulsesCollection* data structure.\n\n    **Members/Variables**\n\n    int* const **status**\n\n        Input/output status\n\n    .. cpp:member:: int* const status\n\n        Input/output status\n"
                                },
                                {
                                    "line": 5116,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_ReconstructInitSIRENA* newReconstructInitSIRENA(int* const status)\n\n    Located in file *integraSIRENA.cpp*\n\n    Constructor. It returns a pointer to an empty *ReconstructInitSIRENA* data structure.\n\n    **Members/Variables**\n\n    int* const **status**\n\n        Input/output status\n\n    .. cpp:member:: int* const status\n\n        Input/output status\n\n"
                                },
                                {
                                    "line": 5133,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int noDetect(gsl_vector *der, ReconstructInitSIRENA *reconstruct_init, int *numberPulses, gsl_vector **tstartgsl, gsl_vector **flagTruncated, gsl_vector **maxDERgsl, gsl_vector **samp1DERgsl)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function runs if the starting time of the pulses are agiven as input parameters (:option:`tstartPulse1` != 0).\n    It looks for the maximum of the derivative of the pulse and the average of the first 4 samples of the derivative of the pulse.\n\n    **Members/Variables**\n\n    gsl_vector* **der**\n\n        First derivative of the (low-pass filtered) record\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    int* **numberPulses**\n\n        Number of events\n\n    gsl_vector** **tstartgsl**\n\n        Starting time of the events (in samples)\n\n    gsl_vector** **flagTruncated**\n\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\n\n    gsl_vector** **maxDERgsl**\n\n        Maximum of the derivative of the event\n\n    gsl_vector** **samp1DERgsl**\n\n        Average of the first 4 samples of the derivative of the event\n\n    .. cpp:member:: gsl_vector* der\n\n        First derivative of the (low-pass filtered) record\n\n    .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: int* numberPulses\n\n        Number of events\n\n    .. cpp:member:: gsl_vector** tstartgsl\n\n        Starting time of the events (in samples)\n\n    .. cpp:member:: gsl_vector** flagTruncated\n\n        Flag indicating if the event is truncated (inside this function only initial truncated pulses are classified)\n\n    .. cpp:member:: gsl_vector** maxDERgsl\n\n        Maximum of the derivative of the event\n\n    .. cpp:member:: gsl_vector** samp1DERgsl\n\n        Average of the first 4 samples of the derivative of the event\n\n"
                                },
                                {
                                    "line": 5204,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int obtainRiseFallTimes (gsl_vector *recordNOTFILTERED, double samprate, gsl_vector *tstartgsl, gsl_vector *tendgsl, gsl_vector *Bgsl, gsl_vector *Lbgsl, int numPulses, gsl_vector **tauRisegsl, gsl_vector **tauFallgsl)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function provides an estimation of the rise and fall time of the detected pulses in a record.\n\n    - Find the maximum of each pulse: *amax*\n    - Baseline of each pulse: *abase*\n    - Find the first sample in the rising part above the 10% and 50%: *t10* and *t50*\n        - Line by using 2 points: *(t10,a10)* and *(t50,a50)*\n        - *t0 (t0,abase)*\n        - *tmax (tmax,amax)*\n        - Rise time = *tmax-t0*\n    - Find the first sample in the decreasing part below the 50% and 10%: *t50* and *t10*\n        - Line by using 2 points: *(t50,a50)* and *(t10,a10)*\n        - *t0 (t0,abase)*\n        - *tmax (tmax,amax)*\n        - Fall time = *t0-tmax*\n\n    **Members/Variables**\n\n    gsl_vector* **recordNOTFILTERED**\n\n        Record neither low-pass filtered nor differentiated\n\n    double **samprate**\n\n        Sampling rate\n\n    gsl_vector* **tstartgsl**\n\n        Starting time of the detected pulses in the record (samples)\n\n    gsl_vector* **tendgsl**\n\n        Ending time of the detected pulses in the record (samples)\n\n    gsl_vector* **Bgsl**\n\n        In general, sum of the *Lb* digitized data samples of a pulse-free interval immediately before each pulse\n\n    gsl_vector* **Lbgsl**\n\n        Number of samples added in *Bgsl* for each pulse\n\n    int **numPulses**\n\n        Number of detected pulses in the record\n\n    gsl_vector** **tauRisegsl**\n\n        Rise time of the detected pulses in the record (seconds)\n\n    gsl_vector** **tauFallgsl**\n\n        Fall time of the detected pulses in the record (seconds)\n\n    .. cpp:member:: gsl_vector* recordNOTFILTERED\n\n        Record neither low-pass filtered nor differentiated\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: gsl_vector* tstartgsl\n\n        Starting time of the detected pulses in the record (samples)\n\n    .. cpp:member:: gsl_vector* tendgsl\n\n        Ending time of the detected pulses in the record (samples)\n\n    .. cpp:member:: gsl_vector* Bgsl\n\n        In general, sum of the *Lb* digitized data samples of a pulse-free interval immediately before each pulse\n\n    .. cpp:member:: gsl_vector* Lbgsl\n\n        Number of samples added in *Bgsl* for each pulse\n\n    .. cpp:member:: int numPulses\n\n        Number of detected pulses in the record\n\n    .. cpp:member:: gsl_vector** tauRisegsl\n\n        Rise time of the detected pulses in the record (seconds)\n\n    .. cpp:member:: gsl_vector** tauFallgsl\n\n        Fall time of the detected pulses in the record (seconds)\n\n"
                                },
                                {
                                    "line": 5298,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int parabola3Pts (gsl_vector *x, gsl_vector *y, double *a, double *b, double *c)\n\n    Located in file: *genutils.cpp*\n\n    This function calculates the equation of a parabola given 3 points.\n\n    **Members/Variables**\n\n    gsl_vector* **x**\n\n        Input GSL with *x* vector\n\n    gsl_vector* **y**\n\n        Input GSL with *y* vector\n\n    double* **a**\n\n        Fit coefficient of the quadratic term\n\n    double* **b**\n\n        Fit coefficient of the linear term\n\n    double* **c**\n\n        Fit coefficient (independent term)\n\n    .. cpp:member:: gsl_vector* x\n\n        Input GSL with *x* vector\n\n    .. cpp:member:: gsl_vector* y\n\n        Input GSL with *y* vector\n\n    .. cpp:member:: double* a\n\n        Fit coefficient of the quadratic term\n\n    .. cpp:member:: double* b\n\n        Fit coefficient of the linear term\n\n    .. cpp:member:: double* c\n\n        Fit coefficient (independent term)\n\n"
                                },
                                {
                                    "line": 5347,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int polyFit(gsl_vector *x_fit, gsl_vector *y_fit, double *a, double *b, double *c)\n\n    Located in file: *genutils.cpp*\n\n    This function makes a polynomial fitting :math:`ax^2+bx+c` using the regression quadratic analysis. To measure how well model agrees with the data, the chi-square merit function is used, which in this case is\n\n    .. math::\n\n        \\chi^2 (a,b,c)= \\sum_{i=1}^{N}\\left(\\frac{y_i-a-bx_i-c{x_i}^2}{\\sigma_i}\\right)^2\n\n    This equation is minimized to determine *a*, *b* and *c*. Then\n\n    .. math::\n\n       \\begin{array}{ccc}\n       S_{(x,x)}=\\sum{{x_i}^2}-\\frac{(\\sum{x_i})^2}{N} & S_{(x^2,y)}=\\sum{{x_i}^2y_i}-\\frac{\\sum{{x_i}^2}\\cdot\\sum{y_i}}{N}\\\\\n       S_{(x,y)}=\\sum{x_iy_i}-\\frac{\\sum{x_i}\\cdot\\sum{y_i}}{N} & S_{(x^2,x^2)}=\\sum{{x_i}^4}-\\frac{\\left(\\sum{{x_i}^2}\\right)^2}{N}\\\\\n       S_{(x,x^2)}=\\sum{{x_i}^3}-\\frac{\\sum{x_i}\\cdot\\sum{{x_i}^2}}{N} & \\\\\n       \\end{array}\n\n    .. math::\n\n       a = \\frac{S_{(x^2,y)}S_{(x,x)}-S_{(x,y)}S_{(x,x^2)}}{S_{(x,x)}S_{(x^2,x^2)} -{\\vert S_{(x,x^2)} \\vert}^2}\n\n    .. math::\n\n       b = \\frac{S_{(x,y)}S_{(x^2,x^2)}-S_{(x^2,y)}S_{(x,x^2)}}{S_{(x,x)}S_{(x^2,x^2)} -{\\vert S_{(x,x^2)} \\vert}^2}\n\n    .. math::\n\n       c = \\frac{\\sum{y_i}}{N}-b\\frac{\\sum{x_i}}{N}-a\\frac{\\sum{{x_i}^2}}{N}\n\n    **Members/Variables**\n\n    gsl_vector* **x_fit**\n\n        Input GSL with *x* vector\n\n    gsl_vector* **y_fit**\n\n        Input GSL with *y* vector\n\n    double* **a**\n\n        Fit coefficient of the quadratic term\n\n    double* **b**\n\n        Fit coefficient of the linear term\n\n    double* **c**\n\n        Fit coefficient (independent term)\n\n    .. cpp:member:: gsl_vector* x_fit\n\n        Input GSL with *x* vector\n\n    .. cpp:member:: gsl_vector* y_fit\n\n        Input GSL with *y* vector\n\n    .. cpp:member:: double* a\n\n        Fit coefficient of the quadratic term\n\n    .. cpp:member:: double* b\n\n        Fit coefficient of the linear term\n\n    .. cpp:member:: double* c\n\n        Fit coefficient (independent term)\n\n"
                                },
                                {
                                    "line": 5422,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int polyFitLinear(gsl_vector *x_fit, gsl_vector *y_fit, double *a, double *b)\n\n    Located in file: *genutils.cpp*\n\n    This function makes a linear fitting :math:`ax+b` using the regression linear analysis. To measure how well model agrees with the data, the chi-square merit function is used, which in this case is\n\n    .. math::\n\n        \\chi^2 (a,b)= \\sum_{i=1}^{N}\\left(\\frac{y_i-a-bx_i}{\\sigma_i}\\right)^2\n\n    This equation is minimized to determine *a* and *b*. Then\n\n    .. math::\n\n       a = \\frac{N \\sum{x_i y_i}- \\sum{x_i}\\sum{y_i}}{N \\sum{x_i^2} - {\\left(\\sum{x_i}\\right)}^2}\n\n    .. math::\n\n       b = \\frac{\\sum{y_i}}{N}-a \\frac{\\sum{x_i}}{N}\n\n\n    **Members/Variables**\n\n    gsl_vector* **x_fit**\n\n        Input GSL with *x* vector\n\n    gsl_vector* **y_fit**\n\n        Input GSL with *y* vector\n\n    double* **a**\n\n        Fit coefficient of the linear term\n\n    double* **b**\n\n        Fit coefficient (independent term)\n\n    .. cpp:member:: gsl_vector* x_fit\n\n        Input GSL with *x* vector\n\n    .. cpp:member:: gsl_vector* y_fit\n\n        Input GSL with *y* vector\n\n    .. cpp:member:: double* a\n\n        Fit coefficient of the linear term\n\n    .. cpp:member:: double* b\n\n        Fit coefficient (independent term)\n\n"
                                },
                                {
                                    "line": 5478,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void print_error( const char* const func, string message, int status)\n\n    Located in file: *genutils.cpp*\n\n    This function prints out error messages.\n\n    **Members/Variables**\n\n    const char* const **func**\n\n        Function name whose error is printed\n\n    string **msg**\n\n        Error message to be printed\n\n    int **status**\n\n        Status\n\n    .. cpp:member:: const char* const func\n\n        Function name whose error is printed\n\n    .. cpp:member:: string msg\n\n        Error message to be printed\n\n    .. cpp:member:: int status\n\n        Status\n\n"
                                },
                                {
                                    "line": 5511,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int procRecord (ReconstructInitSIRENA** reconstruct_init, double tstartRecord, double samprate, fitsfile *dtcObject, gsl_vector *record, gsl_vector *recordWithoutConvert2R, PulsesCollection *foundPulses, long num_previousDetectedPulses, int pixid, gsl_vector *phid, int oscillations, int nrecord, double tstartPrevPulse)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function processes the input record (detecting the pulses):\n\n    1) Declare and initialize variables\n\n    2) Allocate GSL vectors\n\n    3) (Low-pass filtering and) differentiation\n\n    4) If there are weird oscillations in the record, it is not processed => numPulses = 0\n\n    5) Find the events (pulses) in the record\n\n       - If production mode:\n\n            - No detect if :option:`tstartPulse1` != 0: 'noDetect'\n            - Detect (:option:`tstartPulse1` != 0):\n\n                - 'InitialTriggering'\n                - 'FindSecondaries' (:option:`detectionMode` = AD) or 'FindSecondariesSTC' (:option:`detectionMode` = STC)\n\n       - If calibration mode: 'findPulsesCAL'\n\n    6) Calculate the end time of the found pulses and check if the pulse is saturated\n\n    7) Calculate the baseline (mean and standard deviation) before a pulse (in general *before*) => To be written in **BSLN** and **RMSBSLN** columns in the output FITS file\n\n    8) Obtain the approximate rise and fall times of each pulse\n\n    9) Load the found pulses data in the input/output *foundPulses* structure\n\n    10) Write test info (if *reconstruct_init->intermediate* = 1)\n\n    11) Write pulses info in intermediate output FITS file (if *reconstruct_init->intermediate* = 1)\n\n    12) Free allocated GSL vectors\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    double **tstartRecord**\n\n        Starting time of the record (in order to calculate absolute times)\n\n    double **samprate**\n\n        Sampling rate (in order to low-pass filter)\n\n    fitsfile* **dtcObject**\n\n        Object which contains information of the intermediate FITS file (to be written if :option:`intermediate` = 1)\n\n    gsl_vector* **record**\n\n        GSL vector with signal values of input record\n\n    gsl_vector* **recordWithoutConvert2R**\n\n        GSL vector with original signal values of input record (without being converted to R space)\n\n    PulsesCollection* **foundPulses**\n\n        Input/output structure where the info about found pulses is stored\n\n    long **num_previousDetectedPulses**\n\n        Number of previous detected pulses (to know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name)\n\n    int **pixid**\n\n        Pixel ID (from the input file) to be propagated\n\n    gsl_vector* **phid**\n\n        Photon ID (from the input file) to be propagated\n\n    int **oscillations**\n\n        1 (there are weird oscillations in the record) or 0 (record without weird oscillations)\n\n    int **nrecord**\n\n        Current record index\n\n    double **tstartPrevPulse**\n\n        tstart of the previous pulse (last pulse of the previous record) (seconds)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: double tstartRecord\n\n        Starting time of the record (in order to calculate absolute times)\n\n    .. cpp:member:: double samprate\n\n        Sampling rate (in order to low-pass filter)\n\n    .. cpp:member:: fitsfile* dtcObject\n\n        Object which contains information of the intermediate FITS file (to be written if :option:`intermediate` = 1)\n\n    .. cpp:member:: gsl_vector* record\n\n        GSL vector with signal values of input record\n\n    .. cpp:member:: gsl_vector* recordWithoutConvert2R\n\n        GSL vector with original signal values of input record (without being converted to R space)\n\n    .. cpp:member:: PulsesCollection* foundPulses\n\n        Input/output structure where the info about found pulses is stored\n\n    .. cpp:member:: long num_previousDetectedPulses\n\n        Number of previous detected pulses (to know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name)\n\n    .. cpp:member:: int pixid\n\n        Pixel ID (from the input file) to be propagated\n\n    .. cpp:member:: gsl_vector* phid\n\n        Photon ID (from the input file) to be propagated\n\n    .. cpp:member:: int oscillations\n\n        1 (there are weird oscillations in the record) or 0 (record without weird oscillations)\n\n    .. cpp:member:: int nrecord\n\n        Current record index\n\n    .. cpp:member:: double tstartPrevPulse\n\n        tstart of the previous pulse (last pulse of the previous record) (seconds)\n\n"
                                },
                                {
                                    "line": 5658,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int pulseGrading(ReconstructInitSIRENA *reconstruct_init, int tstart, int grade1, int grade2, int *pulseGrade, long *OFlength, int nrecord)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function provides the pulse grade (Rejected=-1, HighRes=1, MidRes=2, LimRes=3, LowRes=4) and the optimal filter length by taking into account the info read from the XML file and the :option:`OFStrategy` (**FREE**, **BYGRADE** or **FIXED**).  (Pileup=-2 not used)\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    int **tstart**\n\n        Start time (samples)\n\n    int **grade1**\n\n        Pulse duration (length of optimal filter applied)\n\n    int **grade2**\n\n        Difference between the start time of the pulse and the start time of the previous pulse\n\n    int* **pulseGrade**\n\n        Pulse grade (output)\n\n    long* **OFlength**\n\n        Optimal filter length (= :option:`OFLength` only if :option:`OFStrategy` = **FIXED** and :option:`OFLength` <= grade1) (output)\n\n    int nrecord\n\n        Current record index (to know the particular record where there could be more than one pulse => message)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: int grade1\n\n        Pulse duration (length of optimal filter applied)\n\n    .. cpp:member:: int grade2\n\n        Difference between the start time of the pulse and the start time of the previous pulse\n\n    .. cpp:member:: int OFlength_strategy\n\n        Same as :option:`OFStrategy` (input)\n\n    .. cpp:member:: int* pulseGrade\n\n        Pulse grade (output)\n\n    .. cpp:member:: long* OFlength\n\n        Optimal filter length (= :option:`OFLength` only if :option:`OFStrategy` = **FIXED** and :option:`OFLength` <= grade1) (output)\n\n    .. cpp:member:: int nrecord\n\n        Current record index (to know the particular record where there could be more than one pulse => message)\n\n"
                                },
                                {
                                    "line": 5727,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int readAddSortParams(ReconstructInitSIRENA *reconstruct_init, fitsfile **inLibObject, double samprate, int eventcntLib, double estenergy, gsl_vector *pulsetemplate, gsl_vector *pulsetemplate_B0, gsl_matrix *covariance, gsl_matrix *weight, gsl_vector *pulsetemplateMaxLengthFixedFilter, gsl_vector *pulsetemplateMaxLengthFixedFilter_B0)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function reads the library data, add new data (a new row) and sort the data according to an energy-ascending order.\n\n    - Declare variables\n    - Load values already in the library\n    - Add new values\n    - Realign\n    - Add intermeadiate values\n    - Recalculate intermediate values of some new pairs\n    - Write values in the library\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    fitsfile** **inLibObject**\n\n        FITS object containing information of the library FITS file\n\n    double **samprate**\n\n        Sampling rate\n\n    int **eventcntLib**\n\n        Number of templates in the library\n\n    double **estenergy**\n\n        Pulse height of the template whose energy is going to be added to the library\n\n    gsl_vector* **pulsetemplate**\n\n        GSL vector with the pulse template whose energy is going to be added to the library\n\n    gsl_vector* **pulsetemplate_B0**\n\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\n\n    gsl_matrix* **covariance**\n\n        GSL matrix with covariance matrix of the energy which is going to be added to the library\n\n    gsl_matrix* **weight**\n\n        GSL matrix with weight matrix of the energy which is going to be added to the library\n\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter**\n\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library\n\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter_B0**\n\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library (without baseline)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: fitsfile** inLibObject\n\n        FITS object containing information of the library FITS file\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: int eventcntLib\n\n        Number of templates in the library\n\n    .. cpp:member:: double estenergy\n\n        Pulse height of the template whose energy is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplate\n\n        GSL vector with the pulse template whose energy is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplate_B0\n\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\n\n    .. cpp:member:: gsl_matrix* covariance\n\n        GSL matrix with covariance matrix of the energy which is going to be added to the library\n\n    .. cpp:member:: gsl_matrix* weight\n\n        GSL matrix with weight matrix of the energy which is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter\n\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter_B0\n\n        GSL vector with the :option:`largeFilter`-length template whose energy is going to be added to the library (without baseline)\n\n"
                                },
                                {
                                    "line": 5833,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int readFitsComplex(IOData obj, gsl_matrix **result)\n\n    Located in file: *inoututils.cpp*\n\n    This function reads values of a complex column of a FITS file. After that, the function puts them into a GSL matrix for an easier processing.\n\n    **Members/Variables**\n\n    IOData **obj**\n\n        Input object for complex FITS column\n\n    gsl_matrix** **result**\n\n        Output GSL matrix\n\n    .. cpp:member:: IOData obj\n\n        Input object for complex FITS column\n\n    .. cpp:member:: gsl_matrix** result\n\n        Output GSL matrix\n\n"
                                },
                                {
                                    "line": 5858,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int readFitsSimple(IOData obj, gsl_vector **result)\n\n    Located in file: *inoututils.cpp*\n\n    This function reads values of a simple column of a FITS file. After that, the function puts them into a GSL vector for an easier processing.\n\n    **Members/Variables**\n\n    IOData **obj**\n\n        Input object for simple FITS column\n\n    gsl_vector** **result**\n\n        Output GSL vector\n\n    .. cpp:member:: IOData obj\n\n        Input object for simple FITS column\n\n    .. cpp:member:: gsl_vector** result\n\n        Output GSL vector\n"
                                },
                                {
                                    "line": 5882,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: extern_C_void reconstructRecordSIRENA(TesRecord* record, int trig_reclength, TesEventList* event_list, ReconstructInitSIRENA* reconstruct_init,  int lastRecord, int nRecord, PulsesCollection **pulsesAll, int* const status)\n\n    Located in file: *integraSIRENA.cpp*\n\n    This function is the main wrapper function to detect, grade and calculate the energy of the pulses in the input records.\n\n    - Inititalize *PulsesCollection* structure\n    - Check consistency of some input parameters\n    - If first record, read the necessary keywords and columns from the input file in order to convert from current to quasi-resistance space\n    - In case of running with threading\n    - Detect pulses in input record (:cpp:func:`runDetect`).\n    - If reconstruction and not PCA:\n        - Filter and calculate energy of pulses (:cpp:func:`runEnergy`)\n    - Fill in the :cpp:member:`pulsesAll` structure\n    - Populate output event list with pulses energies, arrival time and grading\n\n    **Members/Variables**\n\n    TesRecord* **record**\n\n        Instance of *TesRecord* structure that contains the input record\n\n    int **trig_reclength**\n\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\n\n    TesEventList* **event_list**\n\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\n\n    ReconstructInitSIRENA* **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    int **lastRecord**\n\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\n\n    int **nRecord**\n\n        Input record number\n\n    PulsesCollection** **pulsesAll**\n\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record.\n\n    int* const **status**\n\n        Input/output status\n\n    .. cpp:member:: TesRecord* record\n\n        Instance of *TesRecord* structure that contains the input record\n\n    .. cpp:member:: int trig_reclength\n\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\n\n    .. cpp:member:: TesEventList* event_list\n\n        Instance of *TesEventList* structure that contains the information of the reconstructed pulses\n\n     .. cpp:member:: ReconstructInitSIRENA* reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: int lastRecord\n\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\n\n    .. cpp:member:: int nRecord\n\n        Input record number\n\n    .. cpp:member:: int lastRecord\n\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\n\n    .. cpp:member:: int nRecord\n\n        Input record number\n\n    .. cpp:member:: PulsesCollection** pulsesAll\n\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record.\n\n    .. cpp:member:: int* const status\n\n        Input/output status\n\n"
                                },
                                {
                                    "line": 5973,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int RS_filter(gsl_vector *vector, double lrs, double lb, double B, double *pulseheight)\n\n    Located in file: *pulseprocess.cpp*\n\n    This function uses the running sum filter to find the pulse height. It always works in time domain.\n\n    A running sum filter, *RS*, is the sum of :cpp:member:`lrs` digitized data samples. It is continuously updated upon the arrival of\n    new data point. Simultaneously a baseline filter, :cpp:member:`B`, is the sum of :cpp:member:`lb` digitized data samples without pulses. The\n    algorithm looks for the time when *RS/lrs* reaches its maximum. At that time *RS* is stored, :math:`RS_{max}`, and the baseline\n    is scaled with :cpp:member:`lrs`, *Bp* ( :math:`Bp=B \\cdot lrs/lb`). Then, the pulse height related to the pulse pseudoenergy is given by:\n\n    .. math::\n\n        Pulse height=\\frac{RS_{max}-B_p}{lrs}\n\n    **Members/Variables**\n\n    gsl_vector* **vector**\n\n        Not filtered pulse (extracted from the record in :cpp:func:`getPulseHeight`)\n\n    double **lrs**\n\n        Running sum length (samples)\n\n    double **lb**\n\n        Baseline averaging length (samples)\n\n    double **B**\n\n        In general, sum of the :cpp:member:`lb` digitized data samples of a pulse-free interval immediately before the current pulse\n\n    double* **pulseheight**\n\n        Pulseheight of the input pulse\n\n    .. cpp:member:: gsl_vector* vector\n\n        Not filtered pulse (extracted from the record in :cpp:func:`getPulseHeight`)\n\n    .. cpp:member:: double lrs\n\n        Running sum length (samples)\n\n    .. cpp:member:: double lb\n\n        Baseline averaging length (samples)\n\n    .. cpp:member:: double B\n\n        In general, sum of the :cpp:member:`lb` digitized data samples of a pulse-free interval immediately before the current pulse\n\n    .. cpp:member:: double* pulseheight\n\n        Pulseheight of the input pulse\n\n"
                                },
                                {
                                    "line": 6031,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void runDetect(TesRecord* record, int trig_reclength, int lastRecord, int nrecord, PulsesCollection *pulsesAll, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function is responsible for the **detection** in SIRENA, record by record. It is used both for library creation and energy reconstruction runnings.\n\n    Conditions:\n\n        - If first record and reconstruction mode  =>  Run :cpp:func:`filderLibrary`\n\n        - If last record and calibration mode => Run :cpp:func:`calculateTemplate` and :cpp:func:`writeLibrary`\n\n        - If :option:`intermediate` = 1 => :cpp:func:`writeTestInfo` and :cpp:func:`writePulses`\n\n        - If calibration mode => Find pulses by using :cpp:func:`findPulsesCAL`\n\n        - If reconstruction mode => Find pulses by :cpp:func:`InitialTriggering` and :cpp:func:`FindSecondaries` or :cpp:func:`FindSecondariesSTC`\n\n    Steps:\n\n        1) Create library file if it is necessary: calibration and last record (run :cpp:func:`createLibrary`)\n\n        2) Create intermediate output FITS file if required (:cpp:func:`createDetectFile`)\n\n        3) (Filter and) differentiate the *models* of the library (only for the first record in reconstruction mode). Run  (:cpp:func:`filderLibrary`)\n\n        4) Store the input record in *invector* (:cpp:func:`loadRecord`)\n\n        5) Detect weird oscillations in some GSFC records providing a warning (no pulses detected in that record)\n\n        6) Convert *I* into *R* if :option:`EnergyMethod` = **I2R** or **I2RFITTED** (:cpp:func:`convertI2R`)\n\n        7) Process each record (:cpp:func:`proceRecord`):\n\n                - (Low-pass filter and) differentiate\n                - Find pulses\n                - Load the found pulses data in the input/output *foundPulses* structure\n                - Write test info in intermediate output FITS file if :option:`intermediate` = 1 (:cpp:func:`writeTestInfo`)\n                - Write pulses info in intermediate output FITS file if :option:`intermediate` = 1 (:cpp:func:`writePulses`)\n\n        **From this point forward, I2R and I2RFITTED are completely equivalent to OPTFILT**\n\n        8) If last record in calibration mode run:\n\n                * :cpp:func:`calculateTemplate` (and :cpp:func:`weightMatrix`)\n                * :cpp:func:`writeLibrary`\n\n        9) If last record and PCA:\n\n                - In order to not have restrictions when providing (\\*reconstruct_init)->energyPCAx\n                - Covariance data\n                - Eigenvalues and eigenvectors\n                - RSxN (S=2)\n                - AE straight line: Pto0(x,y) and Pto10(x,y)\n                - Calculus of the rotation angle\n                - Rotation\n                - Histograms of the two clusters (two energies)\n                - Conversion factor from arbitrary unit to eV\n                - Energy calculation\n\n        10) Close intermediate output FITS file if it is necessary\n\n    **Members/Variables**\n\n    TesRecord* **record**\n\n        Member of *TesRecord* structure that contains the input record\n\n    int **trig_reclength**\n\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\n\n    int **lastRecord**\n\n        Integer to verify whether *record* is the last one (=1) to be read (and thus if library file will be created)\n\n    PulsesCollection* **pulsesAll**\n\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    PulsesCollection** **pulsesInRecord**\n\n        Member of *PulsesCollection* structure to store all the pulses found in the input record\n\n    .. cpp:member:: TesRecord* record\n\n        Member of *TesRecord* structure that contains the input record\n\n    .. cpp:member:: int trig_reclength\n\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\n\n    .. cpp:member:: int lastRecord\n\n        Integer to verify whether *record* is the last one (=1) to be read (and thus if library file will be created)\n\n    .. cpp:member:: int nrecord\n\n        Current record index (to know the particular record where there is a weird oscillation)\n\n    .. cpp:member:: PulsesCollection* pulsesAll\n\n        Member of *PulsesCollection* structure to successively store all the pulses used to create the library. Re-populated after each processed record\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: PulsesCollection** pulsesInRecord\n\n        Member of *PulsesCollection* structure to store all the pulses found in the input record\n\n"
                                },
                                {
                                    "line": 6148,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void runEnergy(TesRecord* record, int lastRecord, int nrecord, int trig_reclength, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord, PulsesCollection *pulsesAll)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function calculates the pulse energy applying different methods (from :option:`EnergyMethod` and :option:`OFNoise`).\n    It only runs in RECONSTRUCTION mode (except to :option:`EnergyMethod` = **PCA**).\n\n    - Declare variables\n    - Store the :cpp:member:`record` in *invector* (:cpp:func:`loadRecord`)\n    - Subtract the baseline if :option:`EnergyMethod` = **OPTFILT** and *runF0orB0val* = 1 (:option:`FilterMethod` = **B0**)\n    - Subtract the baseline if :option:`EnergyMethod` = **INTCOVAR**\n    - Check Quality\n    - For each pulse:\n\n        - Establish the pulse grade (for example VeryHighRes=1, HighRes=2, IntRes=3, MedRes=4, LimRes=5, LowRes=6, Rejected=-1) and the optimal filter length\n        - Pulse: Load the proper piece of the record in *pulse*\n        - Get the low resolution energy estimator by filtering with a 8-samples-length (with lags) filter:\n            - Load the low resolution pulse in *pulse_lowres*\n            - Get the filter\n            - Calculate the low resolution estimator\n        - If :option:`OFIter` = 1, in the first iteration ( *numiteration* = 0) the values of *maxDER* and *maxDERs* are used in\n          :cpp:func:`find_matchedfilterSAB`, :cpp:func:`find_optimalfilterSAB` or :cpp:func:`find_Esboundary` getting the values of the *energies* which straddle the *maxDER* (*Ealpha* and *Ebeta*). It will have more iterations if the calculated *energy* is out of *[Ealpha, Ebeta]*. If *energy* is in *[Ealpha, Ebeta]* the iterative process stops.\n\n                - If :option:`EnergyMethod` = **OPTFILT** (or **I2R**, **I2RFITTED**) and *reconstruct_init->OFLib* = 0 and :option:`OFNoise` = **NSD**:\n\n                    - Find the matched filter and load it in *filter* (:cpp:func:`find_matchedfilterSAB`)\n                    - Calculate the optimal filter\n\n                - If :option:`EnergyMethod` = **OPTFILT** (or **I2R**, **I2RFITTED**) and *reconstruct_init->OFLib* = 1 and :option:`OFNoise` = **NSD**:\n\n                    - If it is necessary, choose the base-2 system value closest (lower than or equal) to the pulse length\n                    - Find the optimal filter and load it in *filter* (:cpp:func:`find_optimalfilterSAB`)\n\n                - If :option:`EnergyMethod` = **INTCOVAR** or **COVAR**:\n\n                    - Get the indexes of the two energies which straddle the pulse (:cpp:func:`find_Esboundary`)\n                    - If :option:`EnergyMethod` = **COVAR** and *reconstruct_init->OFLib* = 1:\n\n                       - Choose the base-2 system value closest (lower than or equal) to the pulse length\n                       - :cpp:func:`find_prclcov` to find the appropriate values of the *PRCLCOV* HDU (**PCOVx** columns)\n\n                - If :option:`EnergyMethod` = **OPTFILT** (or **I2R**, **I2RFITTED**) and *reconstruct_init->OFLib* = 1 and :option:`OFNoise` = **WEIGHTN**:\n\n                    - Choose the base-2 system value closest (lower than or equal) to the pulse length\n                    - :cpp:func:`find_prclofwn` to find the appropriate values of the *PRCLOFWN* HDU (**OFWNx** columns)\n\n                - Subtract the sum of the filter if :option:`EnergyMethod` = **OPTFILT**, :option:`OFNoise` = **NSD**, :option:`FilterDomain` = **T**, 0-padding and :option:`Sum0Filt` =1\n                - Calculate the energy of each pulse\n                - If using lags, it is necessary to modify the tstart of the pulse\n        - In order to subtract the pulse model, it has to be located in the tstart with jitter and know its values in the digitized samples\n        - Subtract the pulse model from the record\n        - Write info of the pulse in the output intemediate file if :option:`intermediate` = 1\n    - Free allocated GSL vectors\n\n    **Members/Variables**\n\n    TesRecord** **record**\n\n        Structure that contains the input ADC record\n\n    int **lastRecord**\n\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\n\n    int **nRecord**\n\n        Input record number\n\n    int **trig_reclength**\n\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    PulsesCollection* **pulsesInRecord**\n\n        Collection of pulses found in the current record\n\n     PulsesCollection* **pulsesAll**\n\n        Member of *PulsesCollection* structure to store all the pulses found in the input FITS file. To know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name\n\n    .. cpp:member:: TesRecord** record\n\n        Structure that contains the input ADC record\n\n     .. cpp:member:: int **lastRecord**\n\n        If record being analyzed is the last one, :cpp:member:`lastRecord` = 1. Otherwise it is equal to 0\n\n    .. cpp:member:: int **nRecord**\n\n        Input record number\n\n    .. cpp:member:: int trig_reclength\n\n        Record size (just in case threading and input files with different **ADC** lengths but the same record size indeed)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: PulsesCollection* pulsesInRecord\n\n        Collection of pulses found in the current record\n\n    .. cpp:member::  PulsesCollection* pulsesAll\n\n        Member of *PulsesCollection* structure to store all the pulses found in the input FITS file. To know the index to get the proper element from *tstartPulse1_i* in case :option:`tstartPulse1` was a file name\n\n"
                                },
                                {
                                    "line": 6261,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void th_runEnergy(TesRecord* record, int nrecord, int trig_reclength, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord, PulsesCollection *pulsesAll)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function is responsible for the **reconstruction** in SIRENA (instead of :cpp:func:`runEnergy`) when the **THREADING** running option has been chosen (hardcoded at this moment).\n"
                                },
                                {
                                    "line": 6269,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int shiftm(gsl_vector *vectorin, gsl_vector *vectorout, int m)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function returns as :cpp:member:`vectorout` the :cpp:member:`vectorin` delayed :cpp:member:`m` samples.\n\n    **Members/Variables**\n\n    int **m**\n\n        Delay in samples\n\n    gsl_vector* **vectorin**\n\n        GSL vector with input vector\n\n    gsl_vector* **vectorout**\n\n        GSL with input vector (:cpp:member:`vectorin`) delayed :cpp:member:`m` samples\n\n    .. cpp:member:: int m\n\n        Delay in samples\n\n    .. cpp:member:: gsl_vector* vectorin\n\n        GSL vector with input vector\n\n    .. cpp:member:: gsl_vector* vectorout\n\n        GSL with input vector (:cpp:member:`vectorin`) delayed :cpp:member:`m` samples\n\n"
                                },
                                {
                                    "line": 6302,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int shift_m(gsl_vector *vectorin, gsl_vector *vectorout, int m)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function returns as :cpp:member:`vectorout` the :cpp:member:`vectorin` moved forward by :cpp:member:`m` samples.\n\n    **Members/Variables**\n\n    int **m**\n\n        Advance in samples\n\n    gsl_vector* **vectorin**\n\n        GSL vector with input vector\n\n    gsl_vector* **vectorout**\n\n        GSL with input vector (:cpp:member:`vectorin`) moved forward :cpp:member:`m` samples\n\n    .. cpp:member:: int m\n\n        Advance in samples\n\n    .. cpp:member:: gsl_vector* vectorin\n\n        GSL vector with input vector\n\n    .. cpp:member:: gsl_vector* vectorout\n\n        GSL with input vector (:cpp:member:`vectorin`) moved forward :cpp:member:`m` samples\n\n"
                                },
                                {
                                    "line": 6335,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: char* subString (const char* input, int offset, int len, char* dest)\n\n    Located in file: *initSIRENA.cpp*\n\n    This function extracts some elements from an array of characters.\n\n    **Members/Variables**\n\n    const char* **input**\n\n        Array of characters from which some elements are extracted\n\n    int **offset**\n\n        Offset\n\n    int **len**\n\n        Length (number of elements to extract)\n\n    char* **dest**\n\n        Array of characters into which the extracted characters are written\n\n    .. cpp:member:: const char* input\n\n        Array of characters from which some elements are extracted\n\n    .. cpp:member:: int offset\n\n        Offset\n\n    .. cpp:member:: int len\n\n        Length (number of elements to extract)\n\n    .. cpp:member:: char* dest\n\n        Array of characters into which the extracted characters are written\n\n"
                                },
                                {
                                    "line": 6378,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int teslib_main()\n\n    Located in file: *teslib.c*\n\n    This function is mainly a wrapper to pass a data file to the SIRENA tasks in order to build a library that will be used to reconstruct the energies.\n\n    Steps:\n\n    - Register HEATOOL\n    - Reading all programm parameters by using PIL\n    - Check preBuffer values if the library already exists\n    - Read XML info\n    - :cpp:func:`getSamplingrate_trigreclength` => Obtain the *trig_reclength* and the sampling rate\n    - Sixt standard keywords structure\n    - Open output FITS file\n    - Initialize data structures\n    - Read the grading data from the XML file and store it in *reconstruct_init_sirena->grading*\n    - Build up TesEventList\n    - Call SIRENA to build the library\n    - Save GTI extension to event file\n    - Free memory\n\n    The user must supply the following input parameters (*teslib.par* file).\n\n    Parameters:\n\n    char **RecordFile**\n\n        Record FITS file\n\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\n\n    char **TesEventFile**\n\n        Output event list file\n\n    char **LibraryFile**\n\n        File with calibration library\n\n    char **NoiseFile**\n\n        Noise FITS file with noise spectrum\n\n    char **XMLFile**\n\n        XML input FITS file with instrument definition\n\n    char **preBuffer**\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\n                                                                                        preBuffer=filtlen-post\n\n    int **EventListSize**\n\n        Default size of the event list per record\n\n    char **clobber**\n\n        Overwrite or not output files if exist (yes/no)\n\n    char **history**\n\n        Write program parameters into output file\n\n    double **scaleFactor**\n\n        Detection scale factor for initial filtering\n\n    int **samplesUp**\n\n        Number of consecutive samples up for threshold trespassing\n\n    double **nSgms**\n\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\n\n    double **LrsT**\n\n        Running sum length for the RS raw energy estimation (seconds)\n\n    double **LbT**\n\n        Baseline averaging length (seconds)\n\n    double **monoenergy**\n\n        Monochromatic energy of the pulses in the input FITS file in eV\n\n    char **addCOVAR**\n\n        Add or not pre-calculated values related to COVAR reconstruction method in the library file (yes/no)\n\n    char **addINTCOVAR**\n\n        Add or not pre-calculated values related to INTCOVAR reconstruction method in the library file (yes/no)\n\n    char **addOFWN**\n\n         Add or not or not pre-calculated values in the library file related to Optimal Filtering by using Weight Noise matrix in the library file(yes/no)\n\n    int **largeFilter**\n\n        Length of the longest fixed filter\n\n    char **EnergyMethod**\n\n        Energy calculation Method: **OPTFILT**, **I2R** or **I2RFITTED**\n\n    double **Ifit**\n\n        Constant to apply the I2RFITTED conversion\n\n    char **FilterMethod**\n\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\n\n    int **intermediate**\n\n        Write or not intermediate files (1/0)\n\n    char **detectFile**\n\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\n\n    char **tstartPulse1**\n\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\n\n    int **tstartPulse2**\n\n        Tstart (samples) of the second pulse\n\n    int **tstartPulse3**\n\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\n\n    .. cpp:member:: char RecordFile\n\n        Record FITS file\n\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\n\n    .. cpp:member:: char TesEventFile\n\n        Output event list file\n\n    .. cpp:member:: char LibraryFile\n\n        File with calibration library\n\n    .. cpp:member:: char NoiseFile\n\n        Noise FITS file with noise spectrum\n\n    .. cpp:member:: char XMLFile\n\n        XML input FITS file with instrument definition\n\n    .. cpp:member:: char preBuffer\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\n                                                                                        preBuffer=filtlen-post\n\n    .. cpp:member:: int EventListSize\n\n        Default size of the event list\n\n    .. cpp:member:: char clobber\n\n        Overwrite or not output files if exist (yes/no)\n\n    .. cpp:member:: char history\n\n        Write program parameters into output file\n\n    .. cpp:member:: double scaleFactor\n\n        Detection scale factor for initial filtering\n\n    .. cpp:member:: int samplesUp\n\n        Number of consecutive samples up for threshold trespassing\n\n    .. cpp:member:: double nSgms\n\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\n\n    .. cpp:member:: double LrsT\n\n        Running sum length for the RS raw energy estimation (seconds)\n\n    .. cpp:member:: double LbT\n\n        Baseline averaging length (seconds)\n\n    .. cpp:member:: double monoenergy\n\n        Monochromatic energy of the pulses in the input FITS file in eV\n\n    .. cpp:member:: char addCOVAR\n\n        Add or not pre-calculated values in the library file related to COVAR reconstruction method in the library file (yes/no)\n\n     .. cpp:member:: char addINTCOVAR\n\n        Add or not pre-calculated values in the library file related to INTCOVAR reconstruction method in the library file (yes/no)\n\n    .. cpp:member:: char addOFWN\n\n        Add or not pre-calculated values in the library file related to Optimal Filtering by using Weight Noise matrix  in the library file (yes/no)\n\n    .. cpp:member:: int largeFilter\n\n        Length of the longest fixed filter\n\n    .. cpp:member:: char EnergyMethod\n\n        Energy calculation Method: **OPTFILT**, **I2R** or **I2RFITTED**\n\n    .. cpp:member:: double Ifit\n\n        Constant to apply the I2RFITTED conversion\n\n    .. cpp:member:: char FilterMethod\n\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\n\n    .. cpp:member:: int intermediate\n\n        Write or not intermediate files (1/0)\n\n    .. cpp:member:: char detectFile\n\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\n\n    .. cpp:member:: char **tstartPulse1**\n\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\n\n    .. cpp:member:: int **tstartPulse2**\n\n        Tstart (samples) of the second pulse\n\n    .. cpp:member:: int **tstartPulse3**\n\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\n\n"
                                },
                                {
                                    "line": 6631,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int tesrecons_main()\n\n    Located in file: *tesrecons.c*\n\n    This function is mainly a wrapper to pass a data file to the SIRENA tasks in order to reconstruct the energies.\n\n    Steps:\n\n    - Register HEATOOL\n    - Reading all programm parameters by using PIL\n    - Read XML info\n    - :cpp:func:`getSamplingrate_trigreclength` => Obtain the *trig_reclength* and the sampling rate\n    - Sixt standard keywords structure\n    - Open output FITS file\n    - Initialize data structures for pulse filtering\n    - Read the grading data from the XML file and store it in *reconstruct_init_sirena->grading*\n    - Build up TesEventList\n    - Call SIRENA to build reconstruct the energies\n    - Save GTI extension to event file\n    - Free memory\n\n    The user must supply the following input parameters (*tesrecons.par* file).\n\n    Parameters:\n\n    char **RecordFile**\n\n        Record FITS file\n\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\n\n    char **TesEventFile**\n\n        Output event list file\n\n    char **LibraryFile**\n\n        File with calibration library\n\n    char **XMLFile**\n\n        XML input FITS file with instrument definition\n\n    char **preBuffer**\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\n                                                                                        preBuffer=filtlen-post\n\n    int **EventListSize**\n\n        Default size of the event list per record\n\n    char **clobber**\n\n        Overwrite or not output files if exist (yes/no)\n\n    char **history**\n\n        Write program parameters into output file\n\n    double **scaleFactor**\n\n        Detection scale factor for initial filtering\n\n    int **samplesUp**\n\n        Number of consecutive samples up for threshold trespassing\n\n    int **samplesDown**\n\n        Number of consecutive samples below the threshold to look for other pulse\n\n    double **nSgms**\n\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\n\n    char **detectionMode**\n\n        Adjusted Derivative (**AD**) or Single Threshold Crossing (**STC**)\n\n    int **detectSP**\n\n        Detect secondary pulses (1) or not (0)\n\n    double **LbT**\n\n        Baseline averaging length (seconds)\n\n    int **intermediate**\n\n        Write or not intermediate files (1/0)\n\n    char **detectFile**\n\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\n\n    char **FilterDomain**\n\n        Filtering Domain: Time (**T**) or Frequency (**F**)\n\n    char **FilterMethod**\n\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\n\n    char **EnergyMethod**\n\n        Energy calculation Method: **OPTFILT**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**\n\n    double **filtEeV**\n\n        Energy of the filters of the library to be used to calculate energy (only for **OPTFILT**, **I2R** and **I2RFITTED**)\n\n    double **Ifit**\n\n        Constant to apply the I2RFITTED conversion\n\n    char **OFNoise**\n\n        Noise to use with Optimal Filtering: **NSD** or **WEIGHTN**\n\n    int **LagsOrNot**\n\n        Lags or no lags (1/0)\n\n    int **nLags**\n\n        Number of lags (positive odd number)\n\n    int **Fitting35**\n\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\n\n    int **OFIter**\n\n        Iterate or not iterate (1/0)\n\n    int **OFLib**\n\n        Work or not with a library with optimal filters (yes/no)\n\n    char **OFStrategy**\n\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**\n\n    int **OFLength**\n\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**)\n\n    int **flength_0pad**\n\n        0-padding filter length\n\n    int **prebuff_0pad**\n\n        preBuffer when 0-padding\n\n    int **errorT**\n\n        Additional error (in samples) added to the detected time (Logically, it changes the reconstructed energies )\n\n    int **Sum0Filt**\n\n        0-padding: Subtract the sum of the filter (1) or not (0)\n\n    char **tstartPulse1**\n\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\n\n    int **tstartPulse2**\n\n        Tstart (samples) of the second pulse\n\n    int **tstartPulse3**\n\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\n\n    double **energyPCA1**\n\n        First energy (only for PCA)\n\n    double **energyPCA2**\n\n        Second energy (only for PCA)\n\n    .. cpp:member:: char RecordFile\n\n        Record FITS file\n\n        If :cpp:member:`RecordFile` starts with '@' it provides a file text containing several record input FITS files\n\n    .. cpp:member:: char TesEventFile\n\n        Output event list file\n\n    .. cpp:member:: char LibraryFile\n\n        File with calibration library\n\n    .. cpp:member:: char XMLFile\n\n        XML input FITS file with instrument definition\n\n    .. cpp:member:: char preBuffer\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file)\n        SIRENA's format XML file (grading=>pre,post and pB) or new format XML file (grading=>pre,post and filtlen)\n                                pre=494, post=8192, pB=1000                       pre=494, post=7192, filtlen=8192\n                                                                                        preBuffer=filtlen-post\n\n    .. cpp:member:: int EventListSize\n\n        Default size of the event list\n\n    .. cpp:member:: char clobber\n\n        Overwrite or not output files if exist (yes/no)\n\n    .. cpp:member:: char history\n\n        Write program parameters into output file\n\n    .. cpp:member:: double scaleFactor\n\n        Detection scale factor for initial filtering\n\n    .. cpp:member:: int samplesUp\n\n        Number of consecutive samples up for threshold trespassing\n\n    .. cpp:member:: int samplesDown\n\n        Number of consecutive samples below the threshold to look for other pulse\n\n    .. cpp:member:: double nSgms\n\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm\n\n    .. cpp:member:: char detectionMode\n\n        Adjusted Derivative (**AD**) or Single Threshold Crossing (**STC**)\n\n    .. cpp:member:: int detectSP\n\n        Detect secondary pulses (1) or not (0)\n\n    .. cpp:member:: double LbT\n\n        Baseline averaging length (seconds)\n\n     .. cpp:member:: int intermediate\n\n        Write or not intermediate files (1/0)\n\n    .. cpp:member:: char detectFile\n\n        Intermediate detections file (if :cpp:member:`intermediate` = 1)\n\n    .. cpp:member:: char FilterDomain\n\n        Filtering Domain: Time (**T**) or Frequency (**F**)\n\n    .. cpp:member:: char FilterMethod\n\n        Filtering Method: **F0** (deleting the zero frequency bin) or **B0** (deleting the baseline)\n\n    .. cpp:member:: char EnergyMethod\n\n        Energy calculation Method: **OPTFILT**, **INTCOVAR**, **COVAR**, **I2R** or **I2RFITTED**\n\n    .. cpp:member:: double filtEeV\n\n        Energy of the filters of the library to be used to calculate energy (only for **OPTFILT**, **I2R** and **I2RFITTED**)\n\n    .. cpp:member:: double Ifit\n\n        Constant to apply the I2RFITTED conversion\n\n    .. cpp:member:: char OFNoise\n\n        Noise to use with Optimal Filtering: **NSD** or **WEIGHTN**\n\n    .. cpp:member:: int LagsOrNot\n\n        Lags or no lags (1/0)\n\n    .. cpp:member:: int nLags\n\n        Number of lags (positive odd number)\n\n    .. cpp:member:: int Fitting35\n\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5)\n\n    .. cpp:member:: int OFIter\n\n        Iterate or not iterate (1/0)\n\n    .. cpp:member:: int OFLib\n\n        Work or not with a library with optimal filters (yes/no)\n\n    .. cpp:member:: char OFStrategy\n\n        Optimal Filter length Strategy: **FREE**, **BYGRADE** or **FIXED**\n\n    .. cpp:member:: int OFLength\n\n        Optimal Filter length (taken into account if :option:`OFStrategy` = **FIXED**)\n\n    .. cpp:member:: int flength_0pad\n\n        0-padding filter length\n\n    .. cpp:member:: int prebuff_0pad\n\n        preBuffer when 0-padding\n\n    .. cpp:member:: int errorT\n\n        Additional error (in samples) added to the detected time (Logically, it changes the reconstructed energies )\n\n    .. cpp:member:: int Sum0Filt\n\n        0-padding: Subtract the sum of the filter (1) or not (0)\n\n    .. cpp:member:: char tstartPulse1\n\n        Integer number: Sample where the first pulse starts or nameFile: File where the tstart (seconds) of every pulse is\n\n    .. cpp:member:: int tstartPulse2\n\n        Tstart (samples) of the second pulse\n\n    .. cpp:member:: int tstartPulse3\n\n        Tstart (samples) of the third pulse (if 0 => PAIRS, if not 0 => TRIOS)\n\n    .. cpp:member:: double energyPCA1\n\n        First energy (only for PCA)\n\n    .. cpp:member:: double energyPCA2\n\n        Second energy (only for PCA)\n\n"
                                },
                                {
                                    "line": 6979,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int th_runDetect (TesRecord* record, int trig_reclength, int lastRecord, int nrecord, PulsesCollection *pulsesAll, ReconstructInitSIRENA** reconstruct_init, PulsesCollection** pulsesInRecord)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function is responsible for the **detection** in SIRENA (instead of :cpp:func:`runDetect`) when the **THREADING** running option has been chosen (hardcoded at this moment). It is used both for library creation and energy reconstruction runnings.\n"
                                },
                                {
                                    "line": 6985,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int toGslMatrix(void **buffer, gsl_matrix **matrix, long numCol, int numRow, int type, int eventini)\n\n    Located in file: *inoututils.cpp*\n\n    The function puts the values of the input buffer into an output GSL matrix. Columns and rows are input parameters.\n\n    **Members/Variables**\n\n    void** **buffer**\n\n        Input buffer with data\n\n    gsl_matrix** **matrix**\n\n        Output GSL matrix\n\n    long **numCol**\n\n        Number of columns\n\n    int **numRow**\n\n        Number of rows\n\n    int **type**\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n    int **eventini**\n\n        Initial event to start writing\n\n    .. cpp:member:: void** buffer\n\n        Input buffer with data\n\n    .. cpp:member:: gsl_matrix** matrix\n\n        Output GSL matrix\n\n    .. cpp:member:: long numCol\n\n        Number of columns\n\n    .. cpp:member:: int numRow\n\n        Number of rows\n\n    .. cpp:member:: int type\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n    .. cpp:member:: int eventini\n\n        Initial event to start writing\n\n"
                                },
                                {
                                    "line": 7042,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int toGslVector(void **buffer, gsl_vector **array, long nevent, int eventini, int type)\n\n    Located in file: *inoututils.cpp*\n\n    The function puts the values of the input buffer into an output GSL vector.\n\n    **Members/Variables**\n\n    void** **buffer**\n\n        Input buffer with data\n\n    gsl_vector** **array**\n\n        Output GSL vector\n\n    long **nevent**\n\n        Number of elements to store\n\n    int **eventini**\n\n        Initial element number\n\n    int **type**\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n    .. cpp:member:: void** buffer\n\n        Input buffer with data\n\n    .. cpp:member:: gsl_vector** array\n\n        Output GSL vector\n\n    .. cpp:member:: long nevent\n\n        Number of elements to store\n\n    .. cpp:member:: int eventini\n\n        Initial element number\n\n    .. cpp:member:: int type\n\n        FITS type (TINT, TSHORT, TDOUBLE, etc.)\n\n"
                                },
                                {
                                    "line": 7095,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int vector2matrix(gsl_vector *vectorin, gsl_matrix **matrixout)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function converts an input :math:`n^2` vector into an output square matrix :math:`[n \\times n]`. It puts the first :math:`n` elements of the vector in the first row of the matrix, the second group of :math:`n` elements (from :math:`n` to :math:`2n-1`) of the vector in the second row and so on.\n\n    **Members/Variables**\n\n    gsl_vector** **vectorin**\n\n        GSL input vector whose length is :math:`n^2`\n\n    gsl_matrix* **matrixout**\n\n        GSL output square matrix :math:`[n \\times n]`\n\n    .. cpp:member:: gsl_vector** vectorin\n\n        GSL input vector whose length is :math:`n^2`\n\n    .. cpp:member:: gsl_matrix* matrixout\n\n        GSL output square matrix :math:`[n \\times n]`\n\n"
                                },
                                {
                                    "line": 7122,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int weightMatrix(ReconstructInitSIRENA *reconstruct_init, bool saturatedPulses, PulsesCollection *pulsesAll, PulsesCollection *pulsesInRecord, long nonpileupPulses, gsl_vector *nonpileup, gsl_vector *pulseaverage, gsl_matrix **covariance, gsl_matrix **weight)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    :cite:`Fixsen2004`\n\n    This function calculates the weight matrix by using the non piled-up pulses found in all the records, stored in *pulsesAll* (previous records) and *pulsesInRecord* (current record). The weight matrix of each energy (and other intermediate values) will be stored in the library by the function :cpp:func:`fillInLibraryData`.\n\n    Definitions:\n\n        :math:`S_i^p`: Value of the ith-sample of the pulse number *p*\n\n        :math:`M_i^p`: Value of the ith-sample of the model number *p* (model= *pulseaverage*):\n\n        .. math::\n\n            M_i = <S_i> = (1/N)\\sum_{p=1}^{N}S_i^p\n\n        N: number of non piled-up pulses\n\n        .. math::\n\n            & D_i = S_i - M_i \\\\\n            & V_{ij} = <D_iD_j> = E[(S_i-M_i)(S_j-M_j)] = (1/N)\\sum_{p=1}^{N}(S_i^p-M_i^p)(S_j^p-M_j^p) \\\\\n            & V = \\left[\\begin{matrix} <D_1D_1> & <D_1D_2> & ... & <D_1D_n> \\\\\n            <D_2D_1> & <D_2D_2> & ... & <D_2D_n> \\\\\n            ....  &  ....  & ... &  ....  \\\\\n            <D_nD_1> & <D_nD_2> & ... & <D_nD_n>\\end{matrix}\\right]\n\n        where *n* is the :option:`OFLength` and thus :math:`V = [n \\times n]`.\n\n        The weight matrix :math:`W = [V]^{-1}`.\n\n    Steps:\n\n        - Calculate the elements of the diagonal of the covariance matrix\n        - Calculate the elements out of the diagonal of the covariance matrix\n        - If saturated pulses => Covariance matrix is a singular matrix => Non invertible\n\n          In order to allow the covariance matrix to be inverted => Replacing 0's (0's are due to the saturated values, equal in the pulse and in the model)\n\n          - Elements of the diagonal: Generating a random double :math:`f_1` between a range *(fMin,fMax)* (-NoiseStd,NoiseStd) to replace 0's with :math:`f_1^2`\n          - Elements out of the diagonal: Generating two random doubles :math:`f_1` and :math:`f_2` between a range *(fMin,fMax)* (-NoiseStd,NoiseStd) to replace 0's with :math:`f_1 \\cdot f_2`\n\n        - Calculate the weight matrix\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    bool **saturatedPulses**\n\n        If *true*, all the pulses (calibration mode => all the pulses have the same energy) are saturated\n\n    PulsesCollection* **pulsesAll**\n\n        Collection of pulses found in the previous records\n\n    PulsesCollection* **pulsesInRecord**\n\n        Collection of pulses found in the current record\n\n    long **nonpileupPulses**\n\n        Number of non piled-up pulses\n\n    gsl_vector* **nonpileup**\n\n        GSL vector containing info about all the pulses informing if they are piled-up or not\n\n    gsl_vector** **pulseaverage**\n\n        GSL vector with the pulseaverage (= template = model) of the non piled-up pulses\n\n    gsl_matrix** **covariance**\n\n        GSL matrix with covariance matrix\n\n    gsl_matrix** **weight**\n\n        GSL matrix with weight matrix\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: bool saturatedPulses\n\n        If *true*, all the pulses ( :option:`opmode` = 0 => all the pulses have the same energy) are saturated\n\n    .. cpp:member:: PulsesCollection* pulsesAll\n\n        Collection of pulses found in the previous records\n\n    .. cpp:member:: PulsesCollection* pulsesInRecord\n\n        Collection of pulses found in the current record\n\n    .. cpp:member:: long nonpileupPulses\n\n        Number of non piled-up pulses\n\n    .. cpp:member:: gsl_vector* nonpileup\n\n        GSL vector containing info about all the pulses informing if they are piled-up or not\n\n    .. cpp:member:: gsl_vector** pulseaverage\n\n        GSL vector with the pulseaverage (= template = model) of the non piled-up pulses\n\n    .. cpp:member:: gsl_matrix** covariance\n\n        GSL matrix with covariance matrix\n\n    .. cpp:member:: gsl_matrix** weight\n\n        GSL matrix with weight matrix\n\n"
                                },
                                {
                                    "line": 7243,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int weightMatrixNoise (gsl_matrix *intervalMatrix, gsl_matrix **weight)\n\n    Located in file: *gennoisespec.cpp*\n\n    This function calculates the weight matrix of the noise\n\n        :math:`D_i`: Pulse free interval\n        :math:`V`: Covariance matrix\n\n            :math:`V_{ij} = E[DiDj]-E[Di]E[Dj]`\n\n        :math:`Di^p`: Value of the pth-sample of the pulse-free interval i\n        :math:`N`: Number of samples\n\n        .. math::\n\n            & V_{ij} =  <D_iD_j> = E[D_iD_j] = (1/N)sum_{p=1}^{N}(Di^p)(Dj^p) \\\\\n            & V = \\left[\\begin{matrix} <D_1D_1> & <D_1D_2> & ... & <D_1D_n> \\\\\n            <D_2D_1> & <D_2D_2> & ... & <D_2D_n> \\\\\n            ....  &  ....  & ... &  ....  \\\\\n            <D_nD_1> & <D_nD_2> & ... & <D_nD_n>\\end{matrix}\\right]\n\n        where *n* is the :option:`OFLength` and thus :math:`V = [n \\times n]`.\n\n        The weight matrix :math:`W = 1/V`.\n\n    Steps:\n\n    - Calculate the elements of the diagonal of the covariance matrix\n    - Calculate the elements out of the diagonal of the covariance matrix\n    - Calculate the weight matrix\n\n    **Members/Variables**\n\n    gsl_matrix* **intervalMatrix**\n\n        GSL matrix containing pulse-free intervals whose baseline is 0 (baseline previously subtracted) [nintervals x intervalMinSamples]\n\n    gsl_matrix** **weight**\n\n        GSL matrix with weight matrix\n\n    .. cpp:member:: gsl_matrix* intervalMatrix\n\n        GSL matrix containing pulse-free intervals whose baseline is 0 (baseline previously subtracted) [nintervals x intervalMinSamples]\n\n    .. cpp:member:: gsl_matrix** weight\n\n        GSL matrix with weight matrix\n\n"
                                },
                                {
                                    "line": 7294,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writeFilterHDU(ReconstructInitSIRENA **reconstruct_init, int pulse_index, double energy, gsl_vector *optimalfilter, fitsfile **dtcObject)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function runs in RECONSTRUCTION mode and writes the optimal filter info (in the *FILTER* HDU) for each pulse\n    if :option:`intermediate` = 1 and either *reconstruct_init->OFLib* = 0 or *reconstruct_init->OFLib* = 1, :option:`filtEeV` = 0 and the the number of energies in the library FITS file is greater than 1.\n\n    - Declare variables\n    - Open intermediate FITS file\n    - If (*reconstruct_init->OFLib* = 0) or (*reconstruct_init->OFLib* = 1, :option:`filtEeV` = 0 and the the number of energies in the library FITS file is greater than 1):\n        - Create the *FILTER* HDU if it is the first pulse\n        - Write data:\n            - **OPTIMALF** or **OPTIMALFF** column (in time or frequency domain)\n            - **OFLENGTH** column\n    - Write **ENERGY** column in *PULSES* HDU\n    - Close intermediate output FITS file if it is necessary\n    - Free memory\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    int **pulse_index**\n\n        Index of the pulse whose info is going to be written (to know if it is the first pulse)\n\n    double **energy**\n\n        Estimated energy (eV)\n\n    gsl_vector* **optimalfilter**\n\n        Optimal filter (in time or frequency domain)\n\n    fitsfile** **dtcObject**\n\n        Fitsfile object for intermeadiate file name\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: int pulse_index\n\n        Index of the pulse whose info is going to be written (to know if it is the first pulse)\n\n    .. cpp:member:: double energy\n\n        Estimated energy (eV)\n\n    .. cpp:member:: gsl_vector* optimalfilter\n\n        Optimal filter (in time or frequency domain)\n\n    .. cpp:member:: fitsfile** dtcObject\n\n        Fitsfile object for intermeadiate file name\n\n"
                                },
                                {
                                    "line": 7355,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writeFitsComplex(IOData obj, gsl_matrix *matrix)\n\n    Located in file: *inoututils.cpp*\n\n    This function reads values of a GSL matrix. After that, the function puts them into a complex column of the output FITS file.\n\n    **Members/Variables**\n\n    IOData **obj**\n\n        Object for FITS column to be written\n\n    gsl_matrix* **matrix**\n\n        Input GSL matrix with data\n\n    .. cpp:member:: IOData obj\n\n        Object for FITS column to be written\n\n    .. cpp:member:: gsl_matrix* matrix\n\n        Input GSL matrix with data\n\n"
                                },
                                {
                                    "line": 7380,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writeFitsSimple(IOData obj, gsl_vector *vector)\n\n    Located  in file: *inoututils.cpp*\n\n    This function reads values of a GSL vector. After that, the function puts them into a column of the output FITS file.\n\n    **Members/Variables**\n\n    IOData **obj**\n\n        Object for FITS column to be written\n\n    gsl_vector* **vector**\n\n        Input GSL vector with data\n\n    .. cpp:member:: IOData obj\n\n        Object for FITS column to be written\n\n    .. cpp:member:: gsl_vector* vector\n\n        Input GSL vector with data\n\n"
                                },
                                {
                                    "line": 7405,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writeLibrary(ReconstructInitSIRENA *reconstruct_init, double samprate, double estenergy, gsl_vector *pulsetemplate, gsl_vector *pulsetemplate_B0, gsl_matrix *covariance, gsl_matrix *weight, bool appendToLibrary, fitsfile **inLibObject, gsl_vector *pulsetemplateMaxLengthFixedFilter, gsl_vector *pulsetemplateMaxLengthFixedFilter_B0)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function writes the library (reordering if it is necesary and calculating some intermediate parameters)\n\n        - Adding a new row to the library if *appendToLibrary = true* (:cpp:func:`readAddSortParams`)\n        - Write the first row of the library if *appendToLibrary = false* (:cpp:func:`addFirstRow`)\n\n        - In both cases, the keywords ``CREADATE`` and ``SIRENAV`` with the date and SIRENA version are written\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    double **samprate**\n\n        Sampling rate\n\n    double **estenergy**\n\n        Pulse height of the template whose energy is going to be added to the library\n\n    gsl_vector* **pulsetemplate**\n\n        GSL vector with the pulse template whose energy is going to be added to the library\n\n    gsl_vector* **pulsetemplate_B0**\n\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\n\n    gsl_matrix** **covariance**\n\n        GSL matrix with covariance matrix\n\n    gsl_matrix** **weight**\n\n        GSL matrix with weight matrix\n\n    bool **appendToLibrary**\n\n        *true* if adding a new row to the library and *false* if it is the first row to be added\n\n    fitsfile** **inLibObject**\n\n        FITS object containing information of the library FITS file\n\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter**\n\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library\n\n    gsl_vector* **pulsetemplateMaxLengthFixedFilter_B0**\n\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library (without baseline)\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: double samprate\n\n        Sampling rate\n\n    .. cpp:member:: double estenergy\n\n        Pulse height of the template whose energy is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplate\n\n        GSL vector with the pulse template whose energy is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplate_B0\n\n        GSL vector with the pulse template whose energy is going to be added to the library (without baseline)\n\n    .. cpp:member:: gsl_matrix** covariance\n\n        GSL matrix with covariance matrix\n\n    .. cpp:member:: gsl_matrix** weight\n\n        GSL matrix with weight matrix\n\n    .. cpp:member:: bool appendToLibrary\n\n        *true* if adding a new row to the library and *false* if it is the first row to be added\n\n    .. cpp:member:: fitsfile** inLibObject\n\n        FITS object containing information of the library FITS file\n\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter\n\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library\n\n    .. cpp:member:: gsl_vector* pulsetemplateMaxLengthFixedFilter_B0\n\n        GSL vector with the :option:`largeFilter`-length pulse template whose energy is going to be added to the library (without baseline)\n\n"
                                },
                                {
                                    "line": 7507,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: void writeLog(FILE *fileRef, string type, int verbosity, string message)\n\n    Located  in file: *inoututils.cpp*\n\n    This function includes the processing of the each level of message in the log file and the output screen:\n\n      - Verbosity = 0 => The log file and the output screen include Errors\n      - Verbosity = 1 => The log file and the output screen include Errors and Warnings\n      - Verbosity = 2 => The log file and the output screen include Errors, Warnings and Alerts\n      - Verbosity = 3 => The log file and the output screen include Errors, Warnings, Alerts and Log messages\n\n    **Members/Variables**\n\n    FILE* **fileRef**\n\n        File reference to log file\n\n    string **type**\n\n        String to indicate error type \"Error\", \"Warning\", \"Alert\",\"Log\" or \"OK\"\n\n     int **verbosity**\n\n        Integer value for verbosity\n\n     string **message**\n\n        String message to print\n\n    .. cpp:member:: FILE* fileRef\n\n        File reference to log file\n\n    .. cpp:member:: string type\n\n        String to indicate error type \"Error\", \"Warning\", \"Alert\",\"Log\" or \"OK\"\n\n    .. cpp:member::  int verbosity\n\n        Integer value for verbosity\n\n    .. cpp:member::  string message\n\n        String message to print\n\n"
                                },
                                {
                                    "line": 7553,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writePulses(ReconstructInitSIRENA** reconstruct_init, double samprate, double initialtime, gsl_vector *invectorNOTFIL, int numPulsesRecord, gsl_vector *tstart, gsl_vector *tend, gsl_vector *quality, gsl_vector *taurise, gsl_vector *taufall, fitsfile *dtcObject)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function writes the data of the pulses found in the record in the intermediate FITS file (in the *PULSES* HDU). The pulses info given is: **TSTART**, **I0** (the pulse itself), **TEND**, **TAURISE**, **TAUFALL** and **QUALITY**.\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    double **samprate**\n\n        Sampling rate (to convert samples to seconds)\n\n    double **initialtime**\n\n        Starting time of the record (in order to calculate absolute times)\n\n    gsl_vector* **invectorNOTFIL**\n\n        GSL vector with the original record (neither low-pass filtered nor differentiated)\n\n    int **numPulsesRecord**\n\n        Number of pulses found in the record\n\n    gsl_vector* **tstart**\n\n        GSL vector with the start times of the found pulses\n\n    gsl_vector* **tend**\n\n        GSL vector with the end times of the found pulses\n\n    gsl_vector* **quality**\n\n        GSL vector with the quality of the found pulses\n\n        0 => Standard (good) pulses\n\n        1 => Truncated pulses at the beginning\n\n        2 => Truncated pulses at the end\n\n        10 => Saturated pulses\n\n        11 => Truncated and saturated pulses\n\n    gsl_vector* **taurise**\n\n        GSL vector with the rise time constants of the found pulses (to be done)\n\n    gsl_vector* **taufall**\n\n        GSL vector with the fall time constants of the found pulses (to be done)\n\n    fitsfile* **dtcObject**\n\n        Object which contains information of the intermediate FITS file\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values).\n\n    .. cpp:member:: double samprate\n\n        Sampling rate (to convert samples to seconds)\n\n    .. cpp:member:: double initialtime\n\n        Starting time of the record (in order to calculate absolute times)\n\n    .. cpp:member:: gsl_vector* invectorNOTFIL\n\n        GSL vector with the original record (neither low-pass filtered nor differentiated)\n\n    .. cpp:member:: int numPulsesRecord\n\n        Number of pulses found in the record\n\n    .. cpp:member:: gsl_vector* tstart\n\n        GSL vector with the start times of the found pulses\n\n    .. cpp:member:: gsl_vector* tend\n\n        GSL vector with the end times of the found pulses\n\n    .. cpp:member:: gsl_vector* quality\n\n        GSL vector with the quality of the found pulses\n\n        0 => Standard (good) pulses\n\n        1 => Truncated pulses at the beginning\n\n        2 => Truncated pulses at the end\n\n        10 => Saturated pulses\n\n        11 => Truncated and saturated pulses\n\n    .. cpp:member:: gsl_vector* taurise\n\n        GSL vector with the rise time constants of the found pulses (to be done)\n\n    .. cpp:member:: gsl_vector* taufall\n\n        GSL vector with the fall time constants of the found pulses (to be done)\n\n    .. cpp:member:: fitsfile* dtcObject\n\n        Object which contains information of the intermediate FITS file\n\n"
                                },
                                {
                                    "line": 7670,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writeTestInfo(ReconstructInitSIRENA* reconstruct_init, gsl_vector *recordDERIVATIVE, double threshold, fitsfile *dtcObject)\n\n    Located in file: *tasksSIRENA.cpp*\n\n    This function writes the *TESTINFO* HDU in the intermediate FITS file. The written columns are **FILDER** (low-pass filtered and differentiated record) and **THRESHOLD**.\n\n    **Members/Variables**\n\n    ReconstructInitSIRENA** **reconstruct_init**\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    gsl_vector* **recordDERIVATIVE**\n\n        GSL vector with input record (low-pass filtered and) differentiated\n\n    double **threshold**\n\n        Threshold value used to find pulses\n\n    fitsfile **dtcObject**\n\n        Object which contains information of the intermediate FITS file\n\n    .. cpp:member:: ReconstructInitSIRENA** reconstruct_init\n\n        Member of *ReconstructInitSIRENA* structure to initialize the reconstruction parameters (pointer and values)\n\n    .. cpp:member:: gsl_vector* recordDERIVATIVE\n\n        GSL vector with input record (low-pass filtered and) differentiated\n\n    .. cpp:member:: double threshold\n\n        Threshold value used to find pulses\n\n    .. cpp:member:: fitsfile dtcObject\n\n        Object which contains information of the intermediate FITS file\n\n"
                                },
                                {
                                    "line": 7711,
                                    "source": "./doc/SIRENAfunctions.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"cpp:function\".",
                                    "full_message": "Unknown directive type \"cpp:function\".\n\n.. cpp:function:: int writeTPSreprExten ()\n\n    Located in file: *gennoisespec.cpp*\n\n    This function writes the noisespec output FITS file.\n\n    Steps:\n\n    - Allocate GSL vectors\n    - Write the data in the output FITS file (print only half of FFT to prevent aliasing)\n    - *NOISE* HDU only contains positive frequencies (=> Multiply by 2 the amplitude)\n    - *NOISEALL* HDU contains negative and positive frequencies => It is the HDU read to build the optimal filters\n    - *WEIGHTMS* HDU\n\n"
                                },
                                {
                                    "line": 22,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 29,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: inFile=<str>\n\n        Name of the input FITS file (stream splitted into records).\n\n        Default: *a.fits*\n"
                                },
                                {
                                    "line": 35,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: outFile=<str>\n\n        Name of the output FITS file.\n\n        Default: *a_noisespec.fits*\n"
                                },
                                {
                                    "line": 41,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: intervalMinSamples=<int>\n\n        Minimum length of a pulse-free interval to use (in samples).\n\n        Default: 8192\n"
                                },
                                {
                                    "line": 47,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: nplPF=<real>\n\n        Number of pulse lengths after the end of the pulse to start the pulse-free interval searching (only relevant if pulse detection in the stream has to be performed).\n\n        Default: 0\n"
                                },
                                {
                                    "line": 53,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: nintervals=<int>\n\n        Number of pulse-free intervals to use for the noise average.\n\n        Default: 1000\n"
                                },
                                {
                                    "line": 61,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: scaleFactor=<real>\n\n        Scale factor to apply to make possible a variable cut-off frequency of the low-pass filter. In fact, the cut-off frequency of the filter is :math:`1/(\\pi \\cdot sF)` and therefore, the box-car length is :math:`\\pi \\cdot sF \\cdot samprate` (see :ref:`Low-Pass filtering <lpf>`).\n\n        If the :option:`scaleFactor` makes the box-car length :math:`\\leq 1` is equivalent to not filter (cut-off frequency of the low-pass filter is too high). If the :option:`scaleFactor` is too large, the low-pass filter band is too narrow, and not only noise is rejected during the filtering, but also the signal.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 71,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: samplesUp=<int>\n\n        Consecutive samples that the signal must cross over the threshold to trigger a pulse detection (only relevant if pulse detection in the stream has to be performed).\n\n        Default: 3\n"
                                },
                                {
                                    "line": 79,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: nSgms=<real>\n\n        Number of quiescent-signal standard deviations to establish the threshold through the *kappa-clipping* algorithm (only relevant if pulse detection in the stream has to be performed).\n\n        Default: 3.5\n"
                                },
                                {
                                    "line": 85,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: pulse_length=<int>\n\n        Pulse length in samples (to establish which part of the record is rejected due to a found pulse).\n\n        Default: 8192\n"
                                },
                                {
                                    "line": 91,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: weightMS=<yes|no>\n\n        Calculate and write the weight matrices if *yes*.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 99,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: EnergyMethod=<OPTFILT|I2R|I2RFITTED>\n\n        Transform to resistance space (I2R or I2RFITTED) or not (OPTFILT).\n\n        Default: *OPTFILT*\n"
                                },
                                {
                                    "line": 105,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: Ifit=<adu>\n\n        Constant to apply the I2RFITTED conversion.\n\n        Default: 7000.0\n"
                                },
                                {
                                    "line": 113,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: clobber=<yes|no>\n\n        Overwrite output files if they exist.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 119,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: matrixSize=<int>\n\n        Size of noise matrix if only one to be calculated, in samples.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 125,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: rmNoiseInterval=<yes|no>\n\n        Remove some noise intervals before calculating the noise spectrum if *yes*.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 159,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 159,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 159,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 159,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 169,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 169,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 176,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: RecordFile=<str>\n\n        Input record FITS file.\n\n        Default: *record.fits*\n"
                                },
                                {
                                    "line": 182,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: TesEventFile=<str>\n\n        Output event list FITS file.\n\n        Default: *event.fits*\n"
                                },
                                {
                                    "line": 188,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  LibraryFile=<str>\n\n        FITS file with calibration library.\n\n        Default: *library.fits*\n"
                                },
                                {
                                    "line": 194,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  NoiseFile=<str>\n\n        Noise FITS file with noise spectrum.\n\n        Default: *noise.fits*\n"
                                },
                                {
                                    "line": 200,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  XMLFile=<str>\n\n        XML input file with instrument definition.\n\n        Default: *xifu_pipeline.xml*\n"
                                },
                                {
                                    "line": 206,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  preBuffer=<yes|no>\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file).\n\n        Default: no\n"
                                },
                                {
                                    "line": 212,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  EventListSize=<str>\n\n        Default size of the event list per record.\n\n        Default: 1000\n"
                                },
                                {
                                    "line": 218,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  clobber=<yes|no>\n\n        Overwrite or not output files if they exist.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 224,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  history=<yes|no>\n\n        Write or not program parameters into output FITS file.\n\n        Default: *yes*\n"
                                },
                                {
                                    "line": 232,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  scaleFactor=<real>\n\n        Scale factor to apply to make possible a variable cut-off frequency of the low-pass filter. In fact, the cut-off frequency of the filter is :math:`1/(\\pi \\cdot sF)` and therefore, the box-car length is :math:`\\pi \\cdot sF \\cdot samprate` (see :ref:`Low-Pass filtering <lpf>`).\n\n        If the :option:`scaleFactor` makes the box-car length :math:`\\leq 1` is equivalent to not filter (cut-off frequency of the low-pass filter is too high). If the :option:`scaleFactor` is too large, the low-pass filter band is too narrow, and not only noise is rejected during the filtering, but also the signal.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 242,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  samplesUp=<int>\n\n        Number of consecutive samples up for threshold trespassing.\n\n        Default: 3\n"
                                },
                                {
                                    "line": 250,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  nSgms=<real>\n\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm.\n\n        Default: 3.5\n"
                                },
                                {
                                    "line": 256,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  LrsT=<secs>\n\n        Running sum (RS) length for the RS raw energy estimation, in seconds.\n\n        Default: 30E-6\n"
                                },
                                {
                                    "line": 262,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  LbT=<secs>\n\n        Baseline averaging length, in seconds.\n\n        Default: 6.4E-3\n"
                                },
                                {
                                    "line": 268,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  monoenergy=<eV>\n\n        Monochromatic energy of the pulses in the input FITS file in eV.\n\n        Default: 6000.0\n"
                                },
                                {
                                    "line": 274,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  addCOVAR=<yes|no>\n\n        Add or not pre-calculated values  in the library file related to COVAR reconstruction method.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 280,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  addINTCOVAR=<yes|no>\n\n        Add or not pre-calculated values  in the library file related to INTCOVAR reconstruction method.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 286,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  addOFWN=<yes|no>\n\n        Add or not pre-calculated values  in the library file related to Optimal Filtering by using Weight Noise matrix.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 292,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  largeFilter=<int>\n\n        Length (in samples) of the longest fixed filter.\n\n        Default: 8192\n"
                                },
                                {
                                    "line": 300,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  EnergyMethod=<OPTFILT | I2R | IRFITTED>\n\n        :ref:`reconMethods` Energy calculation Method: OPTFILT (Optimal filtering), I2R and I2RFITTED (Linear Transformations).\n\n        Default: *OPTFILT*\n"
                                },
                                {
                                    "line": 308,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  Ifit=<adu>\n\n        Constant to apply the I2RFITTED conversion.\n\n        Default: 0.0\n\n        Used if :option:`EnergyMethod` = I2RFITTED.\n"
                                },
                                {
                                    "line": 316,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  FilterMethod=<F0 | B0>\n\n        Filtering Method: *F0* (deleting the zero frequency bin) or *B0* (deleting the baseline).\n\n        Default: *F0*\n"
                                },
                                {
                                    "line": 322,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  intermediate=<0|1>\n\n        Write intermediate files: yes(1), no(0)?\n\n        Default: 0\n"
                                },
                                {
                                    "line": 328,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  detectFile=<str>\n\n        Intermediate detections FITS file (if :option:`intermediate` = 1).\n\n        Default: *detections.fits*\n"
                                },
                                {
                                    "line": 334,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  tstartPulse1=<str>\n\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse. For development purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 340,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  tstartPulse2=<int>\n\n        Start time (in samples) of the second pulse in the record (0 if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 346,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  tstartPulse3=<int>\n\n        Start time (in samples) of the third pulse in the record (0  if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\n\n        Default: 0\n\n"
                                },
                                {
                                    "line": 355,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 368,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 368,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 370,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 375,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  RecordFile=<str>\n\n        Input record FITS file.\n\n        Default: *record.fits*\n"
                                },
                                {
                                    "line": 381,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  TesEventFile=<str>\n\n        Output event list FITS file.\n\n        Default: *event.fits*\n"
                                },
                                {
                                    "line": 387,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  LibraryFile=<str>\n\n        FITS file with calibration library.\n\n        Default: *library.fits*\n"
                                },
                                {
                                    "line": 393,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  XMLFile=<str>\n\n        XML input FITS file with instrument definition.\n\n        Default: *xifu_pipeline.xml*\n"
                                },
                                {
                                    "line": 399,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  preBuffer=<yes|no>\n\n        Some samples added or not before the starting time of a pulse (number of added samples read from the XML file).\n\n        Default: no\n"
                                },
                                {
                                    "line": 405,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  EventListSize=<str>\n\n        Default size of the event list per record.\n\n        Default: 1000\n"
                                },
                                {
                                    "line": 411,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  clobber=<yes|no>\n\n        Overwrite output files if they exist.\n\n        Default: *no*\n"
                                },
                                {
                                    "line": 417,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  history=<yes|no>\n\n        Write program parameters into output FITS file.\n\n        Default: *yes*\n"
                                },
                                {
                                    "line": 425,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  scaleFactor=<real>\n\n        Scale factor to apply to make possible a variable cut-off frequency of the low-pass filter. In fact, the cut-off frequency of the filter is :math:`1/(\\pi \\cdot sF)` and therefore, the box-car length is :math:`\\pi \\cdot sF \\cdot samprate` (see :ref:`Low-Pass filtering <lpf>`).\n\n        If the :option:`scaleFactor` makes the box-car length :math:`\\leq 1` is equivalent to not filter (cut-off frequency of the low-pass filter is too high). If the :option:`scaleFactor` is too large, the low-pass filter band is too narrow, and not only noise is rejected during the filtering, but also the signal.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 435,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  samplesUp=<int>\n\n        Number of consecutive samples up for threshold trespassing.\n\n        Default: 3\n"
                                },
                                {
                                    "line": 443,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  samplesDown=<int>\n\n        Number of consecutive samples below the threshold to look for other pulse (only used if :option:`detectionMode` = STC).\n\n        Default: 4\n"
                                },
                                {
                                    "line": 451,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  nSgms=<real>\n\n        Number of quiescent-signal standard deviations to establish the threshold through the kappa-clipping algorithm.\n\n        Default: 3.5\n"
                                },
                                {
                                    "line": 457,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: detectionMode=<AD | STC>\n\n        Adjusted Derivative (AD) or Single Threshold Crossing (STC).\n\n        Default: *STC*\n"
                                },
                                {
                                    "line": 463,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  detectSP=<0|1>\n\n        Detect secondary pulses (1) or not (0).\n\n        Default: 1\n"
                                },
                                {
                                    "line": 469,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  LbT=<secs>\n\n        Baseline averaging length, in seconds.\n\n        Default: 6.4E-3\n"
                                },
                                {
                                    "line": 475,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  intermediate=<0|1>\n\n        Write intermediate files: yes(1), no(0)?\n\n        Default: 0\n"
                                },
                                {
                                    "line": 481,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  detectFile=<str>\n\n        Intermediate detections FITS file (if :option:`intermediate` = 1).\n\n        Default: *detections.fits*\n"
                                },
                                {
                                    "line": 487,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  FilterDomain=<T | F>\n\n        Filtering Domain: Time(T) or Frequency(F).\n\n        Default: *T*\n"
                                },
                                {
                                    "line": 493,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  FilterMethod=<F0 | B0>\n\n        Filtering Method: *F0* (deleting the zero frequency bin) or *B0* (deleting the baseline).\n\n        Default: *F0*\n"
                                },
                                {
                                    "line": 499,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  EnergyMethod=<OPTFILT | 0PAD | INTCOVAR | COVAR | I2R | IRFITTED>\n\n        :ref:`reconMethods` Energy calculation Method: OPTFILT (Optimal filtering), 0PAD (0-padding), INTCOVAR (Covariance matrices), COVAR (Covariance matrices, first order) or I2R and I2RFITTED (Linear Transformations).\n\n        Default: *OPTFILT*\n"
                                },
                                {
                                    "line": 505,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  filtEeV=<eV>\n\n        Energy of the filters of the library to be used to calculate energy (only for OPTFILT, 0PAD, I2R and I2RFITTED).\n\n        Default: 6000\n"
                                },
                                {
                                    "line": 511,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  Ifit=<adu>\n\n        Constant to apply the I2RFITTED conversion.\n\n        Default: 0.0\n\n        Used if :option:`EnergyMethod` = I2RFITTED.\n"
                                },
                                {
                                    "line": 519,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  OFNoise=<NSD | WEIGHTN>\n\n        It has only sense if :option:`EnergyMethod` = OPTFILT and it means to use the noise spectrum density (NSD) or the noise weight matrix (WEIGHTN).\n\n        Default: *NSD*\n"
                                },
                                {
                                    "line": 525,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  LagsOrNot=<0|1>\n\n        Use LAGS == 1 or NOLAGS == 0 to indicate whether subsampling pulse arrival time is required. Currently only implemented for :option:`EnergyMethod` = OPTFILT, and :option:`EnergyMethod` = COVAR combined with :option:`OFLib` = yes.\n\n        Default: 1\n"
                                },
                                {
                                    "line": 531,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  nLags=<int>\n\n        Number of lags (samples) to be used if :option:`LagsOrNot` = 1. It has to be a positive odd number.\n\n        Default: 9\n"
                                },
                                {
                                    "line": 537,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  Fitting35=<3|5>\n\n        Number of lags to analytically calculate a parabola (3) or to fit a parabola (5).\n\n        Default: 3\n"
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  OFIter=<0|1>\n\n        Iterate (1) or not iterate (0) to look for the closest energy interval. When iterations are activated, there will be more iterations if the calculated energy is out of the interval [Ealpha, Ebeta] straddling the predicted energy according the pulse shape.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 549,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option:: OFLib=<yes|no>\n\n        Work with a library with optimal filters (:option:`OFLib` = yes) or instead do Optimal Filter calculation on-the-fly (:option:`OFLib` = no).\n\n        Default: *yes*\n"
                                },
                                {
                                    "line": 555,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  OFStrategy=<FREE | BYGRADE | FIXED>\n\n        Optimal Filter length Strategy: FREE (no length restriction), BYGRADE (length according to event grading) or FIXED (fixed length). These last 2 options are only for checking and development purposes; a normal run with *on-the-fly* calculations will be done with :option:`OFStrategy` = *FREE*. If :option:`OFStrategy` = *FREE*, :option:`OFLib` = no. If :option:`OFStrategy` = *FIXED* or :option:`OFStrategy` = *BYGRADE*, :option:`OFLib` = yes.\n\n        Default: *BYGRADE*\n"
                                },
                                {
                                    "line": 561,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  OFLength=<int>\n\n        Fixed Optimal Filter length.\n\n        Default: 8192\n\n        Only used when :option:`OFStrategy` = **FIXED**.\n"
                                },
                                {
                                    "line": 569,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  prebuff_0pad=<int>\n\n        0-padding preBuffer (only necessary when reconstructing with 0-padding)\n\n        Default: 1000\n"
                                },
                                {
                                    "line": 575,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  flength_0pad=<int>\n\n        0-padding filter length (only necessary when reconstructing with 0-padding)\n\n        Default: 8192\n"
                                },
                                {
                                    "line": 581,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  errorT=<int>\n\n        Additional error (in samples) added to the detected time. Logically, it changes the reconstructed energies. For deveplopment purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 587,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  Sum0Filt=<0|1>\n\n        If 0-padding, subtract (1) or not subtract (0) the sum of the filter. For deveplopment purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 593,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  tstartPulse1=<str>\n\n        Start time (in samples) of the first pulse (0 if detection should be performed by the system; greater than 0 if provided by the user) or file name containing the tstart (in seconds) of every pulse. For development purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 599,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  tstartPulse2=<int>\n\n        Start time (in samples) of the second pulse in the record (0 if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 605,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown directive type \"option\".",
                                    "full_message": "Unknown directive type \"option\".\n\n.. option::  tstartPulse3=<int>\n\n        Start time (in samples) of the third pulse in the record (0  if detection should be performed by the system; greater than 0 if provided by the user). For development purposes.\n\n        Default: 0\n"
                                },
                                {
                                    "line": 631,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 633,
                                    "source": "./doc/SIRENAcommandline.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 16,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 16,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 16,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 16,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 32,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 39,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 39,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 45,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 66,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 75,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 95,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 95,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 95,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 95,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 95,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 97,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 99,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 112,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 114,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 114,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 124,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 132,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 134,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 136,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 136,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 136,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 220,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 221,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 222,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 223,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 224,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 224,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 225,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 226,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 227,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 227,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 227,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 228,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 228,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 229,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 230,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 231,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 232,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 233,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 233,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 234,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 234,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 234,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 235,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 236,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 237,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 237,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 238,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 238,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 238,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 244,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 244,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 250,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 257,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 257,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 261,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 262,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 262,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 263,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 267,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 267,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 267,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 268,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 268,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 268,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 269,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 269,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 270,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 271,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 272,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 273,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 274,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 275,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 280,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 282,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 282,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 282,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 282,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 284,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 284,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 284,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 284,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 286,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 286,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 288,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 288,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 315,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 333,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 335,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 365,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 365,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 365,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 365,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 393,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 393,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 402,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 440,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 455,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 466,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 470,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 472,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 472,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 472,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 472,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 472,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 472,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 474,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 483,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 497,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 497,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 497,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 504,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 504,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 537,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 537,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 541,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 541,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 541,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 541,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 541,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 543,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 576,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 576,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 584,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 584,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 586,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 586,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 593,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 593,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 593,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 608,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 612,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 623,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 623,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 637,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 637,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 639,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 639,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 667,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 673,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 715,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 841,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 843,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"cite\".",
                                    "full_message": "Unknown interpreted text role \"cite\"."
                                },
                                {
                                    "line": 849,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                },
                                {
                                    "line": 851,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 888,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 888,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"option\".",
                                    "full_message": "Unknown interpreted text role \"option\"."
                                },
                                {
                                    "line": 888,
                                    "source": "./doc/SIRENA.rst",
                                    "level": 3,
                                    "type": "ERROR",
                                    "message": "Unknown interpreted text role \"ref\".",
                                    "full_message": "Unknown interpreted text role \"ref\"."
                                }
                            ]
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 80,
                "total_subcriteria": 5,
                "success_subcriteria": 4
            }
        },
        "QC.Lic": {
            "valid": true,
            "subcriteria": {
                "QC.Lic01": {
                    "description": "Is code licensed to be freely used, modified and distributed by others?",
                    "requirement_level": "MUST",
                    "hint": "<p>Your source code repository shall be distributed under an open source license for this subcriterion to pass successfully. Be sure to have a license file present in the code repository matching the name <code>LICENSE</code> with optional extensions (depending on the format used): <code>[.md|.rst|.txt]</code>.</p><p>Valid licenses are any of those approved either by the <a href=\"https://opensource.org/licenses\" target=\"_blank\">Open Source Initiative</a> and/or the Free Software Foundation <a href=\"https://www.gnu.org/licenses/license-list.html\" target=\"_blank\"></a>. You can also check the <a href=\"https://choosealicense.com/\" target=\"_blank\">choosealicense.com</a> site</p>",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "An Open Source license found in the code repository: GPL-3.0",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/bcobo/SIRENA licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json"
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"gpl-3.0\",\"spdx_id\":\"GPL-3.0\",\"meta\":{\"title\":\"GNU General Public License v3.0\",\"source\":\"https://spdx.org/licenses/GPL-3.0.html\",\"description\":\"Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.\",\"how\":\"Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Ansible\":\"https://github.com/ansible/ansible/blob/devel/COPYING\",\"Bash\":\"https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING\",\"GIMP\":\"https://git.gnome.org/browse/gimp/tree/COPYING\"},\"featured\":true,\"hidden\":false,\"nickname\":\"GNU GPLv3\",\"note\":\"The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license.\"},\"url\":\"http://choosealicense.com/licenses/gpl-3.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"},{\"tag\":\"disclose-source\",\"label\":\"Disclose source\",\"description\":\"Source code must be made available when the licensed material is distributed.\"},{\"tag\":\"same-license\",\"label\":\"Same license\",\"description\":\"Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used.\"}],\"limitations\":[{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":true,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"                    GNU GENERAL PUBLIC LICENSE\\n                       Version 3, 29 June 2007\\n\\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\\n Everyone is permitted to copy and distribute verbatim copies\\n of this license document, but changing it is not allowed.\\n\\n                            Preamble\\n\\n  The GNU General Public License is a free, copyleft license for\\nsoftware and other kinds of works.\\n\\n  The licenses for most software and other practical works are designed\\nto take away your freedom to share and change the works.  By contrast,\\nthe GNU General Public License is intended to guarantee your freedom to\\nshare and change all versions of a program--to make sure it remains free\\nsoftware for all its users.  We, the Free Software Foundation, use the\\nGNU General Public License for most of our software; it applies also to\\nany other work released this way by its authors.  You can apply it to\\nyour programs, too.\\n\\n  When we speak of free software, we are referring to freedom, not\\nprice.  Our General Public Licenses are designed to make sure that you\\nhave the freedom to distribute copies of free software (and charge for\\nthem if you wish), that you receive source code or can get it if you\\nwant it, that you can change the software or use pieces of it in new\\nfree programs, and that you know you can do these things.\\n\\n  To protect your rights, we need to prevent others from denying you\\nthese rights or asking you to surrender the rights.  Therefore, you have\\ncertain responsibilities if you distribute copies of the software, or if\\nyou modify it: responsibilities to respect the freedom of others.\\n\\n  For example, if you distribute copies of such a program, whether\\ngratis or for a fee, you must pass on to the recipients the same\\nfreedoms that you received.  You must make sure that they, too, receive\\nor can get the source code.  And you must show them these terms so they\\nknow their rights.\\n\\n  Developers that use the GNU GPL protect your rights with two steps:\\n(1) assert copyright on the software, and (2) offer you this License\\ngiving you legal permission to copy, distribute and/or modify it.\\n\\n  For the developers' and authors' protection, the GPL clearly explains\\nthat there is no warranty for this free software.  For both users' and\\nauthors' sake, the GPL requires that modified versions be marked as\\nchanged, so that their problems will not be attributed erroneously to\\nauthors of previous versions.\\n\\n  Some devices are designed to deny users access to install or run\\nmodified versions of the software inside them, although the manufacturer\\ncan do so.  This is fundamentally incompatible with the aim of\\nprotecting users' freedom to change the software.  The systematic\\npattern of such abuse occurs in the area of products for individuals to\\nuse, which is precisely where it is most unacceptable.  Therefore, we\\nhave designed this version of the GPL to prohibit the practice for those\\nproducts.  If such problems arise substantially in other domains, we\\nstand ready to extend this provision to those domains in future versions\\nof the GPL, as needed to protect the freedom of users.\\n\\n  Finally, every program is threatened constantly by software patents.\\nStates should not allow patents to restrict development and use of\\nsoftware on general-purpose computers, but in those that do, we wish to\\navoid the special danger that patents applied to a free program could\\nmake it effectively proprietary.  To prevent this, the GPL assures that\\npatents cannot be used to render the program non-free.\\n\\n  The precise terms and conditions for copying, distribution and\\nmodification follow.\\n\\n                       TERMS AND CONDITIONS\\n\\n  0. Definitions.\\n\\n  \\\"This License\\\" refers to version 3 of the GNU General Public License.\\n\\n  \\\"Copyright\\\" also means copyright-like laws that apply to other kinds of\\nworks, such as semiconductor masks.\\n\\n  \\\"The Program\\\" refers to any copyrightable work licensed under this\\nLicense.  Each licensee is addressed as \\\"you\\\".  \\\"Licensees\\\" and\\n\\\"recipients\\\" may be individuals or organizations.\\n\\n  To \\\"modify\\\" a work means to copy from or adapt all or part of the work\\nin a fashion requiring copyright permission, other than the making of an\\nexact copy.  The resulting work is called a \\\"modified version\\\" of the\\nearlier work or a work \\\"based on\\\" the earlier work.\\n\\n  A \\\"covered work\\\" means either the unmodified Program or a work based\\non the Program.\\n\\n  To \\\"propagate\\\" a work means to do anything with it that, without\\npermission, would make you directly or secondarily liable for\\ninfringement under applicable copyright law, except executing it on a\\ncomputer or modifying a private copy.  Propagation includes copying,\\ndistribution (with or without modification), making available to the\\npublic, and in some countries other activities as well.\\n\\n  To \\\"convey\\\" a work means any kind of propagation that enables other\\nparties to make or receive copies.  Mere interaction with a user through\\na computer network, with no transfer of a copy, is not conveying.\\n\\n  An interactive user interface displays \\\"Appropriate Legal Notices\\\"\\nto the extent that it includes a convenient and prominently visible\\nfeature that (1) displays an appropriate copyright notice, and (2)\\ntells the user that there is no warranty for the work (except to the\\nextent that warranties are provided), that licensees may convey the\\nwork under this License, and how to view a copy of this License.  If\\nthe interface presents a list of user commands or options, such as a\\nmenu, a prominent item in the list meets this criterion.\\n\\n  1. Source Code.\\n\\n  The \\\"source code\\\" for a work means the preferred form of the work\\nfor making modifications to it.  \\\"Object code\\\" means any non-source\\nform of a work.\\n\\n  A \\\"Standard Interface\\\" means an interface that either is an official\\nstandard defined by a recognized standards body, or, in the case of\\ninterfaces specified for a particular programming language, one that\\nis widely used among developers working in that language.\\n\\n  The \\\"System Libraries\\\" of an executable work include anything, other\\nthan the work as a whole, that (a) is included in the normal form of\\npackaging a Major Component, but which is not part of that Major\\nComponent, and (b) serves only to enable use of the work with that\\nMajor Component, or to implement a Standard Interface for which an\\nimplementation is available to the public in source code form.  A\\n\\\"Major Component\\\", in this context, means a major essential component\\n(kernel, window system, and so on) of the specific operating system\\n(if any) on which the executable work runs, or a compiler used to\\nproduce the work, or an object code interpreter used to run it.\\n\\n  The \\\"Corresponding Source\\\" for a work in object code form means all\\nthe source code needed to generate, install, and (for an executable\\nwork) run the object code and to modify the work, including scripts to\\ncontrol those activities.  However, it does not include the work's\\nSystem Libraries, or general-purpose tools or generally available free\\nprograms which are used unmodified in performing those activities but\\nwhich are not part of the work.  For example, Corresponding Source\\nincludes interface definition files associated with source files for\\nthe work, and the source code for shared libraries and dynamically\\nlinked subprograms that the work is specifically designed to require,\\nsuch as by intimate data communication or control flow between those\\nsubprograms and other parts of the work.\\n\\n  The Corresponding Source need not include anything that users\\ncan regenerate automatically from other parts of the Corresponding\\nSource.\\n\\n  The Corresponding Source for a work in source code form is that\\nsame work.\\n\\n  2. Basic Permissions.\\n\\n  All rights granted under this License are granted for the term of\\ncopyright on the Program, and are irrevocable provided the stated\\nconditions are met.  This License explicitly affirms your unlimited\\npermission to run the unmodified Program.  The output from running a\\ncovered work is covered by this License only if the output, given its\\ncontent, constitutes a covered work.  This License acknowledges your\\nrights of fair use or other equivalent, as provided by copyright law.\\n\\n  You may make, run and propagate covered works that you do not\\nconvey, without conditions so long as your license otherwise remains\\nin force.  You may convey covered works to others for the sole purpose\\nof having them make modifications exclusively for you, or provide you\\nwith facilities for running those works, provided that you comply with\\nthe terms of this License in conveying all material for which you do\\nnot control copyright.  Those thus making or running the covered works\\nfor you must do so exclusively on your behalf, under your direction\\nand control, on terms that prohibit them from making any copies of\\nyour copyrighted material outside their relationship with you.\\n\\n  Conveying under any other circumstances is permitted solely under\\nthe conditions stated below.  Sublicensing is not allowed; section 10\\nmakes it unnecessary.\\n\\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\\n\\n  No covered work shall be deemed part of an effective technological\\nmeasure under any applicable law fulfilling obligations under article\\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\\nsimilar laws prohibiting or restricting circumvention of such\\nmeasures.\\n\\n  When you convey a covered work, you waive any legal power to forbid\\ncircumvention of technological measures to the extent such circumvention\\nis effected by exercising rights under this License with respect to\\nthe covered work, and you disclaim any intention to limit operation or\\nmodification of the work as a means of enforcing, against the work's\\nusers, your or third parties' legal rights to forbid circumvention of\\ntechnological measures.\\n\\n  4. Conveying Verbatim Copies.\\n\\n  You may convey verbatim copies of the Program's source code as you\\nreceive it, in any medium, provided that you conspicuously and\\nappropriately publish on each copy an appropriate copyright notice;\\nkeep intact all notices stating that this License and any\\nnon-permissive terms added in accord with section 7 apply to the code;\\nkeep intact all notices of the absence of any warranty; and give all\\nrecipients a copy of this License along with the Program.\\n\\n  You may charge any price or no price for each copy that you convey,\\nand you may offer support or warranty protection for a fee.\\n\\n  5. Conveying Modified Source Versions.\\n\\n  You may convey a work based on the Program, or the modifications to\\nproduce it from the Program, in the form of source code under the\\nterms of section 4, provided that you also meet all of these conditions:\\n\\n    a) The work must carry prominent notices stating that you modified\\n    it, and giving a relevant date.\\n\\n    b) The work must carry prominent notices stating that it is\\n    released under this License and any conditions added under section\\n    7.  This requirement modifies the requirement in section 4 to\\n    \\\"keep intact all notices\\\".\\n\\n    c) You must license the entire work, as a whole, under this\\n    License to anyone who comes into possession of a copy.  This\\n    License will therefore apply, along with any applicable section 7\\n    additional terms, to the whole of the work, and all its parts,\\n    regardless of how they are packaged.  This License gives no\\n    permission to license the work in any other way, but it does not\\n    invalidate such permission if you have separately received it.\\n\\n    d) If the work has interactive user interfaces, each must display\\n    Appropriate Legal Notices; however, if the Program has interactive\\n    interfaces that do not display Appropriate Legal Notices, your\\n    work need not make them do so.\\n\\n  A compilation of a covered work with other separate and independent\\nworks, which are not by their nature extensions of the covered work,\\nand which are not combined with it such as to form a larger program,\\nin or on a volume of a storage or distribution medium, is called an\\n\\\"aggregate\\\" if the compilation and its resulting copyright are not\\nused to limit the access or legal rights of the compilation's users\\nbeyond what the individual works permit.  Inclusion of a covered work\\nin an aggregate does not cause this License to apply to the other\\nparts of the aggregate.\\n\\n  6. Conveying Non-Source Forms.\\n\\n  You may convey a covered work in object code form under the terms\\nof sections 4 and 5, provided that you also convey the\\nmachine-readable Corresponding Source under the terms of this License,\\nin one of these ways:\\n\\n    a) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by the\\n    Corresponding Source fixed on a durable physical medium\\n    customarily used for software interchange.\\n\\n    b) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by a\\n    written offer, valid for at least three years and valid for as\\n    long as you offer spare parts or customer support for that product\\n    model, to give anyone who possesses the object code either (1) a\\n    copy of the Corresponding Source for all the software in the\\n    product that is covered by this License, on a durable physical\\n    medium customarily used for software interchange, for a price no\\n    more than your reasonable cost of physically performing this\\n    conveying of source, or (2) access to copy the\\n    Corresponding Source from a network server at no charge.\\n\\n    c) Convey individual copies of the object code with a copy of the\\n    written offer to provide the Corresponding Source.  This\\n    alternative is allowed only occasionally and noncommercially, and\\n    only if you received the object code with such an offer, in accord\\n    with subsection 6b.\\n\\n    d) Convey the object code by offering access from a designated\\n    place (gratis or for a charge), and offer equivalent access to the\\n    Corresponding Source in the same way through the same place at no\\n    further charge.  You need not require recipients to copy the\\n    Corresponding Source along with the object code.  If the place to\\n    copy the object code is a network server, the Corresponding Source\\n    may be on a different server (operated by you or a third party)\\n    that supports equivalent copying facilities, provided you maintain\\n    clear directions next to the object code saying where to find the\\n    Corresponding Source.  Regardless of what server hosts the\\n    Corresponding Source, you remain obligated to ensure that it is\\n    available for as long as needed to satisfy these requirements.\\n\\n    e) Convey the object code using peer-to-peer transmission, provided\\n    you inform other peers where the object code and Corresponding\\n    Source of the work are being offered to the general public at no\\n    charge under subsection 6d.\\n\\n  A separable portion of the object code, whose source code is excluded\\nfrom the Corresponding Source as a System Library, need not be\\nincluded in conveying the object code work.\\n\\n  A \\\"User Product\\\" is either (1) a \\\"consumer product\\\", which means any\\ntangible personal property which is normally used for personal, family,\\nor household purposes, or (2) anything designed or sold for incorporation\\ninto a dwelling.  In determining whether a product is a consumer product,\\ndoubtful cases shall be resolved in favor of coverage.  For a particular\\nproduct received by a particular user, \\\"normally used\\\" refers to a\\ntypical or common use of that class of product, regardless of the status\\nof the particular user or of the way in which the particular user\\nactually uses, or expects or is expected to use, the product.  A product\\nis a consumer product regardless of whether the product has substantial\\ncommercial, industrial or non-consumer uses, unless such uses represent\\nthe only significant mode of use of the product.\\n\\n  \\\"Installation Information\\\" for a User Product means any methods,\\nprocedures, authorization keys, or other information required to install\\nand execute modified versions of a covered work in that User Product from\\na modified version of its Corresponding Source.  The information must\\nsuffice to ensure that the continued functioning of the modified object\\ncode is in no case prevented or interfered with solely because\\nmodification has been made.\\n\\n  If you convey an object code work under this section in, or with, or\\nspecifically for use in, a User Product, and the conveying occurs as\\npart of a transaction in which the right of possession and use of the\\nUser Product is transferred to the recipient in perpetuity or for a\\nfixed term (regardless of how the transaction is characterized), the\\nCorresponding Source conveyed under this section must be accompanied\\nby the Installation Information.  But this requirement does not apply\\nif neither you nor any third party retains the ability to install\\nmodified object code on the User Product (for example, the work has\\nbeen installed in ROM).\\n\\n  The requirement to provide Installation Information does not include a\\nrequirement to continue to provide support service, warranty, or updates\\nfor a work that has been modified or installed by the recipient, or for\\nthe User Product in which it has been modified or installed.  Access to a\\nnetwork may be denied when the modification itself materially and\\nadversely affects the operation of the network or violates the rules and\\nprotocols for communication across the network.\\n\\n  Corresponding Source conveyed, and Installation Information provided,\\nin accord with this section must be in a format that is publicly\\ndocumented (and with an implementation available to the public in\\nsource code form), and must require no special password or key for\\nunpacking, reading or copying.\\n\\n  7. Additional Terms.\\n\\n  \\\"Additional permissions\\\" are terms that supplement the terms of this\\nLicense by making exceptions from one or more of its conditions.\\nAdditional permissions that are applicable to the entire Program shall\\nbe treated as though they were included in this License, to the extent\\nthat they are valid under applicable law.  If additional permissions\\napply only to part of the Program, that part may be used separately\\nunder those permissions, but the entire Program remains governed by\\nthis License without regard to the additional permissions.\\n\\n  When you convey a copy of a covered work, you may at your option\\nremove any additional permissions from that copy, or from any part of\\nit.  (Additional permissions may be written to require their own\\nremoval in certain cases when you modify the work.)  You may place\\nadditional permissions on material, added by you to a covered work,\\nfor which you have or can give appropriate copyright permission.\\n\\n  Notwithstanding any other provision of this License, for material you\\nadd to a covered work, you may (if authorized by the copyright holders of\\nthat material) supplement the terms of this License with terms:\\n\\n    a) Disclaiming warranty or limiting liability differently from the\\n    terms of sections 15 and 16 of this License; or\\n\\n    b) Requiring preservation of specified reasonable legal notices or\\n    author attributions in that material or in the Appropriate Legal\\n    Notices displayed by works containing it; or\\n\\n    c) Prohibiting misrepresentation of the origin of that material, or\\n    requiring that modified versions of such material be marked in\\n    reasonable ways as different from the original version; or\\n\\n    d) Limiting the use for publicity purposes of names of licensors or\\n    authors of the material; or\\n\\n    e) Declining to grant rights under trademark law for use of some\\n    trade names, trademarks, or service marks; or\\n\\n    f) Requiring indemnification of licensors and authors of that\\n    material by anyone who conveys the material (or modified versions of\\n    it) with contractual assumptions of liability to the recipient, for\\n    any liability that these contractual assumptions directly impose on\\n    those licensors and authors.\\n\\n  All other non-permissive additional terms are considered \\\"further\\nrestrictions\\\" within the meaning of section 10.  If the Program as you\\nreceived it, or any part of it, contains a notice stating that it is\\ngoverned by this License along with a term that is a further\\nrestriction, you may remove that term.  If a license document contains\\na further restriction but permits relicensing or conveying under this\\nLicense, you may add to a covered work material governed by the terms\\nof that license document, provided that the further restriction does\\nnot survive such relicensing or conveying.\\n\\n  If you add terms to a covered work in accord with this section, you\\nmust place, in the relevant source files, a statement of the\\nadditional terms that apply to those files, or a notice indicating\\nwhere to find the applicable terms.\\n\\n  Additional terms, permissive or non-permissive, may be stated in the\\nform of a separately written license, or stated as exceptions;\\nthe above requirements apply either way.\\n\\n  8. Termination.\\n\\n  You may not propagate or modify a covered work except as expressly\\nprovided under this License.  Any attempt otherwise to propagate or\\nmodify it is void, and will automatically terminate your rights under\\nthis License (including any patent licenses granted under the third\\nparagraph of section 11).\\n\\n  However, if you cease all violation of this License, then your\\nlicense from a particular copyright holder is reinstated (a)\\nprovisionally, unless and until the copyright holder explicitly and\\nfinally terminates your license, and (b) permanently, if the copyright\\nholder fails to notify you of the violation by some reasonable means\\nprior to 60 days after the cessation.\\n\\n  Moreover, your license from a particular copyright holder is\\nreinstated permanently if the copyright holder notifies you of the\\nviolation by some reasonable means, this is the first time you have\\nreceived notice of violation of this License (for any work) from that\\ncopyright holder, and you cure the violation prior to 30 days after\\nyour receipt of the notice.\\n\\n  Termination of your rights under this section does not terminate the\\nlicenses of parties who have received copies or rights from you under\\nthis License.  If your rights have been terminated and not permanently\\nreinstated, you do not qualify to receive new licenses for the same\\nmaterial under section 10.\\n\\n  9. Acceptance Not Required for Having Copies.\\n\\n  You are not required to accept this License in order to receive or\\nrun a copy of the Program.  Ancillary propagation of a covered work\\noccurring solely as a consequence of using peer-to-peer transmission\\nto receive a copy likewise does not require acceptance.  However,\\nnothing other than this License grants you permission to propagate or\\nmodify any covered work.  These actions infringe copyright if you do\\nnot accept this License.  Therefore, by modifying or propagating a\\ncovered work, you indicate your acceptance of this License to do so.\\n\\n  10. Automatic Licensing of Downstream Recipients.\\n\\n  Each time you convey a covered work, the recipient automatically\\nreceives a license from the original licensors, to run, modify and\\npropagate that work, subject to this License.  You are not responsible\\nfor enforcing compliance by third parties with this License.\\n\\n  An \\\"entity transaction\\\" is a transaction transferring control of an\\norganization, or substantially all assets of one, or subdividing an\\norganization, or merging organizations.  If propagation of a covered\\nwork results from an entity transaction, each party to that\\ntransaction who receives a copy of the work also receives whatever\\nlicenses to the work the party's predecessor in interest had or could\\ngive under the previous paragraph, plus a right to possession of the\\nCorresponding Source of the work from the predecessor in interest, if\\nthe predecessor has it or can get it with reasonable efforts.\\n\\n  You may not impose any further restrictions on the exercise of the\\nrights granted or affirmed under this License.  For example, you may\\nnot impose a license fee, royalty, or other charge for exercise of\\nrights granted under this License, and you may not initiate litigation\\n(including a cross-claim or counterclaim in a lawsuit) alleging that\\nany patent claim is infringed by making, using, selling, offering for\\nsale, or importing the Program or any portion of it.\\n\\n  11. Patents.\\n\\n  A \\\"contributor\\\" is a copyright holder who authorizes use under this\\nLicense of the Program or a work on which the Program is based.  The\\nwork thus licensed is called the contributor's \\\"contributor version\\\".\\n\\n  A contributor's \\\"essential patent claims\\\" are all patent claims\\nowned or controlled by the contributor, whether already acquired or\\nhereafter acquired, that would be infringed by some manner, permitted\\nby this License, of making, using, or selling its contributor version,\\nbut do not include claims that would be infringed only as a\\nconsequence of further modification of the contributor version.  For\\npurposes of this definition, \\\"control\\\" includes the right to grant\\npatent sublicenses in a manner consistent with the requirements of\\nthis License.\\n\\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\\npatent license under the contributor's essential patent claims, to\\nmake, use, sell, offer for sale, import and otherwise run, modify and\\npropagate the contents of its contributor version.\\n\\n  In the following three paragraphs, a \\\"patent license\\\" is any express\\nagreement or commitment, however denominated, not to enforce a patent\\n(such as an express permission to practice a patent or covenant not to\\nsue for patent infringement).  To \\\"grant\\\" such a patent license to a\\nparty means to make such an agreement or commitment not to enforce a\\npatent against the party.\\n\\n  If you convey a covered work, knowingly relying on a patent license,\\nand the Corresponding Source of the work is not available for anyone\\nto copy, free of charge and under the terms of this License, through a\\npublicly available network server or other readily accessible means,\\nthen you must either (1) cause the Corresponding Source to be so\\navailable, or (2) arrange to deprive yourself of the benefit of the\\npatent license for this particular work, or (3) arrange, in a manner\\nconsistent with the requirements of this License, to extend the patent\\nlicense to downstream recipients.  \\\"Knowingly relying\\\" means you have\\nactual knowledge that, but for the patent license, your conveying the\\ncovered work in a country, or your recipient's use of the covered work\\nin a country, would infringe one or more identifiable patents in that\\ncountry that you have reason to believe are valid.\\n\\n  If, pursuant to or in connection with a single transaction or\\narrangement, you convey, or propagate by procuring conveyance of, a\\ncovered work, and grant a patent license to some of the parties\\nreceiving the covered work authorizing them to use, propagate, modify\\nor convey a specific copy of the covered work, then the patent license\\nyou grant is automatically extended to all recipients of the covered\\nwork and works based on it.\\n\\n  A patent license is \\\"discriminatory\\\" if it does not include within\\nthe scope of its coverage, prohibits the exercise of, or is\\nconditioned on the non-exercise of one or more of the rights that are\\nspecifically granted under this License.  You may not convey a covered\\nwork if you are a party to an arrangement with a third party that is\\nin the business of distributing software, under which you make payment\\nto the third party based on the extent of your activity of conveying\\nthe work, and under which the third party grants, to any of the\\nparties who would receive the covered work from you, a discriminatory\\npatent license (a) in connection with copies of the covered work\\nconveyed by you (or copies made from those copies), or (b) primarily\\nfor and in connection with specific products or compilations that\\ncontain the covered work, unless you entered into that arrangement,\\nor that patent license was granted, prior to 28 March 2007.\\n\\n  Nothing in this License shall be construed as excluding or limiting\\nany implied license or other defenses to infringement that may\\notherwise be available to you under applicable patent law.\\n\\n  12. No Surrender of Others' Freedom.\\n\\n  If conditions are imposed on you (whether by court order, agreement or\\notherwise) that contradict the conditions of this License, they do not\\nexcuse you from the conditions of this License.  If you cannot convey a\\ncovered work so as to satisfy simultaneously your obligations under this\\nLicense and any other pertinent obligations, then as a consequence you may\\nnot convey it at all.  For example, if you agree to terms that obligate you\\nto collect a royalty for further conveying from those to whom you convey\\nthe Program, the only way you could satisfy both those terms and this\\nLicense would be to refrain entirely from conveying the Program.\\n\\n  13. Use with the GNU Affero General Public License.\\n\\n  Notwithstanding any other provision of this License, you have\\npermission to link or combine any covered work with a work licensed\\nunder version 3 of the GNU Affero General Public License into a single\\ncombined work, and to convey the resulting work.  The terms of this\\nLicense will continue to apply to the part which is the covered work,\\nbut the special requirements of the GNU Affero General Public License,\\nsection 13, concerning interaction through a network will apply to the\\ncombination as such.\\n\\n  14. Revised Versions of this License.\\n\\n  The Free Software Foundation may publish revised and/or new versions of\\nthe GNU General Public License from time to time.  Such new versions will\\nbe similar in spirit to the present version, but may differ in detail to\\naddress new problems or concerns.\\n\\n  Each version is given a distinguishing version number.  If the\\nProgram specifies that a certain numbered version of the GNU General\\nPublic License \\\"or any later version\\\" applies to it, you have the\\noption of following the terms and conditions either of that numbered\\nversion or of any later version published by the Free Software\\nFoundation.  If the Program does not specify a version number of the\\nGNU General Public License, you may choose any version ever published\\nby the Free Software Foundation.\\n\\n  If the Program specifies that a proxy can decide which future\\nversions of the GNU General Public License can be used, that proxy's\\npublic statement of acceptance of a version permanently authorizes you\\nto choose that version for the Program.\\n\\n  Later license versions may give you additional or different\\npermissions.  However, no additional obligations are imposed on any\\nauthor or copyright holder as a result of your choosing to follow a\\nlater version.\\n\\n  15. Disclaimer of Warranty.\\n\\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\n\\n  16. Limitation of Liability.\\n\\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\nSUCH DAMAGES.\\n\\n  17. Interpretation of Sections 15 and 16.\\n\\n  If the disclaimer of warranty and limitation of liability provided\\nabove cannot be given local legal effect according to their terms,\\nreviewing courts shall apply local law that most closely approximates\\nan absolute waiver of all civil liability in connection with the\\nProgram, unless a warranty or assumption of liability accompanies a\\ncopy of the Program in return for a fee.\\n\\n                     END OF TERMS AND CONDITIONS\\n\\n            How to Apply These Terms to Your New Programs\\n\\n  If you develop a new program, and you want it to be of the greatest\\npossible use to the public, the best way to achieve this is to make it\\nfree software which everyone can redistribute and change under these terms.\\n\\n  To do so, attach the following notices to the program.  It is safest\\nto attach them to the start of each source file to most effectively\\nstate the exclusion of warranty; and each file should have at least\\nthe \\\"copyright\\\" line and a pointer to where the full notice is found.\\n\\n    <one line to give the program's name and a brief idea of what it does.>\\n    Copyright (C) <year>  <name of author>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\nAlso add information on how to contact you by electronic and paper mail.\\n\\n  If the program does terminal interaction, make it output a short\\nnotice like this when it starts in an interactive mode:\\n\\n    <program>  Copyright (C) <year>  <name of author>\\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\\n    This is free software, and you are welcome to redistribute it\\n    under certain conditions; type `show c' for details.\\n\\nThe hypothetical commands `show w' and `show c' should show the appropriate\\nparts of the General Public License.  Of course, your program's commands\\nmight be different; for a GUI interface, you would use an \\\"about box\\\".\\n\\n  You should also get your employer (if you work as a programmer) or school,\\nif any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.\\nFor more information on this, and how to apply and follow the GNU GPL, see\\n<https://www.gnu.org/licenses/>.\\n\\n  The GNU General Public License does not permit incorporating your program\\ninto proprietary programs.  If your program is a subroutine library, you\\nmay consider it more useful to permit linking proprietary applications with\\nthe library.  If this is what you want to do, use the GNU Lesser General\\nPublic License instead of this License.  But first, please read\\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\\n\",\"content_hash\":\"7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd\",\"content_normalized\":\"everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"GPL-3.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "gpl-3.0",
                                        "spdx_id": "GPL-3.0",
                                        "meta": {
                                            "title": "GNU General Public License v3.0",
                                            "source": "https://spdx.org/licenses/GPL-3.0.html",
                                            "description": "Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.",
                                            "how": "Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Ansible": "https://github.com/ansible/ansible/blob/devel/COPYING",
                                                "Bash": "https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING",
                                                "GIMP": "https://git.gnome.org/browse/gimp/tree/COPYING"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": "GNU GPLv3",
                                            "note": "The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license."
                                        },
                                        "url": "http://choosealicense.com/licenses/gpl-3.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                },
                                                {
                                                    "tag": "disclose-source",
                                                    "label": "Disclose source",
                                                    "description": "Source code must be made available when the licensed material is distributed."
                                                },
                                                {
                                                    "tag": "same-license",
                                                    "label": "Same license",
                                                    "description": "Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": true,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n",
                                        "content_hash": "7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd",
                                        "content_normalized": "everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "GPL-3.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Lic01.1": {
                    "description": "Is LICENSE file placed in the root path of the code repository?",
                    "requirement_level": "MUST",
                    "hint": "Most social coding platforms require the license file to placed in the root path of the code repository, so it is a good practice to use this location by default. Allowed file names are <code>LICENSE</code>, <code>LICENSE.md</code>, <code>LICENSE.rst</code>, <code>LICENSE.txt</code>",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "LICENSE file is visible at the root path of the code repository: LICENSE",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/bcobo/SIRENA licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json"
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"gpl-3.0\",\"spdx_id\":\"GPL-3.0\",\"meta\":{\"title\":\"GNU General Public License v3.0\",\"source\":\"https://spdx.org/licenses/GPL-3.0.html\",\"description\":\"Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.\",\"how\":\"Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Ansible\":\"https://github.com/ansible/ansible/blob/devel/COPYING\",\"Bash\":\"https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING\",\"GIMP\":\"https://git.gnome.org/browse/gimp/tree/COPYING\"},\"featured\":true,\"hidden\":false,\"nickname\":\"GNU GPLv3\",\"note\":\"The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license.\"},\"url\":\"http://choosealicense.com/licenses/gpl-3.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"},{\"tag\":\"disclose-source\",\"label\":\"Disclose source\",\"description\":\"Source code must be made available when the licensed material is distributed.\"},{\"tag\":\"same-license\",\"label\":\"Same license\",\"description\":\"Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used.\"}],\"limitations\":[{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":true,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"                    GNU GENERAL PUBLIC LICENSE\\n                       Version 3, 29 June 2007\\n\\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\\n Everyone is permitted to copy and distribute verbatim copies\\n of this license document, but changing it is not allowed.\\n\\n                            Preamble\\n\\n  The GNU General Public License is a free, copyleft license for\\nsoftware and other kinds of works.\\n\\n  The licenses for most software and other practical works are designed\\nto take away your freedom to share and change the works.  By contrast,\\nthe GNU General Public License is intended to guarantee your freedom to\\nshare and change all versions of a program--to make sure it remains free\\nsoftware for all its users.  We, the Free Software Foundation, use the\\nGNU General Public License for most of our software; it applies also to\\nany other work released this way by its authors.  You can apply it to\\nyour programs, too.\\n\\n  When we speak of free software, we are referring to freedom, not\\nprice.  Our General Public Licenses are designed to make sure that you\\nhave the freedom to distribute copies of free software (and charge for\\nthem if you wish), that you receive source code or can get it if you\\nwant it, that you can change the software or use pieces of it in new\\nfree programs, and that you know you can do these things.\\n\\n  To protect your rights, we need to prevent others from denying you\\nthese rights or asking you to surrender the rights.  Therefore, you have\\ncertain responsibilities if you distribute copies of the software, or if\\nyou modify it: responsibilities to respect the freedom of others.\\n\\n  For example, if you distribute copies of such a program, whether\\ngratis or for a fee, you must pass on to the recipients the same\\nfreedoms that you received.  You must make sure that they, too, receive\\nor can get the source code.  And you must show them these terms so they\\nknow their rights.\\n\\n  Developers that use the GNU GPL protect your rights with two steps:\\n(1) assert copyright on the software, and (2) offer you this License\\ngiving you legal permission to copy, distribute and/or modify it.\\n\\n  For the developers' and authors' protection, the GPL clearly explains\\nthat there is no warranty for this free software.  For both users' and\\nauthors' sake, the GPL requires that modified versions be marked as\\nchanged, so that their problems will not be attributed erroneously to\\nauthors of previous versions.\\n\\n  Some devices are designed to deny users access to install or run\\nmodified versions of the software inside them, although the manufacturer\\ncan do so.  This is fundamentally incompatible with the aim of\\nprotecting users' freedom to change the software.  The systematic\\npattern of such abuse occurs in the area of products for individuals to\\nuse, which is precisely where it is most unacceptable.  Therefore, we\\nhave designed this version of the GPL to prohibit the practice for those\\nproducts.  If such problems arise substantially in other domains, we\\nstand ready to extend this provision to those domains in future versions\\nof the GPL, as needed to protect the freedom of users.\\n\\n  Finally, every program is threatened constantly by software patents.\\nStates should not allow patents to restrict development and use of\\nsoftware on general-purpose computers, but in those that do, we wish to\\navoid the special danger that patents applied to a free program could\\nmake it effectively proprietary.  To prevent this, the GPL assures that\\npatents cannot be used to render the program non-free.\\n\\n  The precise terms and conditions for copying, distribution and\\nmodification follow.\\n\\n                       TERMS AND CONDITIONS\\n\\n  0. Definitions.\\n\\n  \\\"This License\\\" refers to version 3 of the GNU General Public License.\\n\\n  \\\"Copyright\\\" also means copyright-like laws that apply to other kinds of\\nworks, such as semiconductor masks.\\n\\n  \\\"The Program\\\" refers to any copyrightable work licensed under this\\nLicense.  Each licensee is addressed as \\\"you\\\".  \\\"Licensees\\\" and\\n\\\"recipients\\\" may be individuals or organizations.\\n\\n  To \\\"modify\\\" a work means to copy from or adapt all or part of the work\\nin a fashion requiring copyright permission, other than the making of an\\nexact copy.  The resulting work is called a \\\"modified version\\\" of the\\nearlier work or a work \\\"based on\\\" the earlier work.\\n\\n  A \\\"covered work\\\" means either the unmodified Program or a work based\\non the Program.\\n\\n  To \\\"propagate\\\" a work means to do anything with it that, without\\npermission, would make you directly or secondarily liable for\\ninfringement under applicable copyright law, except executing it on a\\ncomputer or modifying a private copy.  Propagation includes copying,\\ndistribution (with or without modification), making available to the\\npublic, and in some countries other activities as well.\\n\\n  To \\\"convey\\\" a work means any kind of propagation that enables other\\nparties to make or receive copies.  Mere interaction with a user through\\na computer network, with no transfer of a copy, is not conveying.\\n\\n  An interactive user interface displays \\\"Appropriate Legal Notices\\\"\\nto the extent that it includes a convenient and prominently visible\\nfeature that (1) displays an appropriate copyright notice, and (2)\\ntells the user that there is no warranty for the work (except to the\\nextent that warranties are provided), that licensees may convey the\\nwork under this License, and how to view a copy of this License.  If\\nthe interface presents a list of user commands or options, such as a\\nmenu, a prominent item in the list meets this criterion.\\n\\n  1. Source Code.\\n\\n  The \\\"source code\\\" for a work means the preferred form of the work\\nfor making modifications to it.  \\\"Object code\\\" means any non-source\\nform of a work.\\n\\n  A \\\"Standard Interface\\\" means an interface that either is an official\\nstandard defined by a recognized standards body, or, in the case of\\ninterfaces specified for a particular programming language, one that\\nis widely used among developers working in that language.\\n\\n  The \\\"System Libraries\\\" of an executable work include anything, other\\nthan the work as a whole, that (a) is included in the normal form of\\npackaging a Major Component, but which is not part of that Major\\nComponent, and (b) serves only to enable use of the work with that\\nMajor Component, or to implement a Standard Interface for which an\\nimplementation is available to the public in source code form.  A\\n\\\"Major Component\\\", in this context, means a major essential component\\n(kernel, window system, and so on) of the specific operating system\\n(if any) on which the executable work runs, or a compiler used to\\nproduce the work, or an object code interpreter used to run it.\\n\\n  The \\\"Corresponding Source\\\" for a work in object code form means all\\nthe source code needed to generate, install, and (for an executable\\nwork) run the object code and to modify the work, including scripts to\\ncontrol those activities.  However, it does not include the work's\\nSystem Libraries, or general-purpose tools or generally available free\\nprograms which are used unmodified in performing those activities but\\nwhich are not part of the work.  For example, Corresponding Source\\nincludes interface definition files associated with source files for\\nthe work, and the source code for shared libraries and dynamically\\nlinked subprograms that the work is specifically designed to require,\\nsuch as by intimate data communication or control flow between those\\nsubprograms and other parts of the work.\\n\\n  The Corresponding Source need not include anything that users\\ncan regenerate automatically from other parts of the Corresponding\\nSource.\\n\\n  The Corresponding Source for a work in source code form is that\\nsame work.\\n\\n  2. Basic Permissions.\\n\\n  All rights granted under this License are granted for the term of\\ncopyright on the Program, and are irrevocable provided the stated\\nconditions are met.  This License explicitly affirms your unlimited\\npermission to run the unmodified Program.  The output from running a\\ncovered work is covered by this License only if the output, given its\\ncontent, constitutes a covered work.  This License acknowledges your\\nrights of fair use or other equivalent, as provided by copyright law.\\n\\n  You may make, run and propagate covered works that you do not\\nconvey, without conditions so long as your license otherwise remains\\nin force.  You may convey covered works to others for the sole purpose\\nof having them make modifications exclusively for you, or provide you\\nwith facilities for running those works, provided that you comply with\\nthe terms of this License in conveying all material for which you do\\nnot control copyright.  Those thus making or running the covered works\\nfor you must do so exclusively on your behalf, under your direction\\nand control, on terms that prohibit them from making any copies of\\nyour copyrighted material outside their relationship with you.\\n\\n  Conveying under any other circumstances is permitted solely under\\nthe conditions stated below.  Sublicensing is not allowed; section 10\\nmakes it unnecessary.\\n\\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\\n\\n  No covered work shall be deemed part of an effective technological\\nmeasure under any applicable law fulfilling obligations under article\\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\\nsimilar laws prohibiting or restricting circumvention of such\\nmeasures.\\n\\n  When you convey a covered work, you waive any legal power to forbid\\ncircumvention of technological measures to the extent such circumvention\\nis effected by exercising rights under this License with respect to\\nthe covered work, and you disclaim any intention to limit operation or\\nmodification of the work as a means of enforcing, against the work's\\nusers, your or third parties' legal rights to forbid circumvention of\\ntechnological measures.\\n\\n  4. Conveying Verbatim Copies.\\n\\n  You may convey verbatim copies of the Program's source code as you\\nreceive it, in any medium, provided that you conspicuously and\\nappropriately publish on each copy an appropriate copyright notice;\\nkeep intact all notices stating that this License and any\\nnon-permissive terms added in accord with section 7 apply to the code;\\nkeep intact all notices of the absence of any warranty; and give all\\nrecipients a copy of this License along with the Program.\\n\\n  You may charge any price or no price for each copy that you convey,\\nand you may offer support or warranty protection for a fee.\\n\\n  5. Conveying Modified Source Versions.\\n\\n  You may convey a work based on the Program, or the modifications to\\nproduce it from the Program, in the form of source code under the\\nterms of section 4, provided that you also meet all of these conditions:\\n\\n    a) The work must carry prominent notices stating that you modified\\n    it, and giving a relevant date.\\n\\n    b) The work must carry prominent notices stating that it is\\n    released under this License and any conditions added under section\\n    7.  This requirement modifies the requirement in section 4 to\\n    \\\"keep intact all notices\\\".\\n\\n    c) You must license the entire work, as a whole, under this\\n    License to anyone who comes into possession of a copy.  This\\n    License will therefore apply, along with any applicable section 7\\n    additional terms, to the whole of the work, and all its parts,\\n    regardless of how they are packaged.  This License gives no\\n    permission to license the work in any other way, but it does not\\n    invalidate such permission if you have separately received it.\\n\\n    d) If the work has interactive user interfaces, each must display\\n    Appropriate Legal Notices; however, if the Program has interactive\\n    interfaces that do not display Appropriate Legal Notices, your\\n    work need not make them do so.\\n\\n  A compilation of a covered work with other separate and independent\\nworks, which are not by their nature extensions of the covered work,\\nand which are not combined with it such as to form a larger program,\\nin or on a volume of a storage or distribution medium, is called an\\n\\\"aggregate\\\" if the compilation and its resulting copyright are not\\nused to limit the access or legal rights of the compilation's users\\nbeyond what the individual works permit.  Inclusion of a covered work\\nin an aggregate does not cause this License to apply to the other\\nparts of the aggregate.\\n\\n  6. Conveying Non-Source Forms.\\n\\n  You may convey a covered work in object code form under the terms\\nof sections 4 and 5, provided that you also convey the\\nmachine-readable Corresponding Source under the terms of this License,\\nin one of these ways:\\n\\n    a) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by the\\n    Corresponding Source fixed on a durable physical medium\\n    customarily used for software interchange.\\n\\n    b) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by a\\n    written offer, valid for at least three years and valid for as\\n    long as you offer spare parts or customer support for that product\\n    model, to give anyone who possesses the object code either (1) a\\n    copy of the Corresponding Source for all the software in the\\n    product that is covered by this License, on a durable physical\\n    medium customarily used for software interchange, for a price no\\n    more than your reasonable cost of physically performing this\\n    conveying of source, or (2) access to copy the\\n    Corresponding Source from a network server at no charge.\\n\\n    c) Convey individual copies of the object code with a copy of the\\n    written offer to provide the Corresponding Source.  This\\n    alternative is allowed only occasionally and noncommercially, and\\n    only if you received the object code with such an offer, in accord\\n    with subsection 6b.\\n\\n    d) Convey the object code by offering access from a designated\\n    place (gratis or for a charge), and offer equivalent access to the\\n    Corresponding Source in the same way through the same place at no\\n    further charge.  You need not require recipients to copy the\\n    Corresponding Source along with the object code.  If the place to\\n    copy the object code is a network server, the Corresponding Source\\n    may be on a different server (operated by you or a third party)\\n    that supports equivalent copying facilities, provided you maintain\\n    clear directions next to the object code saying where to find the\\n    Corresponding Source.  Regardless of what server hosts the\\n    Corresponding Source, you remain obligated to ensure that it is\\n    available for as long as needed to satisfy these requirements.\\n\\n    e) Convey the object code using peer-to-peer transmission, provided\\n    you inform other peers where the object code and Corresponding\\n    Source of the work are being offered to the general public at no\\n    charge under subsection 6d.\\n\\n  A separable portion of the object code, whose source code is excluded\\nfrom the Corresponding Source as a System Library, need not be\\nincluded in conveying the object code work.\\n\\n  A \\\"User Product\\\" is either (1) a \\\"consumer product\\\", which means any\\ntangible personal property which is normally used for personal, family,\\nor household purposes, or (2) anything designed or sold for incorporation\\ninto a dwelling.  In determining whether a product is a consumer product,\\ndoubtful cases shall be resolved in favor of coverage.  For a particular\\nproduct received by a particular user, \\\"normally used\\\" refers to a\\ntypical or common use of that class of product, regardless of the status\\nof the particular user or of the way in which the particular user\\nactually uses, or expects or is expected to use, the product.  A product\\nis a consumer product regardless of whether the product has substantial\\ncommercial, industrial or non-consumer uses, unless such uses represent\\nthe only significant mode of use of the product.\\n\\n  \\\"Installation Information\\\" for a User Product means any methods,\\nprocedures, authorization keys, or other information required to install\\nand execute modified versions of a covered work in that User Product from\\na modified version of its Corresponding Source.  The information must\\nsuffice to ensure that the continued functioning of the modified object\\ncode is in no case prevented or interfered with solely because\\nmodification has been made.\\n\\n  If you convey an object code work under this section in, or with, or\\nspecifically for use in, a User Product, and the conveying occurs as\\npart of a transaction in which the right of possession and use of the\\nUser Product is transferred to the recipient in perpetuity or for a\\nfixed term (regardless of how the transaction is characterized), the\\nCorresponding Source conveyed under this section must be accompanied\\nby the Installation Information.  But this requirement does not apply\\nif neither you nor any third party retains the ability to install\\nmodified object code on the User Product (for example, the work has\\nbeen installed in ROM).\\n\\n  The requirement to provide Installation Information does not include a\\nrequirement to continue to provide support service, warranty, or updates\\nfor a work that has been modified or installed by the recipient, or for\\nthe User Product in which it has been modified or installed.  Access to a\\nnetwork may be denied when the modification itself materially and\\nadversely affects the operation of the network or violates the rules and\\nprotocols for communication across the network.\\n\\n  Corresponding Source conveyed, and Installation Information provided,\\nin accord with this section must be in a format that is publicly\\ndocumented (and with an implementation available to the public in\\nsource code form), and must require no special password or key for\\nunpacking, reading or copying.\\n\\n  7. Additional Terms.\\n\\n  \\\"Additional permissions\\\" are terms that supplement the terms of this\\nLicense by making exceptions from one or more of its conditions.\\nAdditional permissions that are applicable to the entire Program shall\\nbe treated as though they were included in this License, to the extent\\nthat they are valid under applicable law.  If additional permissions\\napply only to part of the Program, that part may be used separately\\nunder those permissions, but the entire Program remains governed by\\nthis License without regard to the additional permissions.\\n\\n  When you convey a copy of a covered work, you may at your option\\nremove any additional permissions from that copy, or from any part of\\nit.  (Additional permissions may be written to require their own\\nremoval in certain cases when you modify the work.)  You may place\\nadditional permissions on material, added by you to a covered work,\\nfor which you have or can give appropriate copyright permission.\\n\\n  Notwithstanding any other provision of this License, for material you\\nadd to a covered work, you may (if authorized by the copyright holders of\\nthat material) supplement the terms of this License with terms:\\n\\n    a) Disclaiming warranty or limiting liability differently from the\\n    terms of sections 15 and 16 of this License; or\\n\\n    b) Requiring preservation of specified reasonable legal notices or\\n    author attributions in that material or in the Appropriate Legal\\n    Notices displayed by works containing it; or\\n\\n    c) Prohibiting misrepresentation of the origin of that material, or\\n    requiring that modified versions of such material be marked in\\n    reasonable ways as different from the original version; or\\n\\n    d) Limiting the use for publicity purposes of names of licensors or\\n    authors of the material; or\\n\\n    e) Declining to grant rights under trademark law for use of some\\n    trade names, trademarks, or service marks; or\\n\\n    f) Requiring indemnification of licensors and authors of that\\n    material by anyone who conveys the material (or modified versions of\\n    it) with contractual assumptions of liability to the recipient, for\\n    any liability that these contractual assumptions directly impose on\\n    those licensors and authors.\\n\\n  All other non-permissive additional terms are considered \\\"further\\nrestrictions\\\" within the meaning of section 10.  If the Program as you\\nreceived it, or any part of it, contains a notice stating that it is\\ngoverned by this License along with a term that is a further\\nrestriction, you may remove that term.  If a license document contains\\na further restriction but permits relicensing or conveying under this\\nLicense, you may add to a covered work material governed by the terms\\nof that license document, provided that the further restriction does\\nnot survive such relicensing or conveying.\\n\\n  If you add terms to a covered work in accord with this section, you\\nmust place, in the relevant source files, a statement of the\\nadditional terms that apply to those files, or a notice indicating\\nwhere to find the applicable terms.\\n\\n  Additional terms, permissive or non-permissive, may be stated in the\\nform of a separately written license, or stated as exceptions;\\nthe above requirements apply either way.\\n\\n  8. Termination.\\n\\n  You may not propagate or modify a covered work except as expressly\\nprovided under this License.  Any attempt otherwise to propagate or\\nmodify it is void, and will automatically terminate your rights under\\nthis License (including any patent licenses granted under the third\\nparagraph of section 11).\\n\\n  However, if you cease all violation of this License, then your\\nlicense from a particular copyright holder is reinstated (a)\\nprovisionally, unless and until the copyright holder explicitly and\\nfinally terminates your license, and (b) permanently, if the copyright\\nholder fails to notify you of the violation by some reasonable means\\nprior to 60 days after the cessation.\\n\\n  Moreover, your license from a particular copyright holder is\\nreinstated permanently if the copyright holder notifies you of the\\nviolation by some reasonable means, this is the first time you have\\nreceived notice of violation of this License (for any work) from that\\ncopyright holder, and you cure the violation prior to 30 days after\\nyour receipt of the notice.\\n\\n  Termination of your rights under this section does not terminate the\\nlicenses of parties who have received copies or rights from you under\\nthis License.  If your rights have been terminated and not permanently\\nreinstated, you do not qualify to receive new licenses for the same\\nmaterial under section 10.\\n\\n  9. Acceptance Not Required for Having Copies.\\n\\n  You are not required to accept this License in order to receive or\\nrun a copy of the Program.  Ancillary propagation of a covered work\\noccurring solely as a consequence of using peer-to-peer transmission\\nto receive a copy likewise does not require acceptance.  However,\\nnothing other than this License grants you permission to propagate or\\nmodify any covered work.  These actions infringe copyright if you do\\nnot accept this License.  Therefore, by modifying or propagating a\\ncovered work, you indicate your acceptance of this License to do so.\\n\\n  10. Automatic Licensing of Downstream Recipients.\\n\\n  Each time you convey a covered work, the recipient automatically\\nreceives a license from the original licensors, to run, modify and\\npropagate that work, subject to this License.  You are not responsible\\nfor enforcing compliance by third parties with this License.\\n\\n  An \\\"entity transaction\\\" is a transaction transferring control of an\\norganization, or substantially all assets of one, or subdividing an\\norganization, or merging organizations.  If propagation of a covered\\nwork results from an entity transaction, each party to that\\ntransaction who receives a copy of the work also receives whatever\\nlicenses to the work the party's predecessor in interest had or could\\ngive under the previous paragraph, plus a right to possession of the\\nCorresponding Source of the work from the predecessor in interest, if\\nthe predecessor has it or can get it with reasonable efforts.\\n\\n  You may not impose any further restrictions on the exercise of the\\nrights granted or affirmed under this License.  For example, you may\\nnot impose a license fee, royalty, or other charge for exercise of\\nrights granted under this License, and you may not initiate litigation\\n(including a cross-claim or counterclaim in a lawsuit) alleging that\\nany patent claim is infringed by making, using, selling, offering for\\nsale, or importing the Program or any portion of it.\\n\\n  11. Patents.\\n\\n  A \\\"contributor\\\" is a copyright holder who authorizes use under this\\nLicense of the Program or a work on which the Program is based.  The\\nwork thus licensed is called the contributor's \\\"contributor version\\\".\\n\\n  A contributor's \\\"essential patent claims\\\" are all patent claims\\nowned or controlled by the contributor, whether already acquired or\\nhereafter acquired, that would be infringed by some manner, permitted\\nby this License, of making, using, or selling its contributor version,\\nbut do not include claims that would be infringed only as a\\nconsequence of further modification of the contributor version.  For\\npurposes of this definition, \\\"control\\\" includes the right to grant\\npatent sublicenses in a manner consistent with the requirements of\\nthis License.\\n\\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\\npatent license under the contributor's essential patent claims, to\\nmake, use, sell, offer for sale, import and otherwise run, modify and\\npropagate the contents of its contributor version.\\n\\n  In the following three paragraphs, a \\\"patent license\\\" is any express\\nagreement or commitment, however denominated, not to enforce a patent\\n(such as an express permission to practice a patent or covenant not to\\nsue for patent infringement).  To \\\"grant\\\" such a patent license to a\\nparty means to make such an agreement or commitment not to enforce a\\npatent against the party.\\n\\n  If you convey a covered work, knowingly relying on a patent license,\\nand the Corresponding Source of the work is not available for anyone\\nto copy, free of charge and under the terms of this License, through a\\npublicly available network server or other readily accessible means,\\nthen you must either (1) cause the Corresponding Source to be so\\navailable, or (2) arrange to deprive yourself of the benefit of the\\npatent license for this particular work, or (3) arrange, in a manner\\nconsistent with the requirements of this License, to extend the patent\\nlicense to downstream recipients.  \\\"Knowingly relying\\\" means you have\\nactual knowledge that, but for the patent license, your conveying the\\ncovered work in a country, or your recipient's use of the covered work\\nin a country, would infringe one or more identifiable patents in that\\ncountry that you have reason to believe are valid.\\n\\n  If, pursuant to or in connection with a single transaction or\\narrangement, you convey, or propagate by procuring conveyance of, a\\ncovered work, and grant a patent license to some of the parties\\nreceiving the covered work authorizing them to use, propagate, modify\\nor convey a specific copy of the covered work, then the patent license\\nyou grant is automatically extended to all recipients of the covered\\nwork and works based on it.\\n\\n  A patent license is \\\"discriminatory\\\" if it does not include within\\nthe scope of its coverage, prohibits the exercise of, or is\\nconditioned on the non-exercise of one or more of the rights that are\\nspecifically granted under this License.  You may not convey a covered\\nwork if you are a party to an arrangement with a third party that is\\nin the business of distributing software, under which you make payment\\nto the third party based on the extent of your activity of conveying\\nthe work, and under which the third party grants, to any of the\\nparties who would receive the covered work from you, a discriminatory\\npatent license (a) in connection with copies of the covered work\\nconveyed by you (or copies made from those copies), or (b) primarily\\nfor and in connection with specific products or compilations that\\ncontain the covered work, unless you entered into that arrangement,\\nor that patent license was granted, prior to 28 March 2007.\\n\\n  Nothing in this License shall be construed as excluding or limiting\\nany implied license or other defenses to infringement that may\\notherwise be available to you under applicable patent law.\\n\\n  12. No Surrender of Others' Freedom.\\n\\n  If conditions are imposed on you (whether by court order, agreement or\\notherwise) that contradict the conditions of this License, they do not\\nexcuse you from the conditions of this License.  If you cannot convey a\\ncovered work so as to satisfy simultaneously your obligations under this\\nLicense and any other pertinent obligations, then as a consequence you may\\nnot convey it at all.  For example, if you agree to terms that obligate you\\nto collect a royalty for further conveying from those to whom you convey\\nthe Program, the only way you could satisfy both those terms and this\\nLicense would be to refrain entirely from conveying the Program.\\n\\n  13. Use with the GNU Affero General Public License.\\n\\n  Notwithstanding any other provision of this License, you have\\npermission to link or combine any covered work with a work licensed\\nunder version 3 of the GNU Affero General Public License into a single\\ncombined work, and to convey the resulting work.  The terms of this\\nLicense will continue to apply to the part which is the covered work,\\nbut the special requirements of the GNU Affero General Public License,\\nsection 13, concerning interaction through a network will apply to the\\ncombination as such.\\n\\n  14. Revised Versions of this License.\\n\\n  The Free Software Foundation may publish revised and/or new versions of\\nthe GNU General Public License from time to time.  Such new versions will\\nbe similar in spirit to the present version, but may differ in detail to\\naddress new problems or concerns.\\n\\n  Each version is given a distinguishing version number.  If the\\nProgram specifies that a certain numbered version of the GNU General\\nPublic License \\\"or any later version\\\" applies to it, you have the\\noption of following the terms and conditions either of that numbered\\nversion or of any later version published by the Free Software\\nFoundation.  If the Program does not specify a version number of the\\nGNU General Public License, you may choose any version ever published\\nby the Free Software Foundation.\\n\\n  If the Program specifies that a proxy can decide which future\\nversions of the GNU General Public License can be used, that proxy's\\npublic statement of acceptance of a version permanently authorizes you\\nto choose that version for the Program.\\n\\n  Later license versions may give you additional or different\\npermissions.  However, no additional obligations are imposed on any\\nauthor or copyright holder as a result of your choosing to follow a\\nlater version.\\n\\n  15. Disclaimer of Warranty.\\n\\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\n\\n  16. Limitation of Liability.\\n\\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\nSUCH DAMAGES.\\n\\n  17. Interpretation of Sections 15 and 16.\\n\\n  If the disclaimer of warranty and limitation of liability provided\\nabove cannot be given local legal effect according to their terms,\\nreviewing courts shall apply local law that most closely approximates\\nan absolute waiver of all civil liability in connection with the\\nProgram, unless a warranty or assumption of liability accompanies a\\ncopy of the Program in return for a fee.\\n\\n                     END OF TERMS AND CONDITIONS\\n\\n            How to Apply These Terms to Your New Programs\\n\\n  If you develop a new program, and you want it to be of the greatest\\npossible use to the public, the best way to achieve this is to make it\\nfree software which everyone can redistribute and change under these terms.\\n\\n  To do so, attach the following notices to the program.  It is safest\\nto attach them to the start of each source file to most effectively\\nstate the exclusion of warranty; and each file should have at least\\nthe \\\"copyright\\\" line and a pointer to where the full notice is found.\\n\\n    <one line to give the program's name and a brief idea of what it does.>\\n    Copyright (C) <year>  <name of author>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\nAlso add information on how to contact you by electronic and paper mail.\\n\\n  If the program does terminal interaction, make it output a short\\nnotice like this when it starts in an interactive mode:\\n\\n    <program>  Copyright (C) <year>  <name of author>\\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\\n    This is free software, and you are welcome to redistribute it\\n    under certain conditions; type `show c' for details.\\n\\nThe hypothetical commands `show w' and `show c' should show the appropriate\\nparts of the General Public License.  Of course, your program's commands\\nmight be different; for a GUI interface, you would use an \\\"about box\\\".\\n\\n  You should also get your employer (if you work as a programmer) or school,\\nif any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.\\nFor more information on this, and how to apply and follow the GNU GPL, see\\n<https://www.gnu.org/licenses/>.\\n\\n  The GNU General Public License does not permit incorporating your program\\ninto proprietary programs.  If your program is a subroutine library, you\\nmay consider it more useful to permit linking proprietary applications with\\nthe library.  If this is what you want to do, use the GNU Lesser General\\nPublic License instead of this License.  But first, please read\\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\\n\",\"content_hash\":\"7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd\",\"content_normalized\":\"everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"GPL-3.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "gpl-3.0",
                                        "spdx_id": "GPL-3.0",
                                        "meta": {
                                            "title": "GNU General Public License v3.0",
                                            "source": "https://spdx.org/licenses/GPL-3.0.html",
                                            "description": "Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.",
                                            "how": "Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Ansible": "https://github.com/ansible/ansible/blob/devel/COPYING",
                                                "Bash": "https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING",
                                                "GIMP": "https://git.gnome.org/browse/gimp/tree/COPYING"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": "GNU GPLv3",
                                            "note": "The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license."
                                        },
                                        "url": "http://choosealicense.com/licenses/gpl-3.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                },
                                                {
                                                    "tag": "disclose-source",
                                                    "label": "Disclose source",
                                                    "description": "Source code must be made available when the licensed material is distributed."
                                                },
                                                {
                                                    "tag": "same-license",
                                                    "label": "Same license",
                                                    "description": "Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": true,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n",
                                        "content_hash": "7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd",
                                        "content_normalized": "everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "GPL-3.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Lic02": {
                    "description": "Does the code use a license approved by Open Source Initiative?",
                    "requirement_level": "MUST",
                    "hint": "The <a href=\"https://opensource.org/\" target=\"_blank\">Open Source Initiative (OSI)</a> sets out the requirements for software to be legally declared as Open Source. The license in use shall be in the list of <a href=\"https://opensource.org/license-list.html\" target=\"_blank\">OSI-approved licenses</a> for this criterion to be successful",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "License GPL-3.0 is approved by the Open Source Initiative",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/bcobo/SIRENA licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json"
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"gpl-3.0\",\"spdx_id\":\"GPL-3.0\",\"meta\":{\"title\":\"GNU General Public License v3.0\",\"source\":\"https://spdx.org/licenses/GPL-3.0.html\",\"description\":\"Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.\",\"how\":\"Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Ansible\":\"https://github.com/ansible/ansible/blob/devel/COPYING\",\"Bash\":\"https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING\",\"GIMP\":\"https://git.gnome.org/browse/gimp/tree/COPYING\"},\"featured\":true,\"hidden\":false,\"nickname\":\"GNU GPLv3\",\"note\":\"The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license.\"},\"url\":\"http://choosealicense.com/licenses/gpl-3.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"},{\"tag\":\"disclose-source\",\"label\":\"Disclose source\",\"description\":\"Source code must be made available when the licensed material is distributed.\"},{\"tag\":\"same-license\",\"label\":\"Same license\",\"description\":\"Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used.\"}],\"limitations\":[{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":true,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"                    GNU GENERAL PUBLIC LICENSE\\n                       Version 3, 29 June 2007\\n\\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\\n Everyone is permitted to copy and distribute verbatim copies\\n of this license document, but changing it is not allowed.\\n\\n                            Preamble\\n\\n  The GNU General Public License is a free, copyleft license for\\nsoftware and other kinds of works.\\n\\n  The licenses for most software and other practical works are designed\\nto take away your freedom to share and change the works.  By contrast,\\nthe GNU General Public License is intended to guarantee your freedom to\\nshare and change all versions of a program--to make sure it remains free\\nsoftware for all its users.  We, the Free Software Foundation, use the\\nGNU General Public License for most of our software; it applies also to\\nany other work released this way by its authors.  You can apply it to\\nyour programs, too.\\n\\n  When we speak of free software, we are referring to freedom, not\\nprice.  Our General Public Licenses are designed to make sure that you\\nhave the freedom to distribute copies of free software (and charge for\\nthem if you wish), that you receive source code or can get it if you\\nwant it, that you can change the software or use pieces of it in new\\nfree programs, and that you know you can do these things.\\n\\n  To protect your rights, we need to prevent others from denying you\\nthese rights or asking you to surrender the rights.  Therefore, you have\\ncertain responsibilities if you distribute copies of the software, or if\\nyou modify it: responsibilities to respect the freedom of others.\\n\\n  For example, if you distribute copies of such a program, whether\\ngratis or for a fee, you must pass on to the recipients the same\\nfreedoms that you received.  You must make sure that they, too, receive\\nor can get the source code.  And you must show them these terms so they\\nknow their rights.\\n\\n  Developers that use the GNU GPL protect your rights with two steps:\\n(1) assert copyright on the software, and (2) offer you this License\\ngiving you legal permission to copy, distribute and/or modify it.\\n\\n  For the developers' and authors' protection, the GPL clearly explains\\nthat there is no warranty for this free software.  For both users' and\\nauthors' sake, the GPL requires that modified versions be marked as\\nchanged, so that their problems will not be attributed erroneously to\\nauthors of previous versions.\\n\\n  Some devices are designed to deny users access to install or run\\nmodified versions of the software inside them, although the manufacturer\\ncan do so.  This is fundamentally incompatible with the aim of\\nprotecting users' freedom to change the software.  The systematic\\npattern of such abuse occurs in the area of products for individuals to\\nuse, which is precisely where it is most unacceptable.  Therefore, we\\nhave designed this version of the GPL to prohibit the practice for those\\nproducts.  If such problems arise substantially in other domains, we\\nstand ready to extend this provision to those domains in future versions\\nof the GPL, as needed to protect the freedom of users.\\n\\n  Finally, every program is threatened constantly by software patents.\\nStates should not allow patents to restrict development and use of\\nsoftware on general-purpose computers, but in those that do, we wish to\\navoid the special danger that patents applied to a free program could\\nmake it effectively proprietary.  To prevent this, the GPL assures that\\npatents cannot be used to render the program non-free.\\n\\n  The precise terms and conditions for copying, distribution and\\nmodification follow.\\n\\n                       TERMS AND CONDITIONS\\n\\n  0. Definitions.\\n\\n  \\\"This License\\\" refers to version 3 of the GNU General Public License.\\n\\n  \\\"Copyright\\\" also means copyright-like laws that apply to other kinds of\\nworks, such as semiconductor masks.\\n\\n  \\\"The Program\\\" refers to any copyrightable work licensed under this\\nLicense.  Each licensee is addressed as \\\"you\\\".  \\\"Licensees\\\" and\\n\\\"recipients\\\" may be individuals or organizations.\\n\\n  To \\\"modify\\\" a work means to copy from or adapt all or part of the work\\nin a fashion requiring copyright permission, other than the making of an\\nexact copy.  The resulting work is called a \\\"modified version\\\" of the\\nearlier work or a work \\\"based on\\\" the earlier work.\\n\\n  A \\\"covered work\\\" means either the unmodified Program or a work based\\non the Program.\\n\\n  To \\\"propagate\\\" a work means to do anything with it that, without\\npermission, would make you directly or secondarily liable for\\ninfringement under applicable copyright law, except executing it on a\\ncomputer or modifying a private copy.  Propagation includes copying,\\ndistribution (with or without modification), making available to the\\npublic, and in some countries other activities as well.\\n\\n  To \\\"convey\\\" a work means any kind of propagation that enables other\\nparties to make or receive copies.  Mere interaction with a user through\\na computer network, with no transfer of a copy, is not conveying.\\n\\n  An interactive user interface displays \\\"Appropriate Legal Notices\\\"\\nto the extent that it includes a convenient and prominently visible\\nfeature that (1) displays an appropriate copyright notice, and (2)\\ntells the user that there is no warranty for the work (except to the\\nextent that warranties are provided), that licensees may convey the\\nwork under this License, and how to view a copy of this License.  If\\nthe interface presents a list of user commands or options, such as a\\nmenu, a prominent item in the list meets this criterion.\\n\\n  1. Source Code.\\n\\n  The \\\"source code\\\" for a work means the preferred form of the work\\nfor making modifications to it.  \\\"Object code\\\" means any non-source\\nform of a work.\\n\\n  A \\\"Standard Interface\\\" means an interface that either is an official\\nstandard defined by a recognized standards body, or, in the case of\\ninterfaces specified for a particular programming language, one that\\nis widely used among developers working in that language.\\n\\n  The \\\"System Libraries\\\" of an executable work include anything, other\\nthan the work as a whole, that (a) is included in the normal form of\\npackaging a Major Component, but which is not part of that Major\\nComponent, and (b) serves only to enable use of the work with that\\nMajor Component, or to implement a Standard Interface for which an\\nimplementation is available to the public in source code form.  A\\n\\\"Major Component\\\", in this context, means a major essential component\\n(kernel, window system, and so on) of the specific operating system\\n(if any) on which the executable work runs, or a compiler used to\\nproduce the work, or an object code interpreter used to run it.\\n\\n  The \\\"Corresponding Source\\\" for a work in object code form means all\\nthe source code needed to generate, install, and (for an executable\\nwork) run the object code and to modify the work, including scripts to\\ncontrol those activities.  However, it does not include the work's\\nSystem Libraries, or general-purpose tools or generally available free\\nprograms which are used unmodified in performing those activities but\\nwhich are not part of the work.  For example, Corresponding Source\\nincludes interface definition files associated with source files for\\nthe work, and the source code for shared libraries and dynamically\\nlinked subprograms that the work is specifically designed to require,\\nsuch as by intimate data communication or control flow between those\\nsubprograms and other parts of the work.\\n\\n  The Corresponding Source need not include anything that users\\ncan regenerate automatically from other parts of the Corresponding\\nSource.\\n\\n  The Corresponding Source for a work in source code form is that\\nsame work.\\n\\n  2. Basic Permissions.\\n\\n  All rights granted under this License are granted for the term of\\ncopyright on the Program, and are irrevocable provided the stated\\nconditions are met.  This License explicitly affirms your unlimited\\npermission to run the unmodified Program.  The output from running a\\ncovered work is covered by this License only if the output, given its\\ncontent, constitutes a covered work.  This License acknowledges your\\nrights of fair use or other equivalent, as provided by copyright law.\\n\\n  You may make, run and propagate covered works that you do not\\nconvey, without conditions so long as your license otherwise remains\\nin force.  You may convey covered works to others for the sole purpose\\nof having them make modifications exclusively for you, or provide you\\nwith facilities for running those works, provided that you comply with\\nthe terms of this License in conveying all material for which you do\\nnot control copyright.  Those thus making or running the covered works\\nfor you must do so exclusively on your behalf, under your direction\\nand control, on terms that prohibit them from making any copies of\\nyour copyrighted material outside their relationship with you.\\n\\n  Conveying under any other circumstances is permitted solely under\\nthe conditions stated below.  Sublicensing is not allowed; section 10\\nmakes it unnecessary.\\n\\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\\n\\n  No covered work shall be deemed part of an effective technological\\nmeasure under any applicable law fulfilling obligations under article\\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\\nsimilar laws prohibiting or restricting circumvention of such\\nmeasures.\\n\\n  When you convey a covered work, you waive any legal power to forbid\\ncircumvention of technological measures to the extent such circumvention\\nis effected by exercising rights under this License with respect to\\nthe covered work, and you disclaim any intention to limit operation or\\nmodification of the work as a means of enforcing, against the work's\\nusers, your or third parties' legal rights to forbid circumvention of\\ntechnological measures.\\n\\n  4. Conveying Verbatim Copies.\\n\\n  You may convey verbatim copies of the Program's source code as you\\nreceive it, in any medium, provided that you conspicuously and\\nappropriately publish on each copy an appropriate copyright notice;\\nkeep intact all notices stating that this License and any\\nnon-permissive terms added in accord with section 7 apply to the code;\\nkeep intact all notices of the absence of any warranty; and give all\\nrecipients a copy of this License along with the Program.\\n\\n  You may charge any price or no price for each copy that you convey,\\nand you may offer support or warranty protection for a fee.\\n\\n  5. Conveying Modified Source Versions.\\n\\n  You may convey a work based on the Program, or the modifications to\\nproduce it from the Program, in the form of source code under the\\nterms of section 4, provided that you also meet all of these conditions:\\n\\n    a) The work must carry prominent notices stating that you modified\\n    it, and giving a relevant date.\\n\\n    b) The work must carry prominent notices stating that it is\\n    released under this License and any conditions added under section\\n    7.  This requirement modifies the requirement in section 4 to\\n    \\\"keep intact all notices\\\".\\n\\n    c) You must license the entire work, as a whole, under this\\n    License to anyone who comes into possession of a copy.  This\\n    License will therefore apply, along with any applicable section 7\\n    additional terms, to the whole of the work, and all its parts,\\n    regardless of how they are packaged.  This License gives no\\n    permission to license the work in any other way, but it does not\\n    invalidate such permission if you have separately received it.\\n\\n    d) If the work has interactive user interfaces, each must display\\n    Appropriate Legal Notices; however, if the Program has interactive\\n    interfaces that do not display Appropriate Legal Notices, your\\n    work need not make them do so.\\n\\n  A compilation of a covered work with other separate and independent\\nworks, which are not by their nature extensions of the covered work,\\nand which are not combined with it such as to form a larger program,\\nin or on a volume of a storage or distribution medium, is called an\\n\\\"aggregate\\\" if the compilation and its resulting copyright are not\\nused to limit the access or legal rights of the compilation's users\\nbeyond what the individual works permit.  Inclusion of a covered work\\nin an aggregate does not cause this License to apply to the other\\nparts of the aggregate.\\n\\n  6. Conveying Non-Source Forms.\\n\\n  You may convey a covered work in object code form under the terms\\nof sections 4 and 5, provided that you also convey the\\nmachine-readable Corresponding Source under the terms of this License,\\nin one of these ways:\\n\\n    a) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by the\\n    Corresponding Source fixed on a durable physical medium\\n    customarily used for software interchange.\\n\\n    b) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by a\\n    written offer, valid for at least three years and valid for as\\n    long as you offer spare parts or customer support for that product\\n    model, to give anyone who possesses the object code either (1) a\\n    copy of the Corresponding Source for all the software in the\\n    product that is covered by this License, on a durable physical\\n    medium customarily used for software interchange, for a price no\\n    more than your reasonable cost of physically performing this\\n    conveying of source, or (2) access to copy the\\n    Corresponding Source from a network server at no charge.\\n\\n    c) Convey individual copies of the object code with a copy of the\\n    written offer to provide the Corresponding Source.  This\\n    alternative is allowed only occasionally and noncommercially, and\\n    only if you received the object code with such an offer, in accord\\n    with subsection 6b.\\n\\n    d) Convey the object code by offering access from a designated\\n    place (gratis or for a charge), and offer equivalent access to the\\n    Corresponding Source in the same way through the same place at no\\n    further charge.  You need not require recipients to copy the\\n    Corresponding Source along with the object code.  If the place to\\n    copy the object code is a network server, the Corresponding Source\\n    may be on a different server (operated by you or a third party)\\n    that supports equivalent copying facilities, provided you maintain\\n    clear directions next to the object code saying where to find the\\n    Corresponding Source.  Regardless of what server hosts the\\n    Corresponding Source, you remain obligated to ensure that it is\\n    available for as long as needed to satisfy these requirements.\\n\\n    e) Convey the object code using peer-to-peer transmission, provided\\n    you inform other peers where the object code and Corresponding\\n    Source of the work are being offered to the general public at no\\n    charge under subsection 6d.\\n\\n  A separable portion of the object code, whose source code is excluded\\nfrom the Corresponding Source as a System Library, need not be\\nincluded in conveying the object code work.\\n\\n  A \\\"User Product\\\" is either (1) a \\\"consumer product\\\", which means any\\ntangible personal property which is normally used for personal, family,\\nor household purposes, or (2) anything designed or sold for incorporation\\ninto a dwelling.  In determining whether a product is a consumer product,\\ndoubtful cases shall be resolved in favor of coverage.  For a particular\\nproduct received by a particular user, \\\"normally used\\\" refers to a\\ntypical or common use of that class of product, regardless of the status\\nof the particular user or of the way in which the particular user\\nactually uses, or expects or is expected to use, the product.  A product\\nis a consumer product regardless of whether the product has substantial\\ncommercial, industrial or non-consumer uses, unless such uses represent\\nthe only significant mode of use of the product.\\n\\n  \\\"Installation Information\\\" for a User Product means any methods,\\nprocedures, authorization keys, or other information required to install\\nand execute modified versions of a covered work in that User Product from\\na modified version of its Corresponding Source.  The information must\\nsuffice to ensure that the continued functioning of the modified object\\ncode is in no case prevented or interfered with solely because\\nmodification has been made.\\n\\n  If you convey an object code work under this section in, or with, or\\nspecifically for use in, a User Product, and the conveying occurs as\\npart of a transaction in which the right of possession and use of the\\nUser Product is transferred to the recipient in perpetuity or for a\\nfixed term (regardless of how the transaction is characterized), the\\nCorresponding Source conveyed under this section must be accompanied\\nby the Installation Information.  But this requirement does not apply\\nif neither you nor any third party retains the ability to install\\nmodified object code on the User Product (for example, the work has\\nbeen installed in ROM).\\n\\n  The requirement to provide Installation Information does not include a\\nrequirement to continue to provide support service, warranty, or updates\\nfor a work that has been modified or installed by the recipient, or for\\nthe User Product in which it has been modified or installed.  Access to a\\nnetwork may be denied when the modification itself materially and\\nadversely affects the operation of the network or violates the rules and\\nprotocols for communication across the network.\\n\\n  Corresponding Source conveyed, and Installation Information provided,\\nin accord with this section must be in a format that is publicly\\ndocumented (and with an implementation available to the public in\\nsource code form), and must require no special password or key for\\nunpacking, reading or copying.\\n\\n  7. Additional Terms.\\n\\n  \\\"Additional permissions\\\" are terms that supplement the terms of this\\nLicense by making exceptions from one or more of its conditions.\\nAdditional permissions that are applicable to the entire Program shall\\nbe treated as though they were included in this License, to the extent\\nthat they are valid under applicable law.  If additional permissions\\napply only to part of the Program, that part may be used separately\\nunder those permissions, but the entire Program remains governed by\\nthis License without regard to the additional permissions.\\n\\n  When you convey a copy of a covered work, you may at your option\\nremove any additional permissions from that copy, or from any part of\\nit.  (Additional permissions may be written to require their own\\nremoval in certain cases when you modify the work.)  You may place\\nadditional permissions on material, added by you to a covered work,\\nfor which you have or can give appropriate copyright permission.\\n\\n  Notwithstanding any other provision of this License, for material you\\nadd to a covered work, you may (if authorized by the copyright holders of\\nthat material) supplement the terms of this License with terms:\\n\\n    a) Disclaiming warranty or limiting liability differently from the\\n    terms of sections 15 and 16 of this License; or\\n\\n    b) Requiring preservation of specified reasonable legal notices or\\n    author attributions in that material or in the Appropriate Legal\\n    Notices displayed by works containing it; or\\n\\n    c) Prohibiting misrepresentation of the origin of that material, or\\n    requiring that modified versions of such material be marked in\\n    reasonable ways as different from the original version; or\\n\\n    d) Limiting the use for publicity purposes of names of licensors or\\n    authors of the material; or\\n\\n    e) Declining to grant rights under trademark law for use of some\\n    trade names, trademarks, or service marks; or\\n\\n    f) Requiring indemnification of licensors and authors of that\\n    material by anyone who conveys the material (or modified versions of\\n    it) with contractual assumptions of liability to the recipient, for\\n    any liability that these contractual assumptions directly impose on\\n    those licensors and authors.\\n\\n  All other non-permissive additional terms are considered \\\"further\\nrestrictions\\\" within the meaning of section 10.  If the Program as you\\nreceived it, or any part of it, contains a notice stating that it is\\ngoverned by this License along with a term that is a further\\nrestriction, you may remove that term.  If a license document contains\\na further restriction but permits relicensing or conveying under this\\nLicense, you may add to a covered work material governed by the terms\\nof that license document, provided that the further restriction does\\nnot survive such relicensing or conveying.\\n\\n  If you add terms to a covered work in accord with this section, you\\nmust place, in the relevant source files, a statement of the\\nadditional terms that apply to those files, or a notice indicating\\nwhere to find the applicable terms.\\n\\n  Additional terms, permissive or non-permissive, may be stated in the\\nform of a separately written license, or stated as exceptions;\\nthe above requirements apply either way.\\n\\n  8. Termination.\\n\\n  You may not propagate or modify a covered work except as expressly\\nprovided under this License.  Any attempt otherwise to propagate or\\nmodify it is void, and will automatically terminate your rights under\\nthis License (including any patent licenses granted under the third\\nparagraph of section 11).\\n\\n  However, if you cease all violation of this License, then your\\nlicense from a particular copyright holder is reinstated (a)\\nprovisionally, unless and until the copyright holder explicitly and\\nfinally terminates your license, and (b) permanently, if the copyright\\nholder fails to notify you of the violation by some reasonable means\\nprior to 60 days after the cessation.\\n\\n  Moreover, your license from a particular copyright holder is\\nreinstated permanently if the copyright holder notifies you of the\\nviolation by some reasonable means, this is the first time you have\\nreceived notice of violation of this License (for any work) from that\\ncopyright holder, and you cure the violation prior to 30 days after\\nyour receipt of the notice.\\n\\n  Termination of your rights under this section does not terminate the\\nlicenses of parties who have received copies or rights from you under\\nthis License.  If your rights have been terminated and not permanently\\nreinstated, you do not qualify to receive new licenses for the same\\nmaterial under section 10.\\n\\n  9. Acceptance Not Required for Having Copies.\\n\\n  You are not required to accept this License in order to receive or\\nrun a copy of the Program.  Ancillary propagation of a covered work\\noccurring solely as a consequence of using peer-to-peer transmission\\nto receive a copy likewise does not require acceptance.  However,\\nnothing other than this License grants you permission to propagate or\\nmodify any covered work.  These actions infringe copyright if you do\\nnot accept this License.  Therefore, by modifying or propagating a\\ncovered work, you indicate your acceptance of this License to do so.\\n\\n  10. Automatic Licensing of Downstream Recipients.\\n\\n  Each time you convey a covered work, the recipient automatically\\nreceives a license from the original licensors, to run, modify and\\npropagate that work, subject to this License.  You are not responsible\\nfor enforcing compliance by third parties with this License.\\n\\n  An \\\"entity transaction\\\" is a transaction transferring control of an\\norganization, or substantially all assets of one, or subdividing an\\norganization, or merging organizations.  If propagation of a covered\\nwork results from an entity transaction, each party to that\\ntransaction who receives a copy of the work also receives whatever\\nlicenses to the work the party's predecessor in interest had or could\\ngive under the previous paragraph, plus a right to possession of the\\nCorresponding Source of the work from the predecessor in interest, if\\nthe predecessor has it or can get it with reasonable efforts.\\n\\n  You may not impose any further restrictions on the exercise of the\\nrights granted or affirmed under this License.  For example, you may\\nnot impose a license fee, royalty, or other charge for exercise of\\nrights granted under this License, and you may not initiate litigation\\n(including a cross-claim or counterclaim in a lawsuit) alleging that\\nany patent claim is infringed by making, using, selling, offering for\\nsale, or importing the Program or any portion of it.\\n\\n  11. Patents.\\n\\n  A \\\"contributor\\\" is a copyright holder who authorizes use under this\\nLicense of the Program or a work on which the Program is based.  The\\nwork thus licensed is called the contributor's \\\"contributor version\\\".\\n\\n  A contributor's \\\"essential patent claims\\\" are all patent claims\\nowned or controlled by the contributor, whether already acquired or\\nhereafter acquired, that would be infringed by some manner, permitted\\nby this License, of making, using, or selling its contributor version,\\nbut do not include claims that would be infringed only as a\\nconsequence of further modification of the contributor version.  For\\npurposes of this definition, \\\"control\\\" includes the right to grant\\npatent sublicenses in a manner consistent with the requirements of\\nthis License.\\n\\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\\npatent license under the contributor's essential patent claims, to\\nmake, use, sell, offer for sale, import and otherwise run, modify and\\npropagate the contents of its contributor version.\\n\\n  In the following three paragraphs, a \\\"patent license\\\" is any express\\nagreement or commitment, however denominated, not to enforce a patent\\n(such as an express permission to practice a patent or covenant not to\\nsue for patent infringement).  To \\\"grant\\\" such a patent license to a\\nparty means to make such an agreement or commitment not to enforce a\\npatent against the party.\\n\\n  If you convey a covered work, knowingly relying on a patent license,\\nand the Corresponding Source of the work is not available for anyone\\nto copy, free of charge and under the terms of this License, through a\\npublicly available network server or other readily accessible means,\\nthen you must either (1) cause the Corresponding Source to be so\\navailable, or (2) arrange to deprive yourself of the benefit of the\\npatent license for this particular work, or (3) arrange, in a manner\\nconsistent with the requirements of this License, to extend the patent\\nlicense to downstream recipients.  \\\"Knowingly relying\\\" means you have\\nactual knowledge that, but for the patent license, your conveying the\\ncovered work in a country, or your recipient's use of the covered work\\nin a country, would infringe one or more identifiable patents in that\\ncountry that you have reason to believe are valid.\\n\\n  If, pursuant to or in connection with a single transaction or\\narrangement, you convey, or propagate by procuring conveyance of, a\\ncovered work, and grant a patent license to some of the parties\\nreceiving the covered work authorizing them to use, propagate, modify\\nor convey a specific copy of the covered work, then the patent license\\nyou grant is automatically extended to all recipients of the covered\\nwork and works based on it.\\n\\n  A patent license is \\\"discriminatory\\\" if it does not include within\\nthe scope of its coverage, prohibits the exercise of, or is\\nconditioned on the non-exercise of one or more of the rights that are\\nspecifically granted under this License.  You may not convey a covered\\nwork if you are a party to an arrangement with a third party that is\\nin the business of distributing software, under which you make payment\\nto the third party based on the extent of your activity of conveying\\nthe work, and under which the third party grants, to any of the\\nparties who would receive the covered work from you, a discriminatory\\npatent license (a) in connection with copies of the covered work\\nconveyed by you (or copies made from those copies), or (b) primarily\\nfor and in connection with specific products or compilations that\\ncontain the covered work, unless you entered into that arrangement,\\nor that patent license was granted, prior to 28 March 2007.\\n\\n  Nothing in this License shall be construed as excluding or limiting\\nany implied license or other defenses to infringement that may\\notherwise be available to you under applicable patent law.\\n\\n  12. No Surrender of Others' Freedom.\\n\\n  If conditions are imposed on you (whether by court order, agreement or\\notherwise) that contradict the conditions of this License, they do not\\nexcuse you from the conditions of this License.  If you cannot convey a\\ncovered work so as to satisfy simultaneously your obligations under this\\nLicense and any other pertinent obligations, then as a consequence you may\\nnot convey it at all.  For example, if you agree to terms that obligate you\\nto collect a royalty for further conveying from those to whom you convey\\nthe Program, the only way you could satisfy both those terms and this\\nLicense would be to refrain entirely from conveying the Program.\\n\\n  13. Use with the GNU Affero General Public License.\\n\\n  Notwithstanding any other provision of this License, you have\\npermission to link or combine any covered work with a work licensed\\nunder version 3 of the GNU Affero General Public License into a single\\ncombined work, and to convey the resulting work.  The terms of this\\nLicense will continue to apply to the part which is the covered work,\\nbut the special requirements of the GNU Affero General Public License,\\nsection 13, concerning interaction through a network will apply to the\\ncombination as such.\\n\\n  14. Revised Versions of this License.\\n\\n  The Free Software Foundation may publish revised and/or new versions of\\nthe GNU General Public License from time to time.  Such new versions will\\nbe similar in spirit to the present version, but may differ in detail to\\naddress new problems or concerns.\\n\\n  Each version is given a distinguishing version number.  If the\\nProgram specifies that a certain numbered version of the GNU General\\nPublic License \\\"or any later version\\\" applies to it, you have the\\noption of following the terms and conditions either of that numbered\\nversion or of any later version published by the Free Software\\nFoundation.  If the Program does not specify a version number of the\\nGNU General Public License, you may choose any version ever published\\nby the Free Software Foundation.\\n\\n  If the Program specifies that a proxy can decide which future\\nversions of the GNU General Public License can be used, that proxy's\\npublic statement of acceptance of a version permanently authorizes you\\nto choose that version for the Program.\\n\\n  Later license versions may give you additional or different\\npermissions.  However, no additional obligations are imposed on any\\nauthor or copyright holder as a result of your choosing to follow a\\nlater version.\\n\\n  15. Disclaimer of Warranty.\\n\\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\n\\n  16. Limitation of Liability.\\n\\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\nSUCH DAMAGES.\\n\\n  17. Interpretation of Sections 15 and 16.\\n\\n  If the disclaimer of warranty and limitation of liability provided\\nabove cannot be given local legal effect according to their terms,\\nreviewing courts shall apply local law that most closely approximates\\nan absolute waiver of all civil liability in connection with the\\nProgram, unless a warranty or assumption of liability accompanies a\\ncopy of the Program in return for a fee.\\n\\n                     END OF TERMS AND CONDITIONS\\n\\n            How to Apply These Terms to Your New Programs\\n\\n  If you develop a new program, and you want it to be of the greatest\\npossible use to the public, the best way to achieve this is to make it\\nfree software which everyone can redistribute and change under these terms.\\n\\n  To do so, attach the following notices to the program.  It is safest\\nto attach them to the start of each source file to most effectively\\nstate the exclusion of warranty; and each file should have at least\\nthe \\\"copyright\\\" line and a pointer to where the full notice is found.\\n\\n    <one line to give the program's name and a brief idea of what it does.>\\n    Copyright (C) <year>  <name of author>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\nAlso add information on how to contact you by electronic and paper mail.\\n\\n  If the program does terminal interaction, make it output a short\\nnotice like this when it starts in an interactive mode:\\n\\n    <program>  Copyright (C) <year>  <name of author>\\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\\n    This is free software, and you are welcome to redistribute it\\n    under certain conditions; type `show c' for details.\\n\\nThe hypothetical commands `show w' and `show c' should show the appropriate\\nparts of the General Public License.  Of course, your program's commands\\nmight be different; for a GUI interface, you would use an \\\"about box\\\".\\n\\n  You should also get your employer (if you work as a programmer) or school,\\nif any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.\\nFor more information on this, and how to apply and follow the GNU GPL, see\\n<https://www.gnu.org/licenses/>.\\n\\n  The GNU General Public License does not permit incorporating your program\\ninto proprietary programs.  If your program is a subroutine library, you\\nmay consider it more useful to permit linking proprietary applications with\\nthe library.  If this is what you want to do, use the GNU Lesser General\\nPublic License instead of this License.  But first, please read\\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\\n\",\"content_hash\":\"7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd\",\"content_normalized\":\"everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"GPL-3.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "gpl-3.0",
                                        "spdx_id": "GPL-3.0",
                                        "meta": {
                                            "title": "GNU General Public License v3.0",
                                            "source": "https://spdx.org/licenses/GPL-3.0.html",
                                            "description": "Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.",
                                            "how": "Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Ansible": "https://github.com/ansible/ansible/blob/devel/COPYING",
                                                "Bash": "https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING",
                                                "GIMP": "https://git.gnome.org/browse/gimp/tree/COPYING"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": "GNU GPLv3",
                                            "note": "The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license."
                                        },
                                        "url": "http://choosealicense.com/licenses/gpl-3.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                },
                                                {
                                                    "tag": "disclose-source",
                                                    "label": "Disclose source",
                                                    "description": "Source code must be made available when the licensed material is distributed."
                                                },
                                                {
                                                    "tag": "same-license",
                                                    "label": "Same license",
                                                    "description": "Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": true,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n",
                                        "content_hash": "7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd",
                                        "content_normalized": "everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "GPL-3.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                },
                "QC.Lic02.1": {
                    "description": "Does the code use an Open Source Initiative's popular-recognized license?",
                    "requirement_level": "MAY",
                    "hint": "The Open Source Initiative (OSI) sets out the requirements for software to be legally declared as Open Source. OSI provides a list of popular licenses that shall match most of the demands. The license in use shall be in the list of <a href=\"https://opensource.org/license-list.html\" target=\"_blank\">OSI popular licenses</a> for this criterion to be successful",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "License GPL-3.0 is listed under the Open Source Initiative popular category",
                            "plugin": {
                                "name": "report2sqaaas-plugin-licensee",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "licensee",
                                "lang": "license",
                                "version": "9.17.0",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-licensee:9.17.0",
                                    "reviewed": "2021-06-28"
                                },
                                "ci": {
                                    "name": "QC.Lic github.com/bcobo/SIRENA licensee",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "licensee detect . --confidence 60 --json"
                                    ],
                                    "stdout_text": "{\"licenses\":[{\"key\":\"gpl-3.0\",\"spdx_id\":\"GPL-3.0\",\"meta\":{\"title\":\"GNU General Public License v3.0\",\"source\":\"https://spdx.org/licenses/GPL-3.0.html\",\"description\":\"Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.\",\"how\":\"Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.\",\"using\":{\"Ansible\":\"https://github.com/ansible/ansible/blob/devel/COPYING\",\"Bash\":\"https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING\",\"GIMP\":\"https://git.gnome.org/browse/gimp/tree/COPYING\"},\"featured\":true,\"hidden\":false,\"nickname\":\"GNU GPLv3\",\"note\":\"The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license.\"},\"url\":\"http://choosealicense.com/licenses/gpl-3.0/\",\"rules\":{\"permissions\":[{\"tag\":\"commercial-use\",\"label\":\"Commercial use\",\"description\":\"The licensed material and derivatives may be used for commercial purposes.\"},{\"tag\":\"modifications\",\"label\":\"Modification\",\"description\":\"The licensed material may be modified.\"},{\"tag\":\"distribution\",\"label\":\"Distribution\",\"description\":\"The licensed material may be distributed.\"},{\"tag\":\"patent-use\",\"label\":\"Patent use\",\"description\":\"This license provides an express grant of patent rights from contributors.\"},{\"tag\":\"private-use\",\"label\":\"Private use\",\"description\":\"The licensed material may be used and modified in private.\"}],\"conditions\":[{\"tag\":\"include-copyright\",\"label\":\"License and copyright notice\",\"description\":\"A copy of the license and copyright notice must be included with the licensed material.\"},{\"tag\":\"document-changes\",\"label\":\"State changes\",\"description\":\"Changes made to the licensed material must be documented.\"},{\"tag\":\"disclose-source\",\"label\":\"Disclose source\",\"description\":\"Source code must be made available when the licensed material is distributed.\"},{\"tag\":\"same-license\",\"label\":\"Same license\",\"description\":\"Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used.\"}],\"limitations\":[{\"tag\":\"liability\",\"label\":\"Liability\",\"description\":\"This license includes a limitation of liability.\"},{\"tag\":\"warranty\",\"label\":\"Warranty\",\"description\":\"This license explicitly states that it does NOT provide any warranty.\"}]},\"fields\":[],\"other\":false,\"gpl\":true,\"lgpl\":false,\"cc\":false}],\"matched_files\":[{\"filename\":\"LICENSE\",\"content\":\"                    GNU GENERAL PUBLIC LICENSE\\n                       Version 3, 29 June 2007\\n\\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\\n Everyone is permitted to copy and distribute verbatim copies\\n of this license document, but changing it is not allowed.\\n\\n                            Preamble\\n\\n  The GNU General Public License is a free, copyleft license for\\nsoftware and other kinds of works.\\n\\n  The licenses for most software and other practical works are designed\\nto take away your freedom to share and change the works.  By contrast,\\nthe GNU General Public License is intended to guarantee your freedom to\\nshare and change all versions of a program--to make sure it remains free\\nsoftware for all its users.  We, the Free Software Foundation, use the\\nGNU General Public License for most of our software; it applies also to\\nany other work released this way by its authors.  You can apply it to\\nyour programs, too.\\n\\n  When we speak of free software, we are referring to freedom, not\\nprice.  Our General Public Licenses are designed to make sure that you\\nhave the freedom to distribute copies of free software (and charge for\\nthem if you wish), that you receive source code or can get it if you\\nwant it, that you can change the software or use pieces of it in new\\nfree programs, and that you know you can do these things.\\n\\n  To protect your rights, we need to prevent others from denying you\\nthese rights or asking you to surrender the rights.  Therefore, you have\\ncertain responsibilities if you distribute copies of the software, or if\\nyou modify it: responsibilities to respect the freedom of others.\\n\\n  For example, if you distribute copies of such a program, whether\\ngratis or for a fee, you must pass on to the recipients the same\\nfreedoms that you received.  You must make sure that they, too, receive\\nor can get the source code.  And you must show them these terms so they\\nknow their rights.\\n\\n  Developers that use the GNU GPL protect your rights with two steps:\\n(1) assert copyright on the software, and (2) offer you this License\\ngiving you legal permission to copy, distribute and/or modify it.\\n\\n  For the developers' and authors' protection, the GPL clearly explains\\nthat there is no warranty for this free software.  For both users' and\\nauthors' sake, the GPL requires that modified versions be marked as\\nchanged, so that their problems will not be attributed erroneously to\\nauthors of previous versions.\\n\\n  Some devices are designed to deny users access to install or run\\nmodified versions of the software inside them, although the manufacturer\\ncan do so.  This is fundamentally incompatible with the aim of\\nprotecting users' freedom to change the software.  The systematic\\npattern of such abuse occurs in the area of products for individuals to\\nuse, which is precisely where it is most unacceptable.  Therefore, we\\nhave designed this version of the GPL to prohibit the practice for those\\nproducts.  If such problems arise substantially in other domains, we\\nstand ready to extend this provision to those domains in future versions\\nof the GPL, as needed to protect the freedom of users.\\n\\n  Finally, every program is threatened constantly by software patents.\\nStates should not allow patents to restrict development and use of\\nsoftware on general-purpose computers, but in those that do, we wish to\\navoid the special danger that patents applied to a free program could\\nmake it effectively proprietary.  To prevent this, the GPL assures that\\npatents cannot be used to render the program non-free.\\n\\n  The precise terms and conditions for copying, distribution and\\nmodification follow.\\n\\n                       TERMS AND CONDITIONS\\n\\n  0. Definitions.\\n\\n  \\\"This License\\\" refers to version 3 of the GNU General Public License.\\n\\n  \\\"Copyright\\\" also means copyright-like laws that apply to other kinds of\\nworks, such as semiconductor masks.\\n\\n  \\\"The Program\\\" refers to any copyrightable work licensed under this\\nLicense.  Each licensee is addressed as \\\"you\\\".  \\\"Licensees\\\" and\\n\\\"recipients\\\" may be individuals or organizations.\\n\\n  To \\\"modify\\\" a work means to copy from or adapt all or part of the work\\nin a fashion requiring copyright permission, other than the making of an\\nexact copy.  The resulting work is called a \\\"modified version\\\" of the\\nearlier work or a work \\\"based on\\\" the earlier work.\\n\\n  A \\\"covered work\\\" means either the unmodified Program or a work based\\non the Program.\\n\\n  To \\\"propagate\\\" a work means to do anything with it that, without\\npermission, would make you directly or secondarily liable for\\ninfringement under applicable copyright law, except executing it on a\\ncomputer or modifying a private copy.  Propagation includes copying,\\ndistribution (with or without modification), making available to the\\npublic, and in some countries other activities as well.\\n\\n  To \\\"convey\\\" a work means any kind of propagation that enables other\\nparties to make or receive copies.  Mere interaction with a user through\\na computer network, with no transfer of a copy, is not conveying.\\n\\n  An interactive user interface displays \\\"Appropriate Legal Notices\\\"\\nto the extent that it includes a convenient and prominently visible\\nfeature that (1) displays an appropriate copyright notice, and (2)\\ntells the user that there is no warranty for the work (except to the\\nextent that warranties are provided), that licensees may convey the\\nwork under this License, and how to view a copy of this License.  If\\nthe interface presents a list of user commands or options, such as a\\nmenu, a prominent item in the list meets this criterion.\\n\\n  1. Source Code.\\n\\n  The \\\"source code\\\" for a work means the preferred form of the work\\nfor making modifications to it.  \\\"Object code\\\" means any non-source\\nform of a work.\\n\\n  A \\\"Standard Interface\\\" means an interface that either is an official\\nstandard defined by a recognized standards body, or, in the case of\\ninterfaces specified for a particular programming language, one that\\nis widely used among developers working in that language.\\n\\n  The \\\"System Libraries\\\" of an executable work include anything, other\\nthan the work as a whole, that (a) is included in the normal form of\\npackaging a Major Component, but which is not part of that Major\\nComponent, and (b) serves only to enable use of the work with that\\nMajor Component, or to implement a Standard Interface for which an\\nimplementation is available to the public in source code form.  A\\n\\\"Major Component\\\", in this context, means a major essential component\\n(kernel, window system, and so on) of the specific operating system\\n(if any) on which the executable work runs, or a compiler used to\\nproduce the work, or an object code interpreter used to run it.\\n\\n  The \\\"Corresponding Source\\\" for a work in object code form means all\\nthe source code needed to generate, install, and (for an executable\\nwork) run the object code and to modify the work, including scripts to\\ncontrol those activities.  However, it does not include the work's\\nSystem Libraries, or general-purpose tools or generally available free\\nprograms which are used unmodified in performing those activities but\\nwhich are not part of the work.  For example, Corresponding Source\\nincludes interface definition files associated with source files for\\nthe work, and the source code for shared libraries and dynamically\\nlinked subprograms that the work is specifically designed to require,\\nsuch as by intimate data communication or control flow between those\\nsubprograms and other parts of the work.\\n\\n  The Corresponding Source need not include anything that users\\ncan regenerate automatically from other parts of the Corresponding\\nSource.\\n\\n  The Corresponding Source for a work in source code form is that\\nsame work.\\n\\n  2. Basic Permissions.\\n\\n  All rights granted under this License are granted for the term of\\ncopyright on the Program, and are irrevocable provided the stated\\nconditions are met.  This License explicitly affirms your unlimited\\npermission to run the unmodified Program.  The output from running a\\ncovered work is covered by this License only if the output, given its\\ncontent, constitutes a covered work.  This License acknowledges your\\nrights of fair use or other equivalent, as provided by copyright law.\\n\\n  You may make, run and propagate covered works that you do not\\nconvey, without conditions so long as your license otherwise remains\\nin force.  You may convey covered works to others for the sole purpose\\nof having them make modifications exclusively for you, or provide you\\nwith facilities for running those works, provided that you comply with\\nthe terms of this License in conveying all material for which you do\\nnot control copyright.  Those thus making or running the covered works\\nfor you must do so exclusively on your behalf, under your direction\\nand control, on terms that prohibit them from making any copies of\\nyour copyrighted material outside their relationship with you.\\n\\n  Conveying under any other circumstances is permitted solely under\\nthe conditions stated below.  Sublicensing is not allowed; section 10\\nmakes it unnecessary.\\n\\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\\n\\n  No covered work shall be deemed part of an effective technological\\nmeasure under any applicable law fulfilling obligations under article\\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\\nsimilar laws prohibiting or restricting circumvention of such\\nmeasures.\\n\\n  When you convey a covered work, you waive any legal power to forbid\\ncircumvention of technological measures to the extent such circumvention\\nis effected by exercising rights under this License with respect to\\nthe covered work, and you disclaim any intention to limit operation or\\nmodification of the work as a means of enforcing, against the work's\\nusers, your or third parties' legal rights to forbid circumvention of\\ntechnological measures.\\n\\n  4. Conveying Verbatim Copies.\\n\\n  You may convey verbatim copies of the Program's source code as you\\nreceive it, in any medium, provided that you conspicuously and\\nappropriately publish on each copy an appropriate copyright notice;\\nkeep intact all notices stating that this License and any\\nnon-permissive terms added in accord with section 7 apply to the code;\\nkeep intact all notices of the absence of any warranty; and give all\\nrecipients a copy of this License along with the Program.\\n\\n  You may charge any price or no price for each copy that you convey,\\nand you may offer support or warranty protection for a fee.\\n\\n  5. Conveying Modified Source Versions.\\n\\n  You may convey a work based on the Program, or the modifications to\\nproduce it from the Program, in the form of source code under the\\nterms of section 4, provided that you also meet all of these conditions:\\n\\n    a) The work must carry prominent notices stating that you modified\\n    it, and giving a relevant date.\\n\\n    b) The work must carry prominent notices stating that it is\\n    released under this License and any conditions added under section\\n    7.  This requirement modifies the requirement in section 4 to\\n    \\\"keep intact all notices\\\".\\n\\n    c) You must license the entire work, as a whole, under this\\n    License to anyone who comes into possession of a copy.  This\\n    License will therefore apply, along with any applicable section 7\\n    additional terms, to the whole of the work, and all its parts,\\n    regardless of how they are packaged.  This License gives no\\n    permission to license the work in any other way, but it does not\\n    invalidate such permission if you have separately received it.\\n\\n    d) If the work has interactive user interfaces, each must display\\n    Appropriate Legal Notices; however, if the Program has interactive\\n    interfaces that do not display Appropriate Legal Notices, your\\n    work need not make them do so.\\n\\n  A compilation of a covered work with other separate and independent\\nworks, which are not by their nature extensions of the covered work,\\nand which are not combined with it such as to form a larger program,\\nin or on a volume of a storage or distribution medium, is called an\\n\\\"aggregate\\\" if the compilation and its resulting copyright are not\\nused to limit the access or legal rights of the compilation's users\\nbeyond what the individual works permit.  Inclusion of a covered work\\nin an aggregate does not cause this License to apply to the other\\nparts of the aggregate.\\n\\n  6. Conveying Non-Source Forms.\\n\\n  You may convey a covered work in object code form under the terms\\nof sections 4 and 5, provided that you also convey the\\nmachine-readable Corresponding Source under the terms of this License,\\nin one of these ways:\\n\\n    a) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by the\\n    Corresponding Source fixed on a durable physical medium\\n    customarily used for software interchange.\\n\\n    b) Convey the object code in, or embodied in, a physical product\\n    (including a physical distribution medium), accompanied by a\\n    written offer, valid for at least three years and valid for as\\n    long as you offer spare parts or customer support for that product\\n    model, to give anyone who possesses the object code either (1) a\\n    copy of the Corresponding Source for all the software in the\\n    product that is covered by this License, on a durable physical\\n    medium customarily used for software interchange, for a price no\\n    more than your reasonable cost of physically performing this\\n    conveying of source, or (2) access to copy the\\n    Corresponding Source from a network server at no charge.\\n\\n    c) Convey individual copies of the object code with a copy of the\\n    written offer to provide the Corresponding Source.  This\\n    alternative is allowed only occasionally and noncommercially, and\\n    only if you received the object code with such an offer, in accord\\n    with subsection 6b.\\n\\n    d) Convey the object code by offering access from a designated\\n    place (gratis or for a charge), and offer equivalent access to the\\n    Corresponding Source in the same way through the same place at no\\n    further charge.  You need not require recipients to copy the\\n    Corresponding Source along with the object code.  If the place to\\n    copy the object code is a network server, the Corresponding Source\\n    may be on a different server (operated by you or a third party)\\n    that supports equivalent copying facilities, provided you maintain\\n    clear directions next to the object code saying where to find the\\n    Corresponding Source.  Regardless of what server hosts the\\n    Corresponding Source, you remain obligated to ensure that it is\\n    available for as long as needed to satisfy these requirements.\\n\\n    e) Convey the object code using peer-to-peer transmission, provided\\n    you inform other peers where the object code and Corresponding\\n    Source of the work are being offered to the general public at no\\n    charge under subsection 6d.\\n\\n  A separable portion of the object code, whose source code is excluded\\nfrom the Corresponding Source as a System Library, need not be\\nincluded in conveying the object code work.\\n\\n  A \\\"User Product\\\" is either (1) a \\\"consumer product\\\", which means any\\ntangible personal property which is normally used for personal, family,\\nor household purposes, or (2) anything designed or sold for incorporation\\ninto a dwelling.  In determining whether a product is a consumer product,\\ndoubtful cases shall be resolved in favor of coverage.  For a particular\\nproduct received by a particular user, \\\"normally used\\\" refers to a\\ntypical or common use of that class of product, regardless of the status\\nof the particular user or of the way in which the particular user\\nactually uses, or expects or is expected to use, the product.  A product\\nis a consumer product regardless of whether the product has substantial\\ncommercial, industrial or non-consumer uses, unless such uses represent\\nthe only significant mode of use of the product.\\n\\n  \\\"Installation Information\\\" for a User Product means any methods,\\nprocedures, authorization keys, or other information required to install\\nand execute modified versions of a covered work in that User Product from\\na modified version of its Corresponding Source.  The information must\\nsuffice to ensure that the continued functioning of the modified object\\ncode is in no case prevented or interfered with solely because\\nmodification has been made.\\n\\n  If you convey an object code work under this section in, or with, or\\nspecifically for use in, a User Product, and the conveying occurs as\\npart of a transaction in which the right of possession and use of the\\nUser Product is transferred to the recipient in perpetuity or for a\\nfixed term (regardless of how the transaction is characterized), the\\nCorresponding Source conveyed under this section must be accompanied\\nby the Installation Information.  But this requirement does not apply\\nif neither you nor any third party retains the ability to install\\nmodified object code on the User Product (for example, the work has\\nbeen installed in ROM).\\n\\n  The requirement to provide Installation Information does not include a\\nrequirement to continue to provide support service, warranty, or updates\\nfor a work that has been modified or installed by the recipient, or for\\nthe User Product in which it has been modified or installed.  Access to a\\nnetwork may be denied when the modification itself materially and\\nadversely affects the operation of the network or violates the rules and\\nprotocols for communication across the network.\\n\\n  Corresponding Source conveyed, and Installation Information provided,\\nin accord with this section must be in a format that is publicly\\ndocumented (and with an implementation available to the public in\\nsource code form), and must require no special password or key for\\nunpacking, reading or copying.\\n\\n  7. Additional Terms.\\n\\n  \\\"Additional permissions\\\" are terms that supplement the terms of this\\nLicense by making exceptions from one or more of its conditions.\\nAdditional permissions that are applicable to the entire Program shall\\nbe treated as though they were included in this License, to the extent\\nthat they are valid under applicable law.  If additional permissions\\napply only to part of the Program, that part may be used separately\\nunder those permissions, but the entire Program remains governed by\\nthis License without regard to the additional permissions.\\n\\n  When you convey a copy of a covered work, you may at your option\\nremove any additional permissions from that copy, or from any part of\\nit.  (Additional permissions may be written to require their own\\nremoval in certain cases when you modify the work.)  You may place\\nadditional permissions on material, added by you to a covered work,\\nfor which you have or can give appropriate copyright permission.\\n\\n  Notwithstanding any other provision of this License, for material you\\nadd to a covered work, you may (if authorized by the copyright holders of\\nthat material) supplement the terms of this License with terms:\\n\\n    a) Disclaiming warranty or limiting liability differently from the\\n    terms of sections 15 and 16 of this License; or\\n\\n    b) Requiring preservation of specified reasonable legal notices or\\n    author attributions in that material or in the Appropriate Legal\\n    Notices displayed by works containing it; or\\n\\n    c) Prohibiting misrepresentation of the origin of that material, or\\n    requiring that modified versions of such material be marked in\\n    reasonable ways as different from the original version; or\\n\\n    d) Limiting the use for publicity purposes of names of licensors or\\n    authors of the material; or\\n\\n    e) Declining to grant rights under trademark law for use of some\\n    trade names, trademarks, or service marks; or\\n\\n    f) Requiring indemnification of licensors and authors of that\\n    material by anyone who conveys the material (or modified versions of\\n    it) with contractual assumptions of liability to the recipient, for\\n    any liability that these contractual assumptions directly impose on\\n    those licensors and authors.\\n\\n  All other non-permissive additional terms are considered \\\"further\\nrestrictions\\\" within the meaning of section 10.  If the Program as you\\nreceived it, or any part of it, contains a notice stating that it is\\ngoverned by this License along with a term that is a further\\nrestriction, you may remove that term.  If a license document contains\\na further restriction but permits relicensing or conveying under this\\nLicense, you may add to a covered work material governed by the terms\\nof that license document, provided that the further restriction does\\nnot survive such relicensing or conveying.\\n\\n  If you add terms to a covered work in accord with this section, you\\nmust place, in the relevant source files, a statement of the\\nadditional terms that apply to those files, or a notice indicating\\nwhere to find the applicable terms.\\n\\n  Additional terms, permissive or non-permissive, may be stated in the\\nform of a separately written license, or stated as exceptions;\\nthe above requirements apply either way.\\n\\n  8. Termination.\\n\\n  You may not propagate or modify a covered work except as expressly\\nprovided under this License.  Any attempt otherwise to propagate or\\nmodify it is void, and will automatically terminate your rights under\\nthis License (including any patent licenses granted under the third\\nparagraph of section 11).\\n\\n  However, if you cease all violation of this License, then your\\nlicense from a particular copyright holder is reinstated (a)\\nprovisionally, unless and until the copyright holder explicitly and\\nfinally terminates your license, and (b) permanently, if the copyright\\nholder fails to notify you of the violation by some reasonable means\\nprior to 60 days after the cessation.\\n\\n  Moreover, your license from a particular copyright holder is\\nreinstated permanently if the copyright holder notifies you of the\\nviolation by some reasonable means, this is the first time you have\\nreceived notice of violation of this License (for any work) from that\\ncopyright holder, and you cure the violation prior to 30 days after\\nyour receipt of the notice.\\n\\n  Termination of your rights under this section does not terminate the\\nlicenses of parties who have received copies or rights from you under\\nthis License.  If your rights have been terminated and not permanently\\nreinstated, you do not qualify to receive new licenses for the same\\nmaterial under section 10.\\n\\n  9. Acceptance Not Required for Having Copies.\\n\\n  You are not required to accept this License in order to receive or\\nrun a copy of the Program.  Ancillary propagation of a covered work\\noccurring solely as a consequence of using peer-to-peer transmission\\nto receive a copy likewise does not require acceptance.  However,\\nnothing other than this License grants you permission to propagate or\\nmodify any covered work.  These actions infringe copyright if you do\\nnot accept this License.  Therefore, by modifying or propagating a\\ncovered work, you indicate your acceptance of this License to do so.\\n\\n  10. Automatic Licensing of Downstream Recipients.\\n\\n  Each time you convey a covered work, the recipient automatically\\nreceives a license from the original licensors, to run, modify and\\npropagate that work, subject to this License.  You are not responsible\\nfor enforcing compliance by third parties with this License.\\n\\n  An \\\"entity transaction\\\" is a transaction transferring control of an\\norganization, or substantially all assets of one, or subdividing an\\norganization, or merging organizations.  If propagation of a covered\\nwork results from an entity transaction, each party to that\\ntransaction who receives a copy of the work also receives whatever\\nlicenses to the work the party's predecessor in interest had or could\\ngive under the previous paragraph, plus a right to possession of the\\nCorresponding Source of the work from the predecessor in interest, if\\nthe predecessor has it or can get it with reasonable efforts.\\n\\n  You may not impose any further restrictions on the exercise of the\\nrights granted or affirmed under this License.  For example, you may\\nnot impose a license fee, royalty, or other charge for exercise of\\nrights granted under this License, and you may not initiate litigation\\n(including a cross-claim or counterclaim in a lawsuit) alleging that\\nany patent claim is infringed by making, using, selling, offering for\\nsale, or importing the Program or any portion of it.\\n\\n  11. Patents.\\n\\n  A \\\"contributor\\\" is a copyright holder who authorizes use under this\\nLicense of the Program or a work on which the Program is based.  The\\nwork thus licensed is called the contributor's \\\"contributor version\\\".\\n\\n  A contributor's \\\"essential patent claims\\\" are all patent claims\\nowned or controlled by the contributor, whether already acquired or\\nhereafter acquired, that would be infringed by some manner, permitted\\nby this License, of making, using, or selling its contributor version,\\nbut do not include claims that would be infringed only as a\\nconsequence of further modification of the contributor version.  For\\npurposes of this definition, \\\"control\\\" includes the right to grant\\npatent sublicenses in a manner consistent with the requirements of\\nthis License.\\n\\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\\npatent license under the contributor's essential patent claims, to\\nmake, use, sell, offer for sale, import and otherwise run, modify and\\npropagate the contents of its contributor version.\\n\\n  In the following three paragraphs, a \\\"patent license\\\" is any express\\nagreement or commitment, however denominated, not to enforce a patent\\n(such as an express permission to practice a patent or covenant not to\\nsue for patent infringement).  To \\\"grant\\\" such a patent license to a\\nparty means to make such an agreement or commitment not to enforce a\\npatent against the party.\\n\\n  If you convey a covered work, knowingly relying on a patent license,\\nand the Corresponding Source of the work is not available for anyone\\nto copy, free of charge and under the terms of this License, through a\\npublicly available network server or other readily accessible means,\\nthen you must either (1) cause the Corresponding Source to be so\\navailable, or (2) arrange to deprive yourself of the benefit of the\\npatent license for this particular work, or (3) arrange, in a manner\\nconsistent with the requirements of this License, to extend the patent\\nlicense to downstream recipients.  \\\"Knowingly relying\\\" means you have\\nactual knowledge that, but for the patent license, your conveying the\\ncovered work in a country, or your recipient's use of the covered work\\nin a country, would infringe one or more identifiable patents in that\\ncountry that you have reason to believe are valid.\\n\\n  If, pursuant to or in connection with a single transaction or\\narrangement, you convey, or propagate by procuring conveyance of, a\\ncovered work, and grant a patent license to some of the parties\\nreceiving the covered work authorizing them to use, propagate, modify\\nor convey a specific copy of the covered work, then the patent license\\nyou grant is automatically extended to all recipients of the covered\\nwork and works based on it.\\n\\n  A patent license is \\\"discriminatory\\\" if it does not include within\\nthe scope of its coverage, prohibits the exercise of, or is\\nconditioned on the non-exercise of one or more of the rights that are\\nspecifically granted under this License.  You may not convey a covered\\nwork if you are a party to an arrangement with a third party that is\\nin the business of distributing software, under which you make payment\\nto the third party based on the extent of your activity of conveying\\nthe work, and under which the third party grants, to any of the\\nparties who would receive the covered work from you, a discriminatory\\npatent license (a) in connection with copies of the covered work\\nconveyed by you (or copies made from those copies), or (b) primarily\\nfor and in connection with specific products or compilations that\\ncontain the covered work, unless you entered into that arrangement,\\nor that patent license was granted, prior to 28 March 2007.\\n\\n  Nothing in this License shall be construed as excluding or limiting\\nany implied license or other defenses to infringement that may\\notherwise be available to you under applicable patent law.\\n\\n  12. No Surrender of Others' Freedom.\\n\\n  If conditions are imposed on you (whether by court order, agreement or\\notherwise) that contradict the conditions of this License, they do not\\nexcuse you from the conditions of this License.  If you cannot convey a\\ncovered work so as to satisfy simultaneously your obligations under this\\nLicense and any other pertinent obligations, then as a consequence you may\\nnot convey it at all.  For example, if you agree to terms that obligate you\\nto collect a royalty for further conveying from those to whom you convey\\nthe Program, the only way you could satisfy both those terms and this\\nLicense would be to refrain entirely from conveying the Program.\\n\\n  13. Use with the GNU Affero General Public License.\\n\\n  Notwithstanding any other provision of this License, you have\\npermission to link or combine any covered work with a work licensed\\nunder version 3 of the GNU Affero General Public License into a single\\ncombined work, and to convey the resulting work.  The terms of this\\nLicense will continue to apply to the part which is the covered work,\\nbut the special requirements of the GNU Affero General Public License,\\nsection 13, concerning interaction through a network will apply to the\\ncombination as such.\\n\\n  14. Revised Versions of this License.\\n\\n  The Free Software Foundation may publish revised and/or new versions of\\nthe GNU General Public License from time to time.  Such new versions will\\nbe similar in spirit to the present version, but may differ in detail to\\naddress new problems or concerns.\\n\\n  Each version is given a distinguishing version number.  If the\\nProgram specifies that a certain numbered version of the GNU General\\nPublic License \\\"or any later version\\\" applies to it, you have the\\noption of following the terms and conditions either of that numbered\\nversion or of any later version published by the Free Software\\nFoundation.  If the Program does not specify a version number of the\\nGNU General Public License, you may choose any version ever published\\nby the Free Software Foundation.\\n\\n  If the Program specifies that a proxy can decide which future\\nversions of the GNU General Public License can be used, that proxy's\\npublic statement of acceptance of a version permanently authorizes you\\nto choose that version for the Program.\\n\\n  Later license versions may give you additional or different\\npermissions.  However, no additional obligations are imposed on any\\nauthor or copyright holder as a result of your choosing to follow a\\nlater version.\\n\\n  15. Disclaimer of Warranty.\\n\\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\n\\n  16. Limitation of Liability.\\n\\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\nSUCH DAMAGES.\\n\\n  17. Interpretation of Sections 15 and 16.\\n\\n  If the disclaimer of warranty and limitation of liability provided\\nabove cannot be given local legal effect according to their terms,\\nreviewing courts shall apply local law that most closely approximates\\nan absolute waiver of all civil liability in connection with the\\nProgram, unless a warranty or assumption of liability accompanies a\\ncopy of the Program in return for a fee.\\n\\n                     END OF TERMS AND CONDITIONS\\n\\n            How to Apply These Terms to Your New Programs\\n\\n  If you develop a new program, and you want it to be of the greatest\\npossible use to the public, the best way to achieve this is to make it\\nfree software which everyone can redistribute and change under these terms.\\n\\n  To do so, attach the following notices to the program.  It is safest\\nto attach them to the start of each source file to most effectively\\nstate the exclusion of warranty; and each file should have at least\\nthe \\\"copyright\\\" line and a pointer to where the full notice is found.\\n\\n    <one line to give the program's name and a brief idea of what it does.>\\n    Copyright (C) <year>  <name of author>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\nAlso add information on how to contact you by electronic and paper mail.\\n\\n  If the program does terminal interaction, make it output a short\\nnotice like this when it starts in an interactive mode:\\n\\n    <program>  Copyright (C) <year>  <name of author>\\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\\n    This is free software, and you are welcome to redistribute it\\n    under certain conditions; type `show c' for details.\\n\\nThe hypothetical commands `show w' and `show c' should show the appropriate\\nparts of the General Public License.  Of course, your program's commands\\nmight be different; for a GUI interface, you would use an \\\"about box\\\".\\n\\n  You should also get your employer (if you work as a programmer) or school,\\nif any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.\\nFor more information on this, and how to apply and follow the GNU GPL, see\\n<https://www.gnu.org/licenses/>.\\n\\n  The GNU General Public License does not permit incorporating your program\\ninto proprietary programs.  If your program is a subroutine library, you\\nmay consider it more useful to permit linking proprietary applications with\\nthe library.  If this is what you want to do, use the GNU Lesser General\\nPublic License instead of this License.  But first, please read\\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\\n\",\"content_hash\":\"7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd\",\"content_normalized\":\"everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.\",\"matcher\":{\"name\":\"exact\",\"confidence\":100},\"matched_license\":\"GPL-3.0\",\"attribution\":null}]}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/79/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "licenses": [
                                    {
                                        "key": "gpl-3.0",
                                        "spdx_id": "GPL-3.0",
                                        "meta": {
                                            "title": "GNU General Public License v3.0",
                                            "source": "https://spdx.org/licenses/GPL-3.0.html",
                                            "description": "Permissions of this strong copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.",
                                            "how": "Create a text file (typically named COPYING, as per GNU conventions) in the root of your source code and copy the text of the license into the file.",
                                            "using": {
                                                "Ansible": "https://github.com/ansible/ansible/blob/devel/COPYING",
                                                "Bash": "https://git.savannah.gnu.org/cgit/bash.git/tree/COPYING",
                                                "GIMP": "https://git.gnome.org/browse/gimp/tree/COPYING"
                                            },
                                            "featured": true,
                                            "hidden": false,
                                            "nickname": "GNU GPLv3",
                                            "note": "The Free Software Foundation recommends taking the additional step of adding a boilerplate notice to the top of each file. The boilerplate can be found at the end of the license."
                                        },
                                        "url": "http://choosealicense.com/licenses/gpl-3.0/",
                                        "rules": {
                                            "permissions": [
                                                {
                                                    "tag": "commercial-use",
                                                    "label": "Commercial use",
                                                    "description": "The licensed material and derivatives may be used for commercial purposes."
                                                },
                                                {
                                                    "tag": "modifications",
                                                    "label": "Modification",
                                                    "description": "The licensed material may be modified."
                                                },
                                                {
                                                    "tag": "distribution",
                                                    "label": "Distribution",
                                                    "description": "The licensed material may be distributed."
                                                },
                                                {
                                                    "tag": "patent-use",
                                                    "label": "Patent use",
                                                    "description": "This license provides an express grant of patent rights from contributors."
                                                },
                                                {
                                                    "tag": "private-use",
                                                    "label": "Private use",
                                                    "description": "The licensed material may be used and modified in private."
                                                }
                                            ],
                                            "conditions": [
                                                {
                                                    "tag": "include-copyright",
                                                    "label": "License and copyright notice",
                                                    "description": "A copy of the license and copyright notice must be included with the licensed material."
                                                },
                                                {
                                                    "tag": "document-changes",
                                                    "label": "State changes",
                                                    "description": "Changes made to the licensed material must be documented."
                                                },
                                                {
                                                    "tag": "disclose-source",
                                                    "label": "Disclose source",
                                                    "description": "Source code must be made available when the licensed material is distributed."
                                                },
                                                {
                                                    "tag": "same-license",
                                                    "label": "Same license",
                                                    "description": "Modifications must be released under the same license when distributing the licensed material. In some cases a similar or related license may be used."
                                                }
                                            ],
                                            "limitations": [
                                                {
                                                    "tag": "liability",
                                                    "label": "Liability",
                                                    "description": "This license includes a limitation of liability."
                                                },
                                                {
                                                    "tag": "warranty",
                                                    "label": "Warranty",
                                                    "description": "This license explicitly states that it does NOT provide any warranty."
                                                }
                                            ]
                                        },
                                        "fields": [],
                                        "other": false,
                                        "gpl": true,
                                        "lgpl": false,
                                        "cc": false
                                    }
                                ],
                                "matched_files": [
                                    {
                                        "filename": "LICENSE",
                                        "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n",
                                        "content_hash": "7d4cdf499d39e2e1ce27b2878e22872f0f5a74dd",
                                        "content_normalized": "everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. preamble the gnu general public license is a free, copyleft license for software and other kinds of works. the licenses for most software and other practical works are designed to take away your freedom to share and change the works. by contrast, the gnu general public license is intended to guarantee your freedom to share and change all versions of a program-to make sure it remains free software for all its users. we, the free software foundation, use the gnu general public license for most of our software; it applies also to any other work released this way by its authors. you can apply it to your programs, too. when we speak of free software, we are referring to freedom, not price. our general public licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. to protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. for example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. you must make sure that they, too, receive or can get the source code. and you must show them these terms so they know their rights. developers that use the gnu gpl protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this license giving you legal permission to copy, distribute and/or modify it. for the developers' and authors' protection, the gpl clearly explains that there is no warranty for this free software. for both users' and authors' sake, the gpl requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. this is fundamentally incompatible with the aim of protecting users' freedom to change the software. the systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. therefore, we have designed this version of the gpl to prohibit the practice for those products. if such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the gpl, as needed to protect the freedom of users. finally, every program is threatened constantly by software patents. states should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. to prevent this, the gpl assures that patents cannot be used to render the program non-free. the precise terms and conditions for copying, distribution and modification follow. terms and conditions - definitions. 'this license' refers to version 3 of the gnu general public license. 'copyright' also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. 'the program' refers to any copyrightable work licensed under this license. each licensee is addressed as 'you'. 'licensees' and 'recipients' may be individuals or organizations. to 'modify' a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. the resulting work is called a 'modified version' of the earlier work or a work 'based on' the earlier work. a 'covered work' means either the unmodified program or a work based on the program. to 'propagate' a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. to 'convey' a work means any kind of propagation that enables other parties to make or receive copies. mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. an interactive user interface displays 'appropriate legal notices' to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this license, and how to view a copy of this license. if the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. - source code. the 'source code' for a work means the preferred form of the work for making modifications to it. 'object code' means any non-source form of a work. a 'standard interface' means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. the 'system libraries' of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a major component, but which is not part of that major component, and (b) serves only to enable use of the work with that major component, or to implement a standard interface for which an implementation is available to the public in source code form. a 'major component', in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. the 'corresponding source' for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. however, it does not include the work's system libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. for example, corresponding source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. the corresponding source need not include anything that users can regenerate automatically from other parts of the corresponding source. the corresponding source for a work in source code form is that same work. - basic permissions. all rights granted under this license are granted for the term of copyright on the program, and are irrevocable provided the stated conditions are met. this license explicitly affirms your unlimited permission to run the unmodified program. the output from running a covered work is covered by this license only if the output, given its content, constitutes a covered work. this license acknowledges your rights of fair use or other equivalent, as provided by copyright law. you may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. you may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this license in conveying all material for which you do not control copyright. those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. conveying under any other circumstances is permitted solely under the conditions stated below. sublicensing is not allowed; section 10 makes it unnecessary. - protecting users' legal rights from anti-circumvention law. no covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the wipo copyright treaty adopted on 20 december 1996, or similar laws prohibiting or restricting circumvention of such measures. when you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this license with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. - conveying verbatim copies. you may convey verbatim copies of the program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this license and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this license along with the program. you may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. - conveying modified source versions. you may convey a work based on the program, or the modifications to produce it from the program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: - the work must carry prominent notices stating that you modified it, and giving a relevant date. - the work must carry prominent notices stating that it is released under this license and any conditions added under section - this requirement modifies the requirement in section 4 to 'keep intact all notices'. - you must license the entire work, as a whole, under this license to anyone who comes into possession of a copy. this license will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. this license gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. - if the work has interactive user interfaces, each must display appropriate legal notices; however, if the program has interactive interfaces that do not display appropriate legal notices, your work need not make them do so. a compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an 'aggregate' if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. inclusion of a covered work in an aggregate does not cause this license to apply to the other parts of the aggregate. - conveying non-source forms. you may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable corresponding source under the terms of this license, in one of these ways: - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the corresponding source fixed on a durable physical medium customarily used for software interchange. - convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the corresponding source for all the software in the product that is covered by this license, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the corresponding source from a network server at no charge. - convey individual copies of the object code with a copy of the written offer to provide the corresponding source. this alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. - convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the corresponding source in the same way through the same place at no further charge. you need not require recipients to copy the corresponding source along with the object code. if the place to copy the object code is a network server, the corresponding source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the corresponding source. regardless of what server hosts the corresponding source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. - convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and corresponding source of the work are being offered to the general public at no charge under subsection 6d. a separable portion of the object code, whose source code is excluded from the corresponding source as a system library, need not be included in conveying the object code work. a 'user product' is either (1) a 'consumer product', which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. in determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. for a particular product received by a particular user, 'normally used' refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. a product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. 'installation information' for a user product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that user product from a modified version of its corresponding source. the information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. if you convey an object code work under this section in, or with, or specifically for use in, a user product, and the conveying occurs as part of a transaction in which the right of possession and use of the user product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the corresponding source conveyed under this section must be accompanied by the installation information. but this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the user product (for example, the work has been installed in rom). the requirement to provide installation information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the user product in which it has been modified or installed. access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. corresponding source conveyed, and installation information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. - additional terms. 'additional permissions' are terms that supplement the terms of this license by making exceptions from one or more of its conditions. additional permissions that are applicable to the entire program shall be treated as though they were included in this license, to the extent that they are valid under applicable law. if additional permissions apply only to part of the program, that part may be used separately under those permissions, but the entire program remains governed by this license without regard to the additional permissions. when you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (additional permissions may be written to require their own removal in certain cases when you modify the work.) you may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. notwithstanding any other provision of this license, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this license with terms: - disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this license; or - requiring preservation of specified reasonable legal notices or author attributions in that material or in the appropriate legal notices displayed by works containing it; or - prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or - limiting the use for publicity purposes of names of licensors or authors of the material; or - declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or - requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. all other non-permissive additional terms are considered 'further restrictions' within the meaning of section 10. if the program as you received it, or any part of it, contains a notice stating that it is governed by this license along with a term that is a further restriction, you may remove that term. if a license document contains a further restriction but permits relicensing or conveying under this license, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. if you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. - termination. you may not propagate or modify a covered work except as expressly provided under this license. any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this license (including any patent licenses granted under the third paragraph of section 11). however, if you cease all violation of this license, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this license (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this license. if your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. - acceptance not required for having copies. you are not required to accept this license in order to receive or run a copy of the program. ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. however, nothing other than this license grants you permission to propagate or modify any covered work. these actions infringe copyright if you do not accept this license. therefore, by modifying or propagating a covered work, you indicate your acceptance of this license to do so. - automatic licensing of downstream recipients. each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this license. you are not responsible for enforcing compliance by third parties with this license. an 'entity transaction' is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. if propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the corresponding source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. you may not impose any further restrictions on the exercise of the rights granted or affirmed under this license. for example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this license, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the program or any portion of it. - patents. a 'contributor' is a copyright holder who authorizes use under this license of the program or a work on which the program is based. the work thus licensed is called the contributor's 'contributor version'. a contributor's 'essential patent claims' are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this license, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. for purposes of this definition, 'control' includes the right to grant patent sublicenses in a manner consistent with the requirements of this license. each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. in the following three paragraphs, a 'patent license' is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). to 'grant' such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. if you convey a covered work, knowingly relying on a patent license, and the corresponding source of the work is not available for anyone to copy, free of charge and under the terms of this license, through a publicly available network server or other readily accessible means, then you must either (1) cause the corresponding source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this license, to extend the patent license to downstream recipients. 'knowingly relying' means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. if, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. a patent license is 'discriminatory' if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this license. you may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 march 2007. nothing in this license shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. - no surrender of others' freedom. if conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this license, they do not excuse you from the conditions of this license. if you cannot convey a covered work so as to satisfy simultaneously your obligations under this license and any other pertinent obligations, then as a consequence you may not convey it at all. for example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the program, the only way you could satisfy both those terms and this license would be to refrain entirely from conveying the program. - use with the gnu affero general public license. notwithstanding any other provision of this license, you have permission to link or combine any covered work with a work licensed under version 3 of the gnu affero general public license into a single combined work, and to convey the resulting work. the terms of this license will continue to apply to the part which is the covered work, but the special requirements of the gnu affero general public license, section 13, concerning interaction through a network will apply to the combination as such. - revised versions of this license. the free software foundation may publish revised and/or new versions of the gnu general public license from time to time. such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. each version is given a distinguishing version number. if the program specifies that a certain numbered version of the gnu general public license 'or any later version' applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the free software foundation. if the program does not specify a version number of the gnu general public license, you may choose any version ever published by the free software foundation. if the program specifies that a proxy can decide which future versions of the gnu general public license can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the program. later license versions may give you additional or different permissions. however, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. - disclaimer of warranty. there is no warranty for the program, to the extent permitted by applicable law. except when otherwise stated in writing the copyright holders and/or other parties provide the program 'as is' without warranty of any kind, either expressed or implied, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. the entire risk as to the quality and performance of the program is with you. should the program prove defective, you assume the cost of all necessary servicing, repair or correction. - limitation of liability. in no event unless required by applicable law or agreed to in writing will any copyright holder, or any other party who modifies and/or conveys the program as permitted above, be liable to you for damages, including any general, special, incidental or consequential damages arising out of the use or inability to use the program (including but not limited to loss of data or data being rendered inaccurate or losses sustained by you or third parties or a failure of the program to operate with any other programs), even if such holder or other party has been advised of the possibility of such damages. - interpretation of sections 15 and 16. if the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the program, unless a warranty or assumption of liability accompanies a copy of the program in return for a fee.",
                                        "matcher": {
                                            "name": "exact",
                                            "confidence": 100
                                        },
                                        "matched_license": "GPL-3.0",
                                        "attribution": null
                                    }
                                ]
                            }
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 100,
                "total_subcriteria": 4,
                "success_subcriteria": 4
            }
        },
        "QC.Sec": {
            "valid": true,
            "subcriteria": {
                "QC.Sec02": {
                    "description": "Is the source code passing Static Analysis Security Testing (SAST)?",
                    "requirement_level": "MUST",
                    "hint": "Please check & solve the security weaknesses found by the SAST tool",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "Source code files pass SAST checks performed by bandit tool",
                            "plugin": {
                                "name": "report2sqaaas-plugin-bandit",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "bandit",
                                "lang": "Python",
                                "version": "1.7.4",
                                "docker": {
                                    "dockerfile": "QC.Sec/bandit/Dockerfile",
                                    "reviewed": "2022-03-04"
                                },
                                "ci": {
                                    "name": "QC.Sec github.com/bcobo/SIRENA bandit",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "bandit -f json --quiet  --confidence-level high --severity-level high --recursive ."
                                    ],
                                    "stdout_text": "{\n  \"errors\": [\n    {\n      \"filename\": \"./doc/sphinxext/apigen.py\",\n      \"reason\": \"syntax error while parsing AST from file\"\n    },\n    {\n      \"filename\": \"./doc/sphinxext/docscrape.py\",\n      \"reason\": \"syntax error while parsing AST from file\"\n    },\n    {\n      \"filename\": \"./doc/sphinxext/inheritance_diagram.py\",\n      \"reason\": \"syntax error while parsing AST from file\"\n    },\n    {\n      \"filename\": \"./doc/sphinxext/numpydoc.py\",\n      \"reason\": \"syntax error while parsing AST from file\"\n    }\n  ],\n  \"generated_at\": \"2024-07-30T15:41:49Z\",\n  \"metrics\": {\n    \"./doc/_themes/sphinx_rtd_theme/__init__.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 11,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/conf.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 39,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/apigen.py\": {\n      \"loc\": 380,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/docscrape.py\": {\n      \"loc\": 398,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/docscrape_sphinx.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 117,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/hidden_code_block.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 86,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/inheritance_diagram.py\": {\n      \"loc\": 322,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/ipython_console_highlighting.py\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 74,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"./doc/sphinxext/numpydoc.py\": {\n      \"loc\": 86,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    },\n    \"_totals\": {\n      \"CONFIDENCE.HIGH\": 0,\n      \"CONFIDENCE.LOW\": 0,\n      \"CONFIDENCE.MEDIUM\": 0,\n      \"CONFIDENCE.UNDEFINED\": 0,\n      \"SEVERITY.HIGH\": 0,\n      \"SEVERITY.LOW\": 0,\n      \"SEVERITY.MEDIUM\": 0,\n      \"SEVERITY.UNDEFINED\": 0,\n      \"loc\": 1513,\n      \"nosec\": 0,\n      \"skipped_tests\": 0\n    }\n  },\n  \"results\": []\n}",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/88/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {
                                "errors": [
                                    {
                                        "filename": "./doc/sphinxext/apigen.py",
                                        "reason": "syntax error while parsing AST from file"
                                    },
                                    {
                                        "filename": "./doc/sphinxext/docscrape.py",
                                        "reason": "syntax error while parsing AST from file"
                                    },
                                    {
                                        "filename": "./doc/sphinxext/inheritance_diagram.py",
                                        "reason": "syntax error while parsing AST from file"
                                    },
                                    {
                                        "filename": "./doc/sphinxext/numpydoc.py",
                                        "reason": "syntax error while parsing AST from file"
                                    }
                                ],
                                "generated_at": "2024-07-30T15:41:49Z",
                                "metrics": {
                                    "./doc/_themes/sphinx_rtd_theme/__init__.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 11,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/conf.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 39,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/apigen.py": {
                                        "loc": 380,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/docscrape.py": {
                                        "loc": 398,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/docscrape_sphinx.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 117,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/hidden_code_block.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 86,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/inheritance_diagram.py": {
                                        "loc": 322,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/ipython_console_highlighting.py": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 74,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "./doc/sphinxext/numpydoc.py": {
                                        "loc": 86,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    },
                                    "_totals": {
                                        "CONFIDENCE.HIGH": 0,
                                        "CONFIDENCE.LOW": 0,
                                        "CONFIDENCE.MEDIUM": 0,
                                        "CONFIDENCE.UNDEFINED": 0,
                                        "SEVERITY.HIGH": 0,
                                        "SEVERITY.LOW": 0,
                                        "SEVERITY.MEDIUM": 0,
                                        "SEVERITY.UNDEFINED": 0,
                                        "loc": 1513,
                                        "nosec": 0,
                                        "skipped_tests": 0
                                    }
                                },
                                "results": []
                            }
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 100,
                "total_subcriteria": 1,
                "success_subcriteria": 1
            }
        },
        "QC.Sty": {
            "valid": false,
            "subcriteria": {
                "QC.Sty01": {
                    "description": "Is the software product following a style standard for Python files?",
                    "requirement_level": "MUST",
                    "hint": "Please check & solve the security weaknesses found by the linter tool",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Python files are not fully compliant with flake8 (pycodestyle, pyflakes, mccabe) standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-flake8",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "flake8",
                                "lang": "Python",
                                "version": "4.0.1 (mccabe: 0.6.1, pycodestyle: 2.8.0, pyflakes: 2.4.0)",
                                "docker": {
                                    "image": "pipelinecomponents/flake8:0.9.0",
                                    "reviewed": "2022-03-04"
                                },
                                "ci": {
                                    "name": "QC.Sty github.com/bcobo/SIRENA flake8",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "flake8 ."
                                    ],
                                    "stdout_text": "./doc/conf.py:1:1: F401 'docutils.parsers.rst.directives.admonitions.BaseAdmonition' imported but unused\n./doc/conf.py:2:1: E265 block comment should start with '# '\n./doc/conf.py:3:1: E265 block comment should start with '# '\n./doc/conf.py:10:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:18:11: E401 multiple imports on one line\n./doc/conf.py:19:1: E265 block comment should start with '# '\n./doc/conf.py:20:1: W293 blank line contains whitespace\n./doc/conf.py:21:1: E265 block comment should start with '# '\n./doc/conf.py:21:80: E501 line too long (84 > 79 characters)\n./doc/conf.py:22:1: E265 block comment should start with '# '\n./doc/conf.py:23:1: E265 block comment should start with '# '\n./doc/conf.py:24:1: E265 block comment should start with '# '\n./doc/conf.py:29:1: E265 block comment should start with '# '\n./doc/conf.py:32:1: E302 expected 2 blank lines, found 1\n./doc/conf.py:33:1: E115 expected an indented block (comment)\n./doc/conf.py:33:1: E265 block comment should start with '# '\n./doc/conf.py:33:55: W291 trailing whitespace\n./doc/conf.py:34:1: W191 indentation contains tabs\n./doc/conf.py:34:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:34:4: E111 indentation is not a multiple of 4\n./doc/conf.py:34:4: E117 over-indented\n./doc/conf.py:37:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:40:1: E265 block comment should start with '# '\n./doc/conf.py:42:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:46:1: W191 indentation contains tabs\n./doc/conf.py:46:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:47:1: W191 indentation contains tabs\n./doc/conf.py:47:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:47:5: E265 block comment should start with '# '\n./doc/conf.py:47:80: E501 line too long (91 > 79 characters)\n./doc/conf.py:48:1: W191 indentation contains tabs\n./doc/conf.py:48:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:48:5: E265 block comment should start with '# '\n./doc/conf.py:49:1: W191 indentation contains tabs\n./doc/conf.py:49:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:49:4: E131 continuation line unaligned for hanging indent\n./doc/conf.py:50:11: E131 continuation line unaligned for hanging indent\n./doc/conf.py:54:11: E265 block comment should start with '# '\n./doc/conf.py:55:1: W191 indentation contains tabs\n./doc/conf.py:55:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:66:1: E265 block comment should start with '# '\n./doc/conf.py:86:1: E265 block comment should start with '# '\n./doc/conf.py:90:1: E265 block comment should start with '# '\n./doc/conf.py:92:1: E265 block comment should start with '# '\n./doc/conf.py:98:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:99:1: E265 block comment should start with '# '\n./doc/conf.py:102:1: E265 block comment should start with '# '\n./doc/conf.py:106:1: E265 block comment should start with '# '\n./doc/conf.py:110:1: E265 block comment should start with '# '\n./doc/conf.py:116:1: E265 block comment should start with '# '\n./doc/conf.py:119:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:123:23: E261 at least two spaces before inline comment\n./doc/conf.py:124:1: E265 block comment should start with '# '\n./doc/conf.py:130:1: E265 block comment should start with '# '\n./doc/conf.py:133:1: E265 block comment should start with '# '\n./doc/conf.py:138:1: E265 block comment should start with '# '\n./doc/conf.py:141:1: E265 block comment should start with '# '\n./doc/conf.py:158:54: E231 missing whitespace after ','\n./doc/conf.py:158:73: E231 missing whitespace after ','\n./doc/conf.py:158:80: E501 line too long (93 > 79 characters)\n./doc/conf.py:163:1: E265 block comment should start with '# '\n./doc/conf.py:167:1: E265 block comment should start with '# '\n./doc/conf.py:170:1: E265 block comment should start with '# '\n./doc/conf.py:174:1: E265 block comment should start with '# '\n./doc/conf.py:177:1: E265 block comment should start with '# '\n./doc/conf.py:180:1: E265 block comment should start with '# '\n./doc/conf.py:183:1: E265 block comment should start with '# '\n./doc/conf.py:186:1: E265 block comment should start with '# '\n./doc/conf.py:189:1: E265 block comment should start with '# '\n./doc/conf.py:192:1: E265 block comment should start with '# '\n./doc/conf.py:197:1: E265 block comment should start with '# '\n./doc/conf.py:200:1: E265 block comment should start with '# '\n./doc/conf.py:206:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:209:1: E265 block comment should start with '# '\n./doc/conf.py:212:1: E265 block comment should start with '# '\n./doc/conf.py:215:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:223:1: E265 block comment should start with '# '\n./doc/conf.py:227:1: E265 block comment should start with '# '\n./doc/conf.py:230:1: E265 block comment should start with '# '\n./doc/conf.py:233:1: E265 block comment should start with '# '\n./doc/conf.py:236:1: E265 block comment should start with '# '\n./doc/conf.py:239:1: E265 block comment should start with '# '\n./doc/conf.py:242:1: E265 block comment should start with '# '\n./doc/conf.py:245:80: E501 line too long (80 > 79 characters)\n./doc/sphinxext/inheritance_diagram.py:383:28: E999 SyntaxError: invalid syntax\n./doc/sphinxext/hidden_code_block.py:2:69: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:7:57: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:24:65: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:25:31: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:27:65: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:38:1: F401 'sphinx.util.compat.make_admonition' imported but unused\n./doc/sphinxext/hidden_code_block.py:56:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/hidden_code_block.py:70:46: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:92:60: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:95:9: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:100:62: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:104:72: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:105:79: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:106:47: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:109:80: E501 line too long (91 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:8:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:16:1: F401 'pygments.lexers.agile.PythonConsoleLexer' imported but unused\n./doc/sphinxext/ipython_console_highlighting.py:16:68: W291 trailing whitespace\n./doc/sphinxext/ipython_console_highlighting.py:22:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:26:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:29:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/ipython_console_highlighting.py:51:1: W293 blank line contains whitespace\n./doc/sphinxext/ipython_console_highlighting.py:55:36: W605 invalid escape sequence '\\['\n./doc/sphinxext/ipython_console_highlighting.py:55:44: W605 invalid escape sequence '\\]'\n./doc/sphinxext/ipython_console_highlighting.py:55:54: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:55:56: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:55:58: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:56:37: W605 invalid escape sequence '\\['\n./doc/sphinxext/ipython_console_highlighting.py:56:45: W605 invalid escape sequence '\\]'\n./doc/sphinxext/ipython_console_highlighting.py:56:55: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:56:57: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:56:59: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:57:38: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:57:40: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:57:42: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:58:28: W605 invalid escape sequence '\\-'\n./doc/sphinxext/ipython_console_highlighting.py:62:9: F841 local variable 'tblexer' is assigned to but never used\n./doc/sphinxext/ipython_console_highlighting.py:76:80: E501 line too long (80 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:80:80: E501 line too long (83 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:87:80: E501 line too long (80 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:92:80: E501 line too long (87 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:112:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:114:1: E305 expected 2 blank lines after class or function definition, found 1\n./doc/sphinxext/apigen.py:209:19: E999 SyntaxError: invalid syntax\n./doc/sphinxext/docscrape.py:416:26: E999 SyntaxError: invalid syntax\n./doc/sphinxext/docscrape_sphinx.py:1:1: F401 're' imported but unused\n./doc/sphinxext/docscrape_sphinx.py:1:10: E401 multiple imports on one line\n./doc/sphinxext/docscrape_sphinx.py:4:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:36:22: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:36:33: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:40:45: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:75:52: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:102:37: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:109:35: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:112:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:115:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:118:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:136:1: W391 blank line at end of file\n./doc/sphinxext/numpydoc.py:52:23: E999 SyntaxError: invalid syntax",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/97/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": "./doc/conf.py:1:1: F401 'docutils.parsers.rst.directives.admonitions.BaseAdmonition' imported but unused\n./doc/conf.py:2:1: E265 block comment should start with '# '\n./doc/conf.py:3:1: E265 block comment should start with '# '\n./doc/conf.py:10:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:18:11: E401 multiple imports on one line\n./doc/conf.py:19:1: E265 block comment should start with '# '\n./doc/conf.py:20:1: W293 blank line contains whitespace\n./doc/conf.py:21:1: E265 block comment should start with '# '\n./doc/conf.py:21:80: E501 line too long (84 > 79 characters)\n./doc/conf.py:22:1: E265 block comment should start with '# '\n./doc/conf.py:23:1: E265 block comment should start with '# '\n./doc/conf.py:24:1: E265 block comment should start with '# '\n./doc/conf.py:29:1: E265 block comment should start with '# '\n./doc/conf.py:32:1: E302 expected 2 blank lines, found 1\n./doc/conf.py:33:1: E115 expected an indented block (comment)\n./doc/conf.py:33:1: E265 block comment should start with '# '\n./doc/conf.py:33:55: W291 trailing whitespace\n./doc/conf.py:34:1: W191 indentation contains tabs\n./doc/conf.py:34:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:34:4: E111 indentation is not a multiple of 4\n./doc/conf.py:34:4: E117 over-indented\n./doc/conf.py:37:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:40:1: E265 block comment should start with '# '\n./doc/conf.py:42:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:46:1: W191 indentation contains tabs\n./doc/conf.py:46:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:47:1: W191 indentation contains tabs\n./doc/conf.py:47:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:47:5: E265 block comment should start with '# '\n./doc/conf.py:47:80: E501 line too long (91 > 79 characters)\n./doc/conf.py:48:1: W191 indentation contains tabs\n./doc/conf.py:48:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:48:5: E265 block comment should start with '# '\n./doc/conf.py:49:1: W191 indentation contains tabs\n./doc/conf.py:49:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:49:4: E131 continuation line unaligned for hanging indent\n./doc/conf.py:50:11: E131 continuation line unaligned for hanging indent\n./doc/conf.py:54:11: E265 block comment should start with '# '\n./doc/conf.py:55:1: W191 indentation contains tabs\n./doc/conf.py:55:1: E101 indentation contains mixed spaces and tabs\n./doc/conf.py:66:1: E265 block comment should start with '# '\n./doc/conf.py:86:1: E265 block comment should start with '# '\n./doc/conf.py:90:1: E265 block comment should start with '# '\n./doc/conf.py:92:1: E265 block comment should start with '# '\n./doc/conf.py:98:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:99:1: E265 block comment should start with '# '\n./doc/conf.py:102:1: E265 block comment should start with '# '\n./doc/conf.py:106:1: E265 block comment should start with '# '\n./doc/conf.py:110:1: E265 block comment should start with '# '\n./doc/conf.py:116:1: E265 block comment should start with '# '\n./doc/conf.py:119:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:123:23: E261 at least two spaces before inline comment\n./doc/conf.py:124:1: E265 block comment should start with '# '\n./doc/conf.py:130:1: E265 block comment should start with '# '\n./doc/conf.py:133:1: E265 block comment should start with '# '\n./doc/conf.py:138:1: E265 block comment should start with '# '\n./doc/conf.py:141:1: E265 block comment should start with '# '\n./doc/conf.py:158:54: E231 missing whitespace after ','\n./doc/conf.py:158:73: E231 missing whitespace after ','\n./doc/conf.py:158:80: E501 line too long (93 > 79 characters)\n./doc/conf.py:163:1: E265 block comment should start with '# '\n./doc/conf.py:167:1: E265 block comment should start with '# '\n./doc/conf.py:170:1: E265 block comment should start with '# '\n./doc/conf.py:174:1: E265 block comment should start with '# '\n./doc/conf.py:177:1: E265 block comment should start with '# '\n./doc/conf.py:180:1: E265 block comment should start with '# '\n./doc/conf.py:183:1: E265 block comment should start with '# '\n./doc/conf.py:186:1: E265 block comment should start with '# '\n./doc/conf.py:189:1: E265 block comment should start with '# '\n./doc/conf.py:192:1: E265 block comment should start with '# '\n./doc/conf.py:197:1: E265 block comment should start with '# '\n./doc/conf.py:200:1: E265 block comment should start with '# '\n./doc/conf.py:206:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:209:1: E265 block comment should start with '# '\n./doc/conf.py:212:1: E265 block comment should start with '# '\n./doc/conf.py:215:80: E501 line too long (80 > 79 characters)\n./doc/conf.py:223:1: E265 block comment should start with '# '\n./doc/conf.py:227:1: E265 block comment should start with '# '\n./doc/conf.py:230:1: E265 block comment should start with '# '\n./doc/conf.py:233:1: E265 block comment should start with '# '\n./doc/conf.py:236:1: E265 block comment should start with '# '\n./doc/conf.py:239:1: E265 block comment should start with '# '\n./doc/conf.py:242:1: E265 block comment should start with '# '\n./doc/conf.py:245:80: E501 line too long (80 > 79 characters)\n./doc/sphinxext/inheritance_diagram.py:383:28: E999 SyntaxError: invalid syntax\n./doc/sphinxext/hidden_code_block.py:2:69: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:7:57: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:24:65: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:25:31: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:27:65: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:38:1: F401 'sphinx.util.compat.make_admonition' imported but unused\n./doc/sphinxext/hidden_code_block.py:56:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/hidden_code_block.py:70:46: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:92:60: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:95:9: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:100:62: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:104:72: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:105:79: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:106:47: W291 trailing whitespace\n./doc/sphinxext/hidden_code_block.py:109:80: E501 line too long (91 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:8:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:16:1: F401 'pygments.lexers.agile.PythonConsoleLexer' imported but unused\n./doc/sphinxext/ipython_console_highlighting.py:16:68: W291 trailing whitespace\n./doc/sphinxext/ipython_console_highlighting.py:22:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:26:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:29:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/ipython_console_highlighting.py:51:1: W293 blank line contains whitespace\n./doc/sphinxext/ipython_console_highlighting.py:55:36: W605 invalid escape sequence '\\['\n./doc/sphinxext/ipython_console_highlighting.py:55:44: W605 invalid escape sequence '\\]'\n./doc/sphinxext/ipython_console_highlighting.py:55:54: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:55:56: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:55:58: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:56:37: W605 invalid escape sequence '\\['\n./doc/sphinxext/ipython_console_highlighting.py:56:45: W605 invalid escape sequence '\\]'\n./doc/sphinxext/ipython_console_highlighting.py:56:55: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:56:57: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:56:59: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:57:38: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:57:40: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:57:42: W605 invalid escape sequence '\\.'\n./doc/sphinxext/ipython_console_highlighting.py:58:28: W605 invalid escape sequence '\\-'\n./doc/sphinxext/ipython_console_highlighting.py:62:9: F841 local variable 'tblexer' is assigned to but never used\n./doc/sphinxext/ipython_console_highlighting.py:76:80: E501 line too long (80 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:80:80: E501 line too long (83 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:87:80: E501 line too long (80 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:92:80: E501 line too long (87 > 79 characters)\n./doc/sphinxext/ipython_console_highlighting.py:112:1: E265 block comment should start with '# '\n./doc/sphinxext/ipython_console_highlighting.py:114:1: E305 expected 2 blank lines after class or function definition, found 1\n./doc/sphinxext/apigen.py:209:19: E999 SyntaxError: invalid syntax\n./doc/sphinxext/docscrape.py:416:26: E999 SyntaxError: invalid syntax\n./doc/sphinxext/docscrape_sphinx.py:1:1: F401 're' imported but unused\n./doc/sphinxext/docscrape_sphinx.py:1:10: E401 multiple imports on one line\n./doc/sphinxext/docscrape_sphinx.py:4:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:36:22: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:36:33: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:40:45: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:75:52: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:102:37: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:109:35: E231 missing whitespace after ','\n./doc/sphinxext/docscrape_sphinx.py:112:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:115:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:118:1: E302 expected 2 blank lines, found 1\n./doc/sphinxext/docscrape_sphinx.py:136:1: W391 blank line at end of file\n./doc/sphinxext/numpydoc.py:52:23: E999 SyntaxError: invalid syntax"
                        },
                        {
                            "valid": true,
                            "message": "JSON files are compliant with jsonlint standard",
                            "plugin": {
                                "name": "report2sqaaas-plugin-jenkins_exit_status",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "jsonlint",
                                "lang": "JSON",
                                "version": "1.6.3",
                                "docker": {
                                    "dockerfile": "QC.Sty/jsonlint/Dockerfile",
                                    "reviewed": "2021-11-23"
                                },
                                "ci": {
                                    "name": "QC.Sty github.com/bcobo/SIRENA jsonlint",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "jsonlint-cli \"**/*.json\""
                                    ],
                                    "stdout_text": "",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/106/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 0,
                "total_subcriteria": 1,
                "success_subcriteria": 0
            }
        },
        "QC.Uni": {
            "valid": false,
            "subcriteria": {
                "QC.Uni01": {
                    "description": "Are the tests passing through an automated means?",
                    "requirement_level": "MUST",
                    "hint": "Please check & solve the failing test cases found by the {tool_name} tool",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Test cases are not passing using None testing framework",
                            "plugin": {
                                "name": "report2sqaaas-plugin-jenkins_exit_status",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "pytest",
                                "lang": "Python",
                                "version": "7.1.3",
                                "docker": {
                                    "image": "eoscsynergy/sqaaas-pytest:7.1.3-alpha",
                                    "reviewed": "2023-08-09"
                                },
                                "ci": {
                                    "name": "QC.Uni github.com/bcobo/SIRENA pytest",
                                    "status": "FAILED",
                                    "stdout_command": [
                                        "pytest  --json-report  --json-report-indent 4"
                                    ],
                                    "stdout_text": "============================= test session starts ==============================\nplatform linux -- Python 3.9.17, pytest-7.1.3, pluggy-1.2.0\nrootdir: /sqaaas-build/github.com/bcobo/SIRENA\nplugins: metadata-3.0.0, json-report-1.5.0\ncollected 0 items\n\n--------------------------------- JSON report ----------------------------------\nreport saved to: .report.json\n============================ no tests ran in 0.06s =============================",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/115/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": {}
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                }
            },
            "coverage": {
                "percentage": 0,
                "total_subcriteria": 1,
                "success_subcriteria": 0
            }
        },
        "QC.Ver": {
            "valid": false,
            "subcriteria": {
                "QC.Ver01.0": {
                    "description": "Are tags being used for releasing software",
                    "requirement_level": "MUST",
                    "hint": "Git tags are a convenient way to release software. This subcriterion checks if any git tag is present in the code history. More info on it-scm.com/book/en/v2/Git-Basics-Tagging\" target=\"_blank\">git tagging</a>",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "The code repository does not use tags for releasing new software versions",
                            "plugin": {
                                "name": "report2sqaaas-plugin-is_semver",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "get_git_tags.py",
                                "lang": "Semantic Versioning",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Ver/Dockerfile",
                                    "reviewed": "2022-05-10"
                                },
                                "ci": {
                                    "name": "QC.Ver github.com/bcobo/SIRENA get_git_tags.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "get_git_tags.py"
                                    ],
                                    "stdout_text": "[]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/124/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": []
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": true
                },
                "QC.Ver01": {
                    "description": "Is the latest release compliant with Semantic Versioning (SemVer) specification?",
                    "requirement_level": "SHOULD",
                    "hint": "Latest tag must be compliant with <a href=\"https://semver.org\" target=\"_blank\">SemVer specification</a>",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "Latest release tag None found, but is not SemVer compliant",
                            "plugin": {
                                "name": "report2sqaaas-plugin-is_semver",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "get_git_tags.py",
                                "lang": "Semantic Versioning",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Ver/Dockerfile",
                                    "reviewed": "2022-05-10"
                                },
                                "ci": {
                                    "name": "QC.Ver github.com/bcobo/SIRENA get_git_tags.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "get_git_tags.py"
                                    ],
                                    "stdout_text": "[]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/124/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": []
                        }
                    ],
                    "valid": false,
                    "required_for_next_level_badge": false
                },
                "QC.Ver02": {
                    "description": "Are all release tags with Semantic Versioning (SemVer) specification?",
                    "requirement_level": "SHOULD",
                    "hint": "Existent release tags shall be <a href=\"https://semver.org\" target=\"_blank\">SemVer</a> compliant for this subcriterion to be successful",
                    "evidence": [
                        {
                            "valid": true,
                            "message": "All release tags are SemVer compliant",
                            "plugin": {
                                "name": "report2sqaaas-plugin-is_semver",
                                "version": "2.1.0"
                            },
                            "tool": {
                                "name": "get_git_tags.py",
                                "lang": "Semantic Versioning",
                                "version": "latest",
                                "docker": {
                                    "dockerfile": "QC.Ver/Dockerfile",
                                    "reviewed": "2022-05-10"
                                },
                                "ci": {
                                    "name": "QC.Ver github.com/bcobo/SIRENA get_git_tags.py",
                                    "status": "SUCCESS",
                                    "stdout_command": [
                                        "get_git_tags.py"
                                    ],
                                    "stdout_text": "[]",
                                    "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/execution/node/124/log?consoleFull"
                                },
                                "level": "REQUIRED",
                                "build_repo": "https://github.com/eosc-synergy/.assess.sqaaas"
                            },
                            "standard": {
                                "title": "A set of Common Software Quality Assurance Baseline Criteria for Research Projects",
                                "version": "v4.0",
                                "url": "https://github.com/indigo-dc/sqa-baseline/releases/tag/v4.0"
                            },
                            "data_unstructured": []
                        }
                    ],
                    "valid": true
                }
            },
            "coverage": {
                "percentage": 33,
                "total_subcriteria": 3,
                "success_subcriteria": 1
            }
        },
        "QC.Met": {
            "valid": false,
            "subcriteria": {
                "QC.Met01": {
                    "description": "Is the software citable?",
                    "valid": false,
                    "hint": "The two formats for software citation supported by SQAaaS are: 1) <a href=\"https://codemeta.github.io/\" target=\"_blank\">CodeMeta</a> and 2) <a href=\"https://citation-file-format.github.io/\" target=\"_blank\">Citation File Format (CFF)</a>. While CodeMeta provides you with a more comprehensive description, CFF is a more lightweight, good-enough approach to software (with built-in support by GitHub) citation. Both provide tools (<a href=\"https://codemeta.github.io/codemeta-generator/\" target=\"_blank\">CodeMeta generator</a>, <a href=\"https://citation-file-format.github.io/cff-initializer-javascript/#/\" target=\"_blank\">CFFINIT</a>)to easily generate a working citation file. Once having the file, be sure to add it to the root path of your code repo.",
                    "evidence": [
                        {
                            "valid": false,
                            "message": "No matching files found for language <CodeMeta> in repository searching by extensions or filenames\nNo matching files found for language <Citation File Format> in repository searching by extensions or filenames"
                        }
                    ],
                    "required_for_next_level_badge": true
                }
            },
            "coverage": {
                "percentage": 0,
                "total_subcriteria": 1,
                "success_subcriteria": 0
            }
        }
    },
    "badge": {
        "software": {
            "criteria": {
                "bronze": {
                    "to_fulfill": [
                        "QC.Acc",
                        "QC.Lic",
                        "QC.Doc"
                    ],
                    "missing": [],
                    "fulfilled": [
                        "QC.Acc",
                        "QC.Lic",
                        "QC.Doc"
                    ]
                },
                "silver": {
                    "to_fulfill": [
                        "QC.Met",
                        "QC.Acc",
                        "QC.Doc",
                        "QC.Ver",
                        "QC.Lic"
                    ],
                    "missing": [
                        "QC.Met",
                        "QC.Ver"
                    ],
                    "fulfilled": [
                        "QC.Acc",
                        "QC.Lic",
                        "QC.Doc"
                    ]
                },
                "gold": {
                    "to_fulfill": [
                        "QC.Met",
                        "QC.Sec",
                        "QC.Acc",
                        "QC.Uni",
                        "QC.Doc",
                        "QC.Sty",
                        "QC.Ver",
                        "QC.Lic"
                    ],
                    "missing": [
                        "QC.Met",
                        "QC.Uni",
                        "QC.Sty",
                        "QC.Ver"
                    ],
                    "fulfilled": [
                        "QC.Acc",
                        "QC.Sec",
                        "QC.Lic",
                        "QC.Doc"
                    ]
                }
            },
            "data": {
                "entityType": "Assertion",
                "entityId": "5GEdTdkzR2KDlXkZTCgrLg",
                "openBadgeId": "https://api.eu.badgr.io/public/assertions/5GEdTdkzR2KDlXkZTCgrLg",
                "createdAt": "2024-07-30T15:44:26.397544238Z",
                "createdBy": "aS1lWKgIR4u8bGjPZUzAyg",
                "badgeclass": "UOmgyH_TSpSPXiro4aNBoQ",
                "badgeclassOpenBadgeId": "https://api.eu.badgr.io/public/badges/UOmgyH_TSpSPXiro4aNBoQ",
                "issuer": "aS1lWKgIR4u8bGjPZUzAyg",
                "issuerOpenBadgeId": "https://api.eu.badgr.io/public/issuers/aS1lWKgIR4u8bGjPZUzAyg",
                "image": "https://api.eu.badgr.io/public/assertions/5GEdTdkzR2KDlXkZTCgrLg/image",
                "recipient": {
                    "identity": "sha256$ec1bd4355c57db94b1fbbc132ce86f95f147c73e4bb2906973b0d9425fd65b3e",
                    "hashed": true,
                    "type": "url",
                    "salt": "yTO6ez69gQUmhdQK",
                    "plaintextIdentity": "https://github.com/bcobo/SIRENA/"
                },
                "issuedOn": "2024-07-30T15:44:26.397548053Z",
                "narrative": "SQAaaS assessment results for repository https://github.com/bcobo/SIRENA/ (commit: 0d5bcf504ac15675128cf679e98081df43ae6fa0, branch/tag: master)",
                "evidence": [
                    {
                        "url": "https://github.com/EOSC-synergy/.assess.sqaaas/commit/07f1342daf8283e9a3e5baa76842bac6b9f5a14c",
                        "narrative": "SQAaaS build repository"
                    },
                    {
                        "url": "https://jenkins.eosc-synergy.eu/job/eosc-synergy-org/job/.assess.sqaaas/job/master/1/",
                        "narrative": "Build page from Jenkins CI"
                    }
                ],
                "revoked": false,
                "revocationReason": null,
                "acceptance": "Unaccepted",
                "expires": null,
                "extensions": {},
                "assertionRef": {
                    "assertionUrl": "https://api.eu.badgr.io/public/assertions/5GEdTdkzR2KDlXkZTCgrLg"
                },
                "badgeRef": {
                    "badgeUrl": "https://api.eu.badgr.io/public/badges/UOmgyH_TSpSPXiro4aNBoQ"
                },
                "issuerRef": {
                    "issuerUrl": "https://api.eu.badgr.io/public/issuers/aS1lWKgIR4u8bGjPZUzAyg"
                },
                "pending": null,
                "source": "local",
                "sourceUrl": null,
                "originalJson": null,
                "imagePath": "uploads/badges/assertion-5GEdTdkzR2KDlXkZTCgrLg.png"
            },
            "share": "<!--\nSPDX-FileCopyrightText: Copyright contributors to the Software Quality Assurance as a Service (SQAaaS) project <sqaaas@ibergrid.eu>\nSPDX-FileContributor: Pablo Orviz <orviz@ifca.unican.es>\n\nSPDX-License-Identifier: GPL-3.0-only\n-->\n\n<blockquote class=\"badgr-badge\" style=\"font-family: Helvetica, Roboto, &quot;Segoe UI&quot;, Calibri, sans-serif;\"><a href=\"https://api.eu.badgr.io/public/assertions/5GEdTdkzR2KDlXkZTCgrLg?identity__url=https%3A//github.com/EOSC-synergy/.assess.sqaaas/commit/07f1342daf8283e9a3e5baa76842bac6b9f5a14c\"><img width=\"120px\" height=\"120px\" src=\"https://api.eu.badgr.io/public/assertions/5GEdTdkzR2KDlXkZTCgrLg/image\"></a><script async=\"async\" src=\"https://eu.badgr.com/assets/widgets.bundle.js\"></script></blockquote>",
            "verification_url": "https://badgecheck.io/?url=https%3A%2F%2Fapi.eu.badgr.io%2Fpublic%2Fassertions%2F5GEdTdkzR2KDlXkZTCgrLg?identity__url=https%3A%2F%2Fgithub.com%2FEOSC-synergy%2F.assess.sqaaas%2Fcommit%2F07f1342daf8283e9a3e5baa76842bac6b9f5a14c&amp;identity__url=https%3A%2F%2Fgithub.com%2FEOSC-synergy%2F.assess.sqaaas%2Fcommit%2F07f1342daf8283e9a3e5baa76842bac6b9f5a14c"
        }
    }
}